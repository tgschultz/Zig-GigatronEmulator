const win32 = @import("win32.zig");
const WINAPI = @import("std").os.windows.WINAPI;

const BOOL = win32.foundation.BOOL;
const CHAR = win32.foundation.CHAR;
const DWORD = win32.foundation.DWORD;
const FLOAT = win32.foundation.FLOAT;
const HANDLE = win32.foundation.HANDLE;
const HDC = win32.graphics.gdi.HDC;
const HGLRC = win32.graphics.open_gl.HGLRC;
const INT = win32.foundation.INT;
const INT32 = win32.foundation.INT32;
const INT64 = win32.foundation.INT64;
const LPVOID = win32.foundation.LPVOID;
const RECT = win32.foundation.RECT;
const UINT = c_uint;
const USHORT = win32.foundation.USHORT;
const VOID = win32.foundation.VOID;


pub const ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV = 8400;
pub const ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB = 8276;
pub const ERROR_INVALID_PIXEL_TYPE_ARB = 8259;
pub const ERROR_INVALID_PIXEL_TYPE_EXT = 8259;
pub const ERROR_INVALID_PROFILE_ARB = 8342;
pub const ERROR_INVALID_VERSION_ARB = 8341;
pub const ERROR_MISSING_AFFINITY_MASK_NV = 8401;

pub const GL_NO_ERROR = 0;
pub const GL_INVALID_ENUM = 1280;
pub const GL_INVALID_VALUE = 1281;
pub const GL_INVALID_OPERATION = 1282;
pub const GL_STACK_OVERFLOW = 1283;
pub const GL_STACK_UNDERFLOW = 1284;
pub const GL_OUT_OF_MEMORY = 1285;

pub const GL_2D = 1536;
pub const GL_2_BYTES = 5127;
pub const GL_3D = 1537;
pub const GL_3D_COLOR = 1538;
pub const GL_3D_COLOR_TEXTURE = 1539;
pub const GL_3_BYTES = 5128;
pub const GL_4D_COLOR_TEXTURE = 1540;
pub const GL_4_BYTES = 5129;
pub const GL_ACCUM = 256;
pub const GL_ACCUM_ALPHA_BITS = 3419;
pub const GL_ACCUM_BLUE_BITS = 3418;
pub const GL_ACCUM_BUFFER_BIT = 512;
pub const GL_ACCUM_CLEAR_VALUE = 2944;
pub const GL_ACCUM_GREEN_BITS = 3417;
pub const GL_ACCUM_RED_BITS = 3416;
pub const GL_ADD = 260;
pub const GL_ALL_ATTRIB_BITS = 1048575;
pub const GL_ALPHA = 6406;
pub const GL_ALPHA12 = 32829;
pub const GL_ALPHA16 = 32830;
pub const GL_ALPHA4 = 32827;
pub const GL_ALPHA8 = 32828;
pub const GL_ALPHA_BIAS = 3357;
pub const GL_ALPHA_BITS = 3413;
pub const GL_ALPHA_SCALE = 3356;
pub const GL_ALPHA_TEST = 3008;
pub const GL_ALPHA_TEST_FUNC = 3009;
pub const GL_ALPHA_TEST_REF = 3010;
pub const GL_ALWAYS = 519;
pub const GL_AMBIENT = 4608;
pub const GL_AMBIENT_AND_DIFFUSE = 5634;
pub const GL_AND = 5377;
pub const GL_AND_INVERTED = 5380;
pub const GL_AND_REVERSE = 5378;
pub const GL_ATTRIB_STACK_DEPTH = 2992;
pub const GL_AUTO_NORMAL = 3456;
pub const GL_AUX0 = 1033;
pub const GL_AUX1 = 1034;
pub const GL_AUX2 = 1035;
pub const GL_AUX3 = 1036;
pub const GL_AUX_BUFFERS = 3072;
pub const GL_BACK = 1029;
pub const GL_BACK_LEFT = 1026;
pub const GL_BACK_RIGHT = 1027;
pub const GL_BGRA_EXT = 32993;
pub const GL_BGR_EXT = 32992;
pub const GL_BITMAP = 6656;
pub const GL_BITMAP_TOKEN = 1796;
pub const GL_BLEND = 3042;
pub const GL_BLEND_DST = 3040;
pub const GL_BLEND_SRC = 3041;
pub const GL_BLUE = 6405;
pub const GL_BLUE_BIAS = 3355;
pub const GL_BLUE_BITS = 3412;
pub const GL_BLUE_SCALE = 3354;
pub const GL_BYTE = 5120;
pub const GL_C3F_V3F = 10788;
pub const GL_C4F_N3F_V3F = 10790;
pub const GL_C4UB_V2F = 10786;
pub const GL_C4UB_V3F = 10787;
pub const GL_CCW = 2305;
pub const GL_CLAMP = 10496;
pub const GL_CLEAR = 5376;
pub const GL_CLIENT_ALL_ATTRIB_BITS = 4294967295;
pub const GL_CLIENT_ATTRIB_STACK_DEPTH = 2993;
pub const GL_CLIENT_PIXEL_STORE_BIT = 1;
pub const GL_CLIENT_VERTEX_ARRAY_BIT = 2;
pub const GL_CLIP_PLANE0 = 12288;
pub const GL_CLIP_PLANE1 = 12289;
pub const GL_CLIP_PLANE2 = 12290;
pub const GL_CLIP_PLANE3 = 12291;
pub const GL_CLIP_PLANE4 = 12292;
pub const GL_CLIP_PLANE5 = 12293;
pub const GL_COEFF = 2560;
pub const GL_COLOR = 6144;
pub const GL_COLOR_ARRAY = 32886;
pub const GL_COLOR_ARRAY_COUNT_EXT = 32900;
pub const GL_COLOR_ARRAY_EXT = 32886;
pub const GL_COLOR_ARRAY_POINTER = 32912;
pub const GL_COLOR_ARRAY_POINTER_EXT = 32912;
pub const GL_COLOR_ARRAY_SIZE = 32897;
pub const GL_COLOR_ARRAY_SIZE_EXT = 32897;
pub const GL_COLOR_ARRAY_STRIDE = 32899;
pub const GL_COLOR_ARRAY_STRIDE_EXT = 32899;
pub const GL_COLOR_ARRAY_TYPE = 32898;
pub const GL_COLOR_ARRAY_TYPE_EXT = 32898;
pub const GL_COLOR_BUFFER_BIT = 16384;
pub const GL_COLOR_CLEAR_VALUE = 3106;
pub const GL_COLOR_INDEX = 6400;
pub const GL_COLOR_INDEX12_EXT = 32998;
pub const GL_COLOR_INDEX16_EXT = 32999;
pub const GL_COLOR_INDEX1_EXT = 32994;
pub const GL_COLOR_INDEX2_EXT = 32995;
pub const GL_COLOR_INDEX4_EXT = 32996;
pub const GL_COLOR_INDEX8_EXT = 32997;
pub const GL_COLOR_INDEXES = 5635;
pub const GL_COLOR_LOGIC_OP = 3058;
pub const GL_COLOR_MATERIAL = 2903;
pub const GL_COLOR_MATERIAL_FACE = 2901;
pub const GL_COLOR_MATERIAL_PARAMETER = 2902;
pub const GL_COLOR_TABLE_ALPHA_SIZE_EXT = 32989;
pub const GL_COLOR_TABLE_BLUE_SIZE_EXT = 32988;
pub const GL_COLOR_TABLE_FORMAT_EXT = 32984;
pub const GL_COLOR_TABLE_GREEN_SIZE_EXT = 32987;
pub const GL_COLOR_TABLE_INTENSITY_SIZE_EXT = 32991;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = 32990;
pub const GL_COLOR_TABLE_RED_SIZE_EXT = 32986;
pub const GL_COLOR_TABLE_WIDTH_EXT = 32985;
pub const GL_COLOR_WRITEMASK = 3107;
pub const GL_COMPILE = 4864;
pub const GL_COMPILE_AND_EXECUTE = 4865;
pub const GL_CONSTANT_ATTENUATION = 4615;
pub const GL_COPY = 5379;
pub const GL_COPY_INVERTED = 5388;
pub const GL_COPY_PIXEL_TOKEN = 1798;
pub const GL_CULL_FACE = 2884;
pub const GL_CULL_FACE_MODE = 2885;
pub const GL_CURRENT_BIT = 1;
pub const GL_CURRENT_COLOR = 2816;
pub const GL_CURRENT_INDEX = 2817;
pub const GL_CURRENT_NORMAL = 2818;
pub const GL_CURRENT_RASTER_COLOR = 2820;
pub const GL_CURRENT_RASTER_DISTANCE = 2825;
pub const GL_CURRENT_RASTER_INDEX = 2821;
pub const GL_CURRENT_RASTER_POSITION = 2823;
pub const GL_CURRENT_RASTER_POSITION_VALID = 2824;
pub const GL_CURRENT_RASTER_TEXTURE_COORDS = 2822;
pub const GL_CURRENT_TEXTURE_COORDS = 2819;
pub const GL_CW = 2304;
pub const GL_DECAL = 8449;
pub const GL_DECR = 7683;
pub const GL_DEPTH = 6145;
pub const GL_DEPTH_BIAS = 3359;
pub const GL_DEPTH_BITS = 3414;
pub const GL_DEPTH_BUFFER_BIT = 256;
pub const GL_DEPTH_CLEAR_VALUE = 2931;
pub const GL_DEPTH_COMPONENT = 6402;
pub const GL_DEPTH_FUNC = 2932;
pub const GL_DEPTH_RANGE = 2928;
pub const GL_DEPTH_SCALE = 3358;
pub const GL_DEPTH_TEST = 2929;
pub const GL_DEPTH_WRITEMASK = 2930;
pub const GL_DIFFUSE = 4609;
pub const GL_DITHER = 3024;
pub const GL_DOMAIN = 2562;
pub const GL_DONT_CARE = 4352;
pub const GL_DOUBLE = 5130;
pub const GL_DOUBLEBUFFER = 3122;
pub const GL_DOUBLE_EXT = GL_DOUBLE;
pub const GL_DRAW_BUFFER = 3073;
pub const GL_DRAW_PIXEL_TOKEN = 1797;
pub const GL_DST_ALPHA = 772;
pub const GL_DST_COLOR = 774;
pub const GL_EDGE_FLAG = 2883;
pub const GL_EDGE_FLAG_ARRAY = 32889;
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT = 32909;
pub const GL_EDGE_FLAG_ARRAY_EXT = 32889;
pub const GL_EDGE_FLAG_ARRAY_POINTER = 32915;
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT = 32915;
pub const GL_EDGE_FLAG_ARRAY_STRIDE = 32908;
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 32908;
pub const GL_EMISSION = 5632;
pub const GL_ENABLE_BIT = 8192;
pub const GL_EQUAL = 514;
pub const GL_EQUIV = 5385;
pub const GL_EVAL_BIT = 65536;
pub const GL_EXP = 2048;
pub const GL_EXP2 = 2049;
pub const GL_EXTENSIONS = 7939;
pub const GL_EXT_bgra = 1;
pub const GL_EXT_paletted_texture = 1;
pub const GL_EXT_vertex_array = 1;
pub const GL_EYE_LINEAR = 9216;
pub const GL_EYE_PLANE = 9474;
pub const GL_FALSE = 0;
pub const GL_FASTEST = 4353;
pub const GL_FEEDBACK = 7169;
pub const GL_FEEDBACK_BUFFER_POINTER = 3568;
pub const GL_FEEDBACK_BUFFER_SIZE = 3569;
pub const GL_FEEDBACK_BUFFER_TYPE = 3570;
pub const GL_FILL = 6914;
pub const GL_FLAT = 7424;
pub const GL_FLOAT = 5126;
pub const GL_FOG = 2912;
pub const GL_FOG_BIT = 128;
pub const GL_FOG_COLOR = 2918;
pub const GL_FOG_DENSITY = 2914;
pub const GL_FOG_END = 2916;
pub const GL_FOG_HINT = 3156;
pub const GL_FOG_INDEX = 2913;
pub const GL_FOG_MODE = 2917;
pub const GL_FOG_SPECULAR_TEXTURE_WIN = 33004;
pub const GL_FOG_START = 2915;
pub const GL_FRONT = 1028;
pub const GL_FRONT_AND_BACK = 1032;
pub const GL_FRONT_FACE = 2886;
pub const GL_FRONT_LEFT = 1024;
pub const GL_FRONT_RIGHT = 1025;
pub const GL_GEQUAL = 518;
pub const GL_GREATER = 516;
pub const GL_GREEN = 6404;
pub const GL_GREEN_BIAS = 3353;
pub const GL_GREEN_BITS = 3411;
pub const GL_GREEN_SCALE = 3352;
pub const GL_HINT_BIT = 32768;
pub const GL_INCR = 7682;
pub const GL_INDEX_ARRAY = 32887;
pub const GL_INDEX_ARRAY_COUNT_EXT = 32903;
pub const GL_INDEX_ARRAY_EXT = 32887;
pub const GL_INDEX_ARRAY_POINTER = 32913;
pub const GL_INDEX_ARRAY_POINTER_EXT = 32913;
pub const GL_INDEX_ARRAY_STRIDE = 32902;
pub const GL_INDEX_ARRAY_STRIDE_EXT = 32902;
pub const GL_INDEX_ARRAY_TYPE = 32901;
pub const GL_INDEX_ARRAY_TYPE_EXT = 32901;
pub const GL_INDEX_BITS = 3409;
pub const GL_INDEX_CLEAR_VALUE = 3104;
pub const GL_INDEX_LOGIC_OP = 3057;
pub const GL_INDEX_MODE = 3120;
pub const GL_INDEX_OFFSET = 3347;
pub const GL_INDEX_SHIFT = 3346;
pub const GL_INDEX_WRITEMASK = 3105;
pub const GL_INT = 5124;
pub const GL_INTENSITY = 32841;
pub const GL_INTENSITY12 = 32844;
pub const GL_INTENSITY16 = 32845;
pub const GL_INTENSITY4 = 32842;
pub const GL_INTENSITY8 = 32843;
pub const GL_INVERT = 5386;
pub const GL_KEEP = 7680;
pub const GL_LEFT = 1030;
pub const GL_LEQUAL = 515;
pub const GL_LESS = 513;
pub const GL_LIGHT0 = 16384;
pub const GL_LIGHT1 = 16385;
pub const GL_LIGHT2 = 16386;
pub const GL_LIGHT3 = 16387;
pub const GL_LIGHT4 = 16388;
pub const GL_LIGHT5 = 16389;
pub const GL_LIGHT6 = 16390;
pub const GL_LIGHT7 = 16391;
pub const GL_LIGHTING = 2896;
pub const GL_LIGHTING_BIT = 64;
pub const GL_LIGHT_MODEL_AMBIENT = 2899;
pub const GL_LIGHT_MODEL_LOCAL_VIEWER = 2897;
pub const GL_LIGHT_MODEL_TWO_SIDE = 2898;
pub const GL_LINE = 6913;
pub const GL_LINEAR = 9729;
pub const GL_LINEAR_ATTENUATION = 4616;
pub const GL_LINEAR_MIPMAP_LINEAR = 9987;
pub const GL_LINEAR_MIPMAP_NEAREST = 9985;
pub const GL_LINES = 1;
pub const GL_LINE_BIT = 4;
pub const GL_LINE_LOOP = 2;
pub const GL_LINE_RESET_TOKEN = 1799;
pub const GL_LINE_SMOOTH = 2848;
pub const GL_LINE_SMOOTH_HINT = 3154;
pub const GL_LINE_STIPPLE = 2852;
pub const GL_LINE_STIPPLE_PATTERN = 2853;
pub const GL_LINE_STIPPLE_REPEAT = 2854;
pub const GL_LINE_STRIP = 3;
pub const GL_LINE_TOKEN = 1794;
pub const GL_LINE_WIDTH = 2849;
pub const GL_LINE_WIDTH_GRANULARITY = 2851;
pub const GL_LINE_WIDTH_RANGE = 2850;
pub const GL_LIST_BASE = 2866;
pub const GL_LIST_BIT = 131072;
pub const GL_LIST_INDEX = 2867;
pub const GL_LIST_MODE = 2864;
pub const GL_LOAD = 257;
pub const GL_LOGIC_OP = GL_INDEX_LOGIC_OP;
pub const GL_LOGIC_OP_MODE = 3056;
pub const GL_LUMINANCE = 6409;
pub const GL_LUMINANCE12 = 32833;
pub const GL_LUMINANCE12_ALPHA12 = 32839;
pub const GL_LUMINANCE12_ALPHA4 = 32838;
pub const GL_LUMINANCE16 = 32834;
pub const GL_LUMINANCE16_ALPHA16 = 32840;
pub const GL_LUMINANCE4 = 32831;
pub const GL_LUMINANCE4_ALPHA4 = 32835;
pub const GL_LUMINANCE6_ALPHA2 = 32836;
pub const GL_LUMINANCE8 = 32832;
pub const GL_LUMINANCE8_ALPHA8 = 32837;
pub const GL_LUMINANCE_ALPHA = 6410;
pub const GL_MAP1_COLOR_4 = 3472;
pub const GL_MAP1_GRID_DOMAIN = 3536;
pub const GL_MAP1_GRID_SEGMENTS = 3537;
pub const GL_MAP1_INDEX = 3473;
pub const GL_MAP1_NORMAL = 3474;
pub const GL_MAP1_TEXTURE_COORD_1 = 3475;
pub const GL_MAP1_TEXTURE_COORD_2 = 3476;
pub const GL_MAP1_TEXTURE_COORD_3 = 3477;
pub const GL_MAP1_TEXTURE_COORD_4 = 3478;
pub const GL_MAP1_VERTEX_3 = 3479;
pub const GL_MAP1_VERTEX_4 = 3480;
pub const GL_MAP2_COLOR_4 = 3504;
pub const GL_MAP2_GRID_DOMAIN = 3538;
pub const GL_MAP2_GRID_SEGMENTS = 3539;
pub const GL_MAP2_INDEX = 3505;
pub const GL_MAP2_NORMAL = 3506;
pub const GL_MAP2_TEXTURE_COORD_1 = 3507;
pub const GL_MAP2_TEXTURE_COORD_2 = 3508;
pub const GL_MAP2_TEXTURE_COORD_3 = 3509;
pub const GL_MAP2_TEXTURE_COORD_4 = 3510;
pub const GL_MAP2_VERTEX_3 = 3511;
pub const GL_MAP2_VERTEX_4 = 3512;
pub const GL_MAP_COLOR = 3344;
pub const GL_MAP_STENCIL = 3345;
pub const GL_MATRIX_MODE = 2976;
pub const GL_MAX_ATTRIB_STACK_DEPTH = 3381;
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387;
pub const GL_MAX_CLIP_PLANES = 3378;
pub const GL_MAX_ELEMENTS_INDICES_WIN = 33001;
pub const GL_MAX_ELEMENTS_VERTICES_WIN = 33000;
pub const GL_MAX_EVAL_ORDER = 3376;
pub const GL_MAX_LIGHTS = 3377;
pub const GL_MAX_LIST_NESTING = 2865;
pub const GL_MAX_MODELVIEW_STACK_DEPTH = 3382;
pub const GL_MAX_NAME_STACK_DEPTH = 3383;
pub const GL_MAX_PIXEL_MAP_TABLE = 3380;
pub const GL_MAX_PROJECTION_STACK_DEPTH = 3384;
pub const GL_MAX_TEXTURE_SIZE = 3379;
pub const GL_MAX_TEXTURE_STACK_DEPTH = 3385;
pub const GL_MAX_VIEWPORT_DIMS = 3386;
pub const GL_MODELVIEW = 5888;
pub const GL_MODELVIEW_MATRIX = 2982;
pub const GL_MODELVIEW_STACK_DEPTH = 2979;
pub const GL_MODULATE = 8448;
pub const GL_MULT = 259;
pub const GL_N3F_V3F = 10789;
pub const GL_NAME_STACK_DEPTH = 3440;
pub const GL_NAND = 5390;
pub const GL_NEAREST = 9728;
pub const GL_NEAREST_MIPMAP_LINEAR = 9986;
pub const GL_NEAREST_MIPMAP_NEAREST = 9984;
pub const GL_NEVER = 512;
pub const GL_NICEST = 4354;
pub const GL_NONE = 0;
pub const GL_NOOP = 5381;
pub const GL_NOR = 5384;
pub const GL_NORMALIZE = 2977;
pub const GL_NORMAL_ARRAY = 32885;
pub const GL_NORMAL_ARRAY_COUNT_EXT = 32896;
pub const GL_NORMAL_ARRAY_EXT = 32885;
pub const GL_NORMAL_ARRAY_POINTER = 32911;
pub const GL_NORMAL_ARRAY_POINTER_EXT = 32911;
pub const GL_NORMAL_ARRAY_STRIDE = 32895;
pub const GL_NORMAL_ARRAY_STRIDE_EXT = 32895;
pub const GL_NORMAL_ARRAY_TYPE = 32894;
pub const GL_NORMAL_ARRAY_TYPE_EXT = 32894;
pub const GL_NOTEQUAL = 517;
pub const GL_OBJECT_LINEAR = 9217;
pub const GL_OBJECT_PLANE = 9473;
pub const GL_ONE = 1;
pub const GL_ONE_MINUS_DST_ALPHA = 773;
pub const GL_ONE_MINUS_DST_COLOR = 775;
pub const GL_ONE_MINUS_SRC_ALPHA = 771;
pub const GL_ONE_MINUS_SRC_COLOR = 769;
pub const GL_OR = 5383;
pub const GL_ORDER = 2561;
pub const GL_OR_INVERTED = 5389;
pub const GL_OR_REVERSE = 5387;
pub const GL_PACK_ALIGNMENT = 3333;
pub const GL_PACK_LSB_FIRST = 3329;
pub const GL_PACK_ROW_LENGTH = 3330;
pub const GL_PACK_SKIP_PIXELS = 3332;
pub const GL_PACK_SKIP_ROWS = 3331;
pub const GL_PACK_SWAP_BYTES = 3328;
pub const GL_PASS_THROUGH_TOKEN = 1792;
pub const GL_PERSPECTIVE_CORRECTION_HINT = 3152;
pub const GL_PHONG_HINT_WIN = 33003;
pub const GL_PHONG_WIN = 33002;
pub const GL_PIXEL_MAP_A_TO_A = 3193;
pub const GL_PIXEL_MAP_A_TO_A_SIZE = 3257;
pub const GL_PIXEL_MAP_B_TO_B = 3192;
pub const GL_PIXEL_MAP_B_TO_B_SIZE = 3256;
pub const GL_PIXEL_MAP_G_TO_G = 3191;
pub const GL_PIXEL_MAP_G_TO_G_SIZE = 3255;
pub const GL_PIXEL_MAP_I_TO_A = 3189;
pub const GL_PIXEL_MAP_I_TO_A_SIZE = 3253;
pub const GL_PIXEL_MAP_I_TO_B = 3188;
pub const GL_PIXEL_MAP_I_TO_B_SIZE = 3252;
pub const GL_PIXEL_MAP_I_TO_G = 3187;
pub const GL_PIXEL_MAP_I_TO_G_SIZE = 3251;
pub const GL_PIXEL_MAP_I_TO_I = 3184;
pub const GL_PIXEL_MAP_I_TO_I_SIZE = 3248;
pub const GL_PIXEL_MAP_I_TO_R = 3186;
pub const GL_PIXEL_MAP_I_TO_R_SIZE = 3250;
pub const GL_PIXEL_MAP_R_TO_R = 3190;
pub const GL_PIXEL_MAP_R_TO_R_SIZE = 3254;
pub const GL_PIXEL_MAP_S_TO_S = 3185;
pub const GL_PIXEL_MAP_S_TO_S_SIZE = 3249;
pub const GL_PIXEL_MODE_BIT = 32;
pub const GL_POINT = 6912;
pub const GL_POINTS = 0;
pub const GL_POINT_BIT = 2;
pub const GL_POINT_SIZE = 2833;
pub const GL_POINT_SIZE_GRANULARITY = 2835;
pub const GL_POINT_SIZE_RANGE = 2834;
pub const GL_POINT_SMOOTH = 2832;
pub const GL_POINT_SMOOTH_HINT = 3153;
pub const GL_POINT_TOKEN = 1793;
pub const GL_POLYGON = 9;
pub const GL_POLYGON_BIT = 8;
pub const GL_POLYGON_MODE = 2880;
pub const GL_POLYGON_OFFSET_FACTOR = 32824;
pub const GL_POLYGON_OFFSET_FILL = 32823;
pub const GL_POLYGON_OFFSET_LINE = 10754;
pub const GL_POLYGON_OFFSET_POINT = 10753;
pub const GL_POLYGON_OFFSET_UNITS = 10752;
pub const GL_POLYGON_SMOOTH = 2881;
pub const GL_POLYGON_SMOOTH_HINT = 3155;
pub const GL_POLYGON_STIPPLE = 2882;
pub const GL_POLYGON_STIPPLE_BIT = 16;
pub const GL_POLYGON_TOKEN = 1795;
pub const GL_POSITION = 4611;
pub const GL_PROJECTION = 5889;
pub const GL_PROJECTION_MATRIX = 2983;
pub const GL_PROJECTION_STACK_DEPTH = 2980;
pub const GL_PROXY_TEXTURE_1D = 32867;
pub const GL_PROXY_TEXTURE_2D = 32868;
pub const GL_Q = 8195;
pub const GL_QUADRATIC_ATTENUATION = 4617;
pub const GL_QUADS = 7;
pub const GL_QUAD_STRIP = 8;
pub const GL_R = 8194;
pub const GL_R3_G3_B2 = 10768;
pub const GL_READ_BUFFER = 3074;
pub const GL_RED = 6403;
pub const GL_RED_BIAS = 3349;
pub const GL_RED_BITS = 3410;
pub const GL_RED_SCALE = 3348;
pub const GL_RENDER = 7168;
pub const GL_RENDERER = 7937;
pub const GL_RENDER_MODE = 3136;
pub const GL_REPEAT = 10497;
pub const GL_REPLACE = 7681;
pub const GL_RETURN = 258;
pub const GL_RGB = 6407;
pub const GL_RGB10 = 32850;
pub const GL_RGB10_A2 = 32857;
pub const GL_RGB12 = 32851;
pub const GL_RGB16 = 32852;
pub const GL_RGB4 = 32847;
pub const GL_RGB5 = 32848;
pub const GL_RGB5_A1 = 32855;
pub const GL_RGB8 = 32849;
pub const GL_RGBA = 6408;
pub const GL_RGBA12 = 32858;
pub const GL_RGBA16 = 32859;
pub const GL_RGBA2 = 32853;
pub const GL_RGBA4 = 32854;
pub const GL_RGBA8 = 32856;
pub const GL_RGBA_MODE = 3121;
pub const GL_RIGHT = 1031;
pub const GL_S = 8192;
pub const GL_SCISSOR_BIT = 524288;
pub const GL_SCISSOR_BOX = 3088;
pub const GL_SCISSOR_TEST = 3089;
pub const GL_SELECT = 7170;
pub const GL_SELECTION_BUFFER_POINTER = 3571;
pub const GL_SELECTION_BUFFER_SIZE = 3572;
pub const GL_SET = 5391;
pub const GL_SHADE_MODEL = 2900;
pub const GL_SHININESS = 5633;
pub const GL_SHORT = 5122;
pub const GL_SMOOTH = 7425;
pub const GL_SPECULAR = 4610;
pub const GL_SPHERE_MAP = 9218;
pub const GL_SPOT_CUTOFF = 4614;
pub const GL_SPOT_DIRECTION = 4612;
pub const GL_SPOT_EXPONENT = 4613;
pub const GL_SRC_ALPHA = 770;
pub const GL_SRC_ALPHA_SATURATE = 776;
pub const GL_SRC_COLOR = 768;
pub const GL_STENCIL = 6146;
pub const GL_STENCIL_BITS = 3415;
pub const GL_STENCIL_BUFFER_BIT = 1024;
pub const GL_STENCIL_CLEAR_VALUE = 2961;
pub const GL_STENCIL_FAIL = 2964;
pub const GL_STENCIL_FUNC = 2962;
pub const GL_STENCIL_INDEX = 6401;
pub const GL_STENCIL_PASS_DEPTH_FAIL = 2965;
pub const GL_STENCIL_PASS_DEPTH_PASS = 2966;
pub const GL_STENCIL_REF = 2967;
pub const GL_STENCIL_TEST = 2960;
pub const GL_STENCIL_VALUE_MASK = 2963;
pub const GL_STENCIL_WRITEMASK = 2968;
pub const GL_STEREO = 3123;
pub const GL_SUBPIXEL_BITS = 3408;
pub const GL_T = 8193;
pub const GL_T2F_C3F_V3F = 10794;
pub const GL_T2F_C4F_N3F_V3F = 10796;
pub const GL_T2F_C4UB_V3F = 10793;
pub const GL_T2F_N3F_V3F = 10795;
pub const GL_T2F_V3F = 10791;
pub const GL_T4F_C4F_N3F_V4F = 10797;
pub const GL_T4F_V4F = 10792;
pub const GL_TEXTURE = 5890;
pub const GL_TEXTURE_1D = 3552;
pub const GL_TEXTURE_2D = 3553;
pub const GL_TEXTURE_ALPHA_SIZE = 32863;
pub const GL_TEXTURE_BINDING_1D = 32872;
pub const GL_TEXTURE_BINDING_2D = 32873;
pub const GL_TEXTURE_BIT = 262144;
pub const GL_TEXTURE_BLUE_SIZE = 32862;
pub const GL_TEXTURE_BORDER = 4101;
pub const GL_TEXTURE_BORDER_COLOR = 4100;
pub const GL_TEXTURE_COMPONENTS = GL_TEXTURE_INTERNAL_FORMAT;
pub const GL_TEXTURE_COORD_ARRAY = 32888;
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 32907;
pub const GL_TEXTURE_COORD_ARRAY_EXT = 32888;
pub const GL_TEXTURE_COORD_ARRAY_POINTER = 32914;
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 32914;
pub const GL_TEXTURE_COORD_ARRAY_SIZE = 32904;
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 32904;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE = 32906;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 32906;
pub const GL_TEXTURE_COORD_ARRAY_TYPE = 32905;
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 32905;
pub const GL_TEXTURE_ENV = 8960;
pub const GL_TEXTURE_ENV_COLOR = 8705;
pub const GL_TEXTURE_ENV_MODE = 8704;
pub const GL_TEXTURE_GEN_MODE = 9472;
pub const GL_TEXTURE_GEN_Q = 3171;
pub const GL_TEXTURE_GEN_R = 3170;
pub const GL_TEXTURE_GEN_S = 3168;
pub const GL_TEXTURE_GEN_T = 3169;
pub const GL_TEXTURE_GREEN_SIZE = 32861;
pub const GL_TEXTURE_HEIGHT = 4097;
pub const GL_TEXTURE_INTENSITY_SIZE = 32865;
pub const GL_TEXTURE_INTERNAL_FORMAT = 4099;
pub const GL_TEXTURE_LUMINANCE_SIZE = 32864;
pub const GL_TEXTURE_MAG_FILTER = 10240;
pub const GL_TEXTURE_MATRIX = 2984;
pub const GL_TEXTURE_MIN_FILTER = 10241;
pub const GL_TEXTURE_PRIORITY = 32870;
pub const GL_TEXTURE_RED_SIZE = 32860;
pub const GL_TEXTURE_RESIDENT = 32871;
pub const GL_TEXTURE_STACK_DEPTH = 2981;
pub const GL_TEXTURE_WIDTH = 4096;
pub const GL_TEXTURE_WRAP_S = 10242;
pub const GL_TEXTURE_WRAP_T = 10243;
pub const GL_TRANSFORM_BIT = 4096;
pub const GL_TRIANGLES = 4;
pub const GL_TRIANGLE_FAN = 6;
pub const GL_TRIANGLE_STRIP = 5;
pub const GL_TRUE = 1;
pub const GL_UNPACK_ALIGNMENT = 3317;
pub const GL_UNPACK_LSB_FIRST = 3313;
pub const GL_UNPACK_ROW_LENGTH = 3314;
pub const GL_UNPACK_SKIP_PIXELS = 3316;
pub const GL_UNPACK_SKIP_ROWS = 3315;
pub const GL_UNPACK_SWAP_BYTES = 3312;
pub const GL_UNSIGNED_BYTE = 5121;
pub const GL_UNSIGNED_INT = 5125;
pub const GL_UNSIGNED_SHORT = 5123;
pub const GL_V2F = 10784;
pub const GL_V3F = 10785;
pub const GL_VENDOR = 7936;
pub const GL_VERSION = 7938;
pub const GL_VERSION_1_1 = 1;
pub const GL_VERTEX_ARRAY = 32884;
pub const GL_VERTEX_ARRAY_COUNT_EXT = 32893;
pub const GL_VERTEX_ARRAY_EXT = 32884;
pub const GL_VERTEX_ARRAY_POINTER = 32910;
pub const GL_VERTEX_ARRAY_POINTER_EXT = 32910;
pub const GL_VERTEX_ARRAY_SIZE = 32890;
pub const GL_VERTEX_ARRAY_SIZE_EXT = 32890;
pub const GL_VERTEX_ARRAY_STRIDE = 32892;
pub const GL_VERTEX_ARRAY_STRIDE_EXT = 32892;
pub const GL_VERTEX_ARRAY_TYPE = 32891;
pub const GL_VERTEX_ARRAY_TYPE_EXT = 32891;
pub const GL_VIEWPORT = 2978;
pub const GL_VIEWPORT_BIT = 2048;
pub const GL_WIN_draw_range_elements = 1;
pub const GL_WIN_swap_hint = 1;
pub const GL_XOR = 5382;
pub const GL_ZERO = 0;
pub const GL_ZOOM_X = 3350;
pub const GL_ZOOM_Y = 3351;
pub const WGL_3DFX_multisample = 1;
pub const WGL_3DL_stereo_control = 1;
pub const WGL_ACCELERATION_ARB = 8195;
pub const WGL_ACCELERATION_EXT = 8195;
pub const WGL_ACCESS_READ_ONLY_NV = 0;
pub const WGL_ACCESS_READ_WRITE_NV = 1;
pub const WGL_ACCESS_WRITE_DISCARD_NV = 2;
pub const WGL_ACCUM_ALPHA_BITS_ARB = 8225;
pub const WGL_ACCUM_ALPHA_BITS_EXT = 8225;
pub const WGL_ACCUM_BITS_ARB = 8221;
pub const WGL_ACCUM_BITS_EXT = 8221;
pub const WGL_ACCUM_BLUE_BITS_ARB = 8224;
pub const WGL_ACCUM_BLUE_BITS_EXT = 8224;
pub const WGL_ACCUM_GREEN_BITS_ARB = 8223;
pub const WGL_ACCUM_GREEN_BITS_EXT = 8223;
pub const WGL_ACCUM_RED_BITS_ARB = 8222;
pub const WGL_ACCUM_RED_BITS_EXT = 8222;
pub const WGL_ALPHA_BITS_ARB = 8219;
pub const WGL_ALPHA_BITS_EXT = 8219;
pub const WGL_ALPHA_SHIFT_ARB = 8220;
pub const WGL_ALPHA_SHIFT_EXT = 8220;
pub const WGL_AMD_gpu_association = 1;
pub const WGL_ARB_buffer_region = 1;
pub const WGL_ARB_context_flush_control = 1;
pub const WGL_ARB_create_context = 1;
pub const WGL_ARB_create_context_no_error = 1;
pub const WGL_ARB_create_context_profile = 1;
pub const WGL_ARB_create_context_robustness = 1;
pub const WGL_ARB_extensions_string = 1;
pub const WGL_ARB_framebuffer_sRGB = 1;
pub const WGL_ARB_make_current_read = 1;
pub const WGL_ARB_multisample = 1;
pub const WGL_ARB_pbuffer = 1;
pub const WGL_ARB_pixel_format = 1;
pub const WGL_ARB_pixel_format_float = 1;
pub const WGL_ARB_render_texture = 1;
pub const WGL_ARB_robustness_application_isolation = 1;
pub const WGL_ARB_robustness_share_group_isolation = 1;
pub const WGL_ATI_pixel_format_float = 1;
pub const WGL_AUX0_ARB = 8327;
pub const WGL_AUX1_ARB = 8328;
pub const WGL_AUX2_ARB = 8329;
pub const WGL_AUX3_ARB = 8330;
pub const WGL_AUX4_ARB = 8331;
pub const WGL_AUX5_ARB = 8332;
pub const WGL_AUX6_ARB = 8333;
pub const WGL_AUX7_ARB = 8334;
pub const WGL_AUX8_ARB = 8335;
pub const WGL_AUX9_ARB = 8336;
pub const WGL_AUX_BUFFERS_ARB = 8228;
pub const WGL_AUX_BUFFERS_EXT = 8228;
pub const WGL_BACK_COLOR_BUFFER_BIT_ARB = 2;
pub const WGL_BACK_LEFT_ARB = 8325;
pub const WGL_BACK_RIGHT_ARB = 8326;
pub const WGL_BIND_TO_TEXTURE_DEPTH_NV = 8355;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV = 8356;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV = 8372;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV = 8371;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV = 8370;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV = 8369;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV = 8353;
pub const WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV = 8352;
pub const WGL_BIND_TO_TEXTURE_RGBA_ARB = 8305;
pub const WGL_BIND_TO_TEXTURE_RGB_ARB = 8304;
pub const WGL_BIND_TO_VIDEO_RGBA_NV = 8385;
pub const WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV = 8386;
pub const WGL_BIND_TO_VIDEO_RGB_NV = 8384;
pub const WGL_BLUE_BITS_ARB = 8217;
pub const WGL_BLUE_BITS_EXT = 8217;
pub const WGL_BLUE_SHIFT_ARB = 8218;
pub const WGL_BLUE_SHIFT_EXT = 8218;
pub const WGL_COLORSPACE_EXT = 12423;
pub const WGL_COLORSPACE_LINEAR_EXT = 12426;
pub const WGL_COLORSPACE_SRGB_EXT = 12425;
pub const WGL_COLOR_BITS_ARB = 8212;
pub const WGL_COLOR_BITS_EXT = 8212;
pub const WGL_COLOR_SAMPLES_NV = 8377;
pub const WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB = 2;
pub const WGL_CONTEXT_CORE_PROFILE_BIT_ARB = 1;
pub const WGL_CONTEXT_DEBUG_BIT_ARB = 1;
pub const WGL_CONTEXT_ES2_PROFILE_BIT_EXT = 4;
pub const WGL_CONTEXT_ES_PROFILE_BIT_EXT = 4;
pub const WGL_CONTEXT_FLAGS_ARB = 8340;
pub const WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB = 2;
pub const WGL_CONTEXT_LAYER_PLANE_ARB = 8339;
pub const WGL_CONTEXT_MAJOR_VERSION_ARB = 8337;
pub const WGL_CONTEXT_MINOR_VERSION_ARB = 8338;
pub const WGL_CONTEXT_OPENGL_NO_ERROR_ARB = 12723;
pub const WGL_CONTEXT_PROFILE_MASK_ARB = 37158;
pub const WGL_CONTEXT_RELEASE_BEHAVIOR_ARB = 8343;
pub const WGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB = 8344;
pub const WGL_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB = 0;
pub const WGL_CONTEXT_RESET_ISOLATION_BIT_ARB = 8;
pub const WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB = 33366;
pub const WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB = 4;
pub const WGL_COVERAGE_SAMPLES_NV = 8258;
pub const WGL_CUBE_MAP_FACE_ARB = 8316;
pub const WGL_DEPTH_BITS_ARB = 8226;
pub const WGL_DEPTH_BITS_EXT = 8226;
pub const WGL_DEPTH_BUFFER_BIT_ARB = 4;
pub const WGL_DEPTH_COMPONENT_NV = 8359;
pub const WGL_DEPTH_FLOAT_EXT = 8256;
pub const WGL_DEPTH_TEXTURE_FORMAT_NV = 8357;
pub const WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D = 8272;
pub const WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D = 8273;
pub const WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D = 8274;
pub const WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D = 8275;
pub const WGL_DOUBLE_BUFFER_ARB = 8209;
pub const WGL_DOUBLE_BUFFER_EXT = 8209;
pub const WGL_DRAW_TO_BITMAP_ARB = 8194;
pub const WGL_DRAW_TO_BITMAP_EXT = 8194;
pub const WGL_DRAW_TO_PBUFFER_ARB = 8237;
pub const WGL_DRAW_TO_PBUFFER_EXT = 8237;
pub const WGL_DRAW_TO_WINDOW_ARB = 8193;
pub const WGL_DRAW_TO_WINDOW_EXT = 8193;
pub const WGL_EXT_colorspace = 1;
pub const WGL_EXT_create_context_es2_profile = 1;
pub const WGL_EXT_create_context_es_profile = 1;
pub const WGL_EXT_depth_float = 1;
pub const WGL_EXT_display_color_table = 1;
pub const WGL_EXT_extensions_string = 1;
pub const WGL_EXT_framebuffer_sRGB = 1;
pub const WGL_EXT_make_current_read = 1;
pub const WGL_EXT_multisample = 1;
pub const WGL_EXT_pbuffer = 1;
pub const WGL_EXT_pixel_format = 1;
pub const WGL_EXT_pixel_format_packed_float = 1;
pub const WGL_EXT_swap_control = 1;
pub const WGL_EXT_swap_control_tear = 1;
pub const WGL_FLOAT_COMPONENTS_NV = 8368;
pub const WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB = 8361;
pub const WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 8361;
pub const WGL_FRONT_COLOR_BUFFER_BIT_ARB = 1;
pub const WGL_FRONT_LEFT_ARB = 8323;
pub const WGL_FRONT_RIGHT_ARB = 8324;
pub const WGL_FULL_ACCELERATION_ARB = 8231;
pub const WGL_FULL_ACCELERATION_EXT = 8231;
pub const WGL_GAMMA_EXCLUDE_DESKTOP_I3D = 8271;
pub const WGL_GAMMA_TABLE_SIZE_I3D = 8270;
pub const WGL_GENERIC_ACCELERATION_ARB = 8230;
pub const WGL_GENERIC_ACCELERATION_EXT = 8230;
pub const WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D = 8265;
pub const WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D = 8264;
pub const WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D = 8268;
pub const WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D = 8266;
pub const WGL_GENLOCK_SOURCE_EDGE_RISING_I3D = 8267;
pub const WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D = 8262;
pub const WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D = 8261;
pub const WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D = 8263;
pub const WGL_GENLOCK_SOURCE_MULTIVIEW_I3D = 8260;
pub const WGL_GPU_CLOCK_AMD = 8612;
pub const WGL_GPU_FASTEST_TARGET_GPUS_AMD = 8610;
pub const WGL_GPU_NUM_PIPES_AMD = 8613;
pub const WGL_GPU_NUM_RB_AMD = 8615;
pub const WGL_GPU_NUM_SIMD_AMD = 8614;
pub const WGL_GPU_NUM_SPI_AMD = 8616;
pub const WGL_GPU_OPENGL_VERSION_STRING_AMD = 7938;
pub const WGL_GPU_RAM_AMD = 8611;
pub const WGL_GPU_RENDERER_STRING_AMD = 7937;
pub const WGL_GPU_VENDOR_AMD = 7936;
pub const WGL_GREEN_BITS_ARB = 8215;
pub const WGL_GREEN_BITS_EXT = 8215;
pub const WGL_GREEN_SHIFT_ARB = 8216;
pub const WGL_GREEN_SHIFT_EXT = 8216;
pub const WGL_I3D_digital_video_control = 1;
pub const WGL_I3D_gamma = 1;
pub const WGL_I3D_genlock = 1;
pub const WGL_I3D_image_buffer = 1;
pub const WGL_I3D_swap_frame_lock = 1;
pub const WGL_I3D_swap_frame_usage = 1;
pub const WGL_IMAGE_BUFFER_LOCK_I3D = 2;
pub const WGL_IMAGE_BUFFER_MIN_ACCESS_I3D = 1;
pub const WGL_LOSE_CONTEXT_ON_RESET_ARB = 33362;
pub const WGL_MAX_PBUFFER_HEIGHT_ARB = 8240;
pub const WGL_MAX_PBUFFER_HEIGHT_EXT = 8240;
pub const WGL_MAX_PBUFFER_PIXELS_ARB = 8238;
pub const WGL_MAX_PBUFFER_PIXELS_EXT = 8238;
pub const WGL_MAX_PBUFFER_WIDTH_ARB = 8239;
pub const WGL_MAX_PBUFFER_WIDTH_EXT = 8239;
pub const WGL_MIPMAP_LEVEL_ARB = 8315;
pub const WGL_MIPMAP_TEXTURE_ARB = 8308;
pub const WGL_NEED_PALETTE_ARB = 8196;
pub const WGL_NEED_PALETTE_EXT = 8196;
pub const WGL_NEED_SYSTEM_PALETTE_ARB = 8197;
pub const WGL_NEED_SYSTEM_PALETTE_EXT = 8197;
pub const WGL_NO_ACCELERATION_ARB = 8229;
pub const WGL_NO_ACCELERATION_EXT = 8229;
pub const WGL_NO_RESET_NOTIFICATION_ARB = 33377;
pub const WGL_NO_TEXTURE_ARB = 8311;
pub const WGL_NUMBER_OVERLAYS_ARB = 8200;
pub const WGL_NUMBER_OVERLAYS_EXT = 8200;
pub const WGL_NUMBER_PIXEL_FORMATS_ARB = 8192;
pub const WGL_NUMBER_PIXEL_FORMATS_EXT = 8192;
pub const WGL_NUMBER_UNDERLAYS_ARB = 8201;
pub const WGL_NUMBER_UNDERLAYS_EXT = 8201;
pub const WGL_NUM_VIDEO_CAPTURE_SLOTS_NV = 8399;
pub const WGL_NUM_VIDEO_SLOTS_NV = 8432;
pub const WGL_NV_copy_image = 1;
pub const WGL_NV_delay_before_swap = 1;
pub const WGL_NV_DX_interop = 1;
pub const WGL_NV_DX_interop2 = 1;
pub const WGL_NV_float_buffer = 1;
pub const WGL_NV_gpu_affinity = 1;
pub const WGL_NV_multisample_coverage = 1;
pub const WGL_NV_present_video = 1;
pub const WGL_NV_render_depth_texture = 1;
pub const WGL_NV_render_texture_rectangle = 1;
pub const WGL_NV_swap_group = 1;
pub const WGL_NV_vertex_array_range = 1;
pub const WGL_NV_video_capture = 1;
pub const WGL_NV_video_output = 1;
pub const WGL_OML_sync_control = 1;
pub const WGL_OPTIMAL_PBUFFER_HEIGHT_EXT = 8242;
pub const WGL_OPTIMAL_PBUFFER_WIDTH_EXT = 8241;
pub const WGL_PBUFFER_HEIGHT_ARB = 8245;
pub const WGL_PBUFFER_HEIGHT_EXT = 8245;
pub const WGL_PBUFFER_LARGEST_ARB = 8243;
pub const WGL_PBUFFER_LARGEST_EXT = 8243;
pub const WGL_PBUFFER_LOST_ARB = 8246;
pub const WGL_PBUFFER_WIDTH_ARB = 8244;
pub const WGL_PBUFFER_WIDTH_EXT = 8244;
pub const WGL_PIXEL_TYPE_ARB = 8211;
pub const WGL_PIXEL_TYPE_EXT = 8211;
pub const WGL_RED_BITS_ARB = 8213;
pub const WGL_RED_BITS_EXT = 8213;
pub const WGL_RED_SHIFT_ARB = 8214;
pub const WGL_RED_SHIFT_EXT = 8214;
pub const WGL_SAMPLES_3DFX = 8289;
pub const WGL_SAMPLES_ARB = 8258;
pub const WGL_SAMPLES_EXT = 8258;
pub const WGL_SAMPLE_BUFFERS_3DFX = 8288;
pub const WGL_SAMPLE_BUFFERS_ARB = 8257;
pub const WGL_SAMPLE_BUFFERS_EXT = 8257;
pub const WGL_SHARE_ACCUM_ARB = 8206;
pub const WGL_SHARE_ACCUM_EXT = 8206;
pub const WGL_SHARE_DEPTH_ARB = 8204;
pub const WGL_SHARE_DEPTH_EXT = 8204;
pub const WGL_SHARE_STENCIL_ARB = 8205;
pub const WGL_SHARE_STENCIL_EXT = 8205;
pub const WGL_STENCIL_BITS_ARB = 8227;
pub const WGL_STENCIL_BITS_EXT = 8227;
pub const WGL_STENCIL_BUFFER_BIT_ARB = 8;
pub const WGL_STEREO_ARB = 8210;
pub const WGL_STEREO_EMITTER_DISABLE_3DL = 8278;
pub const WGL_STEREO_EMITTER_ENABLE_3DL = 8277;
pub const WGL_STEREO_EXT = 8210;
pub const WGL_STEREO_POLARITY_INVERT_3DL = 8280;
pub const WGL_STEREO_POLARITY_NORMAL_3DL = 8279;
pub const WGL_SUPPORT_GDI_ARB = 8207;
pub const WGL_SUPPORT_GDI_EXT = 8207;
pub const WGL_SUPPORT_OPENGL_ARB = 8208;
pub const WGL_SUPPORT_OPENGL_EXT = 8208;
pub const WGL_SWAP_COPY_ARB = 8233;
pub const WGL_SWAP_COPY_EXT = 8233;
pub const WGL_SWAP_EXCHANGE_ARB = 8232;
pub const WGL_SWAP_EXCHANGE_EXT = 8232;
pub const WGL_SWAP_LAYER_BUFFERS_ARB = 8198;
pub const WGL_SWAP_LAYER_BUFFERS_EXT = 8198;
pub const WGL_SWAP_METHOD_ARB = 8199;
pub const WGL_SWAP_METHOD_EXT = 8199;
pub const WGL_SWAP_UNDEFINED_ARB = 8234;
pub const WGL_SWAP_UNDEFINED_EXT = 8234;
pub const WGL_TEXTURE_1D_ARB = 8313;
pub const WGL_TEXTURE_2D_ARB = 8314;
pub const WGL_TEXTURE_CUBE_MAP_ARB = 8312;
pub const WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 8318;
pub const WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 8320;
pub const WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 8322;
pub const WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 8317;
pub const WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 8319;
pub const WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 8321;
pub const WGL_TEXTURE_DEPTH_COMPONENT_NV = 8358;
pub const WGL_TEXTURE_FLOAT_RGBA_NV = 8376;
pub const WGL_TEXTURE_FLOAT_RGB_NV = 8375;
pub const WGL_TEXTURE_FLOAT_RG_NV = 8374;
pub const WGL_TEXTURE_FLOAT_R_NV = 8373;
pub const WGL_TEXTURE_FORMAT_ARB = 8306;
pub const WGL_TEXTURE_RECTANGLE_NV = 8354;
pub const WGL_TEXTURE_RGBA_ARB = 8310;
pub const WGL_TEXTURE_RGB_ARB = 8309;
pub const WGL_TEXTURE_TARGET_ARB = 8307;
pub const WGL_TRANSPARENT_ALPHA_VALUE_ARB = 8250;
pub const WGL_TRANSPARENT_ARB = 8202;
pub const WGL_TRANSPARENT_BLUE_VALUE_ARB = 8249;
pub const WGL_TRANSPARENT_EXT = 8202;
pub const WGL_TRANSPARENT_GREEN_VALUE_ARB = 8248;
pub const WGL_TRANSPARENT_INDEX_VALUE_ARB = 8251;
pub const WGL_TRANSPARENT_RED_VALUE_ARB = 8247;
pub const WGL_TRANSPARENT_VALUE_EXT = 8203;
pub const WGL_TYPE_COLORINDEX_ARB = 8236;
pub const WGL_TYPE_COLORINDEX_EXT = 8236;
pub const WGL_TYPE_RGBA_ARB = 8235;
pub const WGL_TYPE_RGBA_EXT = 8235;
pub const WGL_TYPE_RGBA_FLOAT_ARB = 8608;
pub const WGL_TYPE_RGBA_FLOAT_ATI = 8608;
pub const WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT = 8360;
pub const WGL_UNIQUE_ID_NV = 8398;
pub const WGL_VIDEO_OUT_ALPHA_NV = 8388;
pub const WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV = 8390;
pub const WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV = 8391;
pub const WGL_VIDEO_OUT_COLOR_NV = 8387;
pub const WGL_VIDEO_OUT_DEPTH_NV = 8389;
pub const WGL_VIDEO_OUT_FIELD_1 = 8393;
pub const WGL_VIDEO_OUT_FIELD_2 = 8394;
pub const WGL_VIDEO_OUT_FRAME = 8392;
pub const WGL_VIDEO_OUT_STACKED_FIELDS_1_2 = 8395;
pub const WGL_VIDEO_OUT_STACKED_FIELDS_2_1 = 8396;
pub const WGL_WGLEXT_VERSION = 20180213;

pub const GLbitfield = c_uint;
pub const GLboolean = u8;
pub const GLbyte = i8;
pub const GLclampd = f64;
pub const GLclampf = f32;
pub const GLdouble = f64;
pub const GLenum = c_uint;
pub const GLfloat = f32;
pub const GLint = c_int;
pub const GLshort = c_short;
pub const GLsizei = c_int;
pub const GLubyte = u8;
pub const GLuint = c_uint;
pub const GLushort = c_ushort;
pub const GLvoid = anyopaque;

pub const HGPUNV = ?*opaque {};
pub const HPBUFFERARB = ?*opaque {};
pub const HPBUFFEREXT = ?*opaque {};
pub const HPVIDEODEV = ?*opaque {};
pub const HVIDEOINPUTDEVICENV = ?*opaque {};
pub const HVIDEOOUTPUTDEVICENV = ?*opaque {};

pub const GPU_DEVICE = extern struct {
    cb: DWORD,
    DeviceName: [32]CHAR,
    DeviceString: [128]CHAR,
    Flags: DWORD,
    rcVirtualScreen: RECT,
};
pub const PGPU_DEVICE = ?*GPU_DEVICE;

pub const PFNGLADDSWAPHINTRECTWINPROC = ?fn (GLint, GLint, GLsizei, GLsizei) callconv(WINAPI) void;
pub const PFNGLARRAYELEMENTARRAYEXTPROC = ?fn (GLenum, GLsizei, ?*const GLvoid) callconv(WINAPI) void;
pub const PFNGLARRAYELEMENTEXTPROC = ?fn (GLint) callconv(WINAPI) void;
pub const PFNGLCOLORPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const GLvoid) callconv(WINAPI) void;
pub const PFNGLCOLORSUBTABLEEXTPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const GLvoid) callconv(WINAPI) void;
pub const PFNGLCOLORTABLEEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const GLvoid) callconv(WINAPI) void;
pub const PFNGLDRAWARRAYSEXTPROC = ?fn (GLenum, GLint, GLsizei) callconv(WINAPI) void;
pub const PFNGLDRAWRANGEELEMENTSWINPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const GLvoid) callconv(WINAPI) void;
pub const PFNGLEDGEFLAGPOINTEREXTPROC = ?fn (GLsizei, GLsizei, ?*const GLboolean) callconv(WINAPI) void;
pub const PFNGLGETCOLORTABLEEXTPROC = ?fn (GLenum, GLenum, GLenum, ?*GLvoid) callconv(WINAPI) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, ?*GLfloat) callconv(WINAPI) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, ?*GLint) callconv(WINAPI) void;
pub const PFNGLGETPOINTERVEXTPROC = ?fn (GLenum, ?*(?*GLvoid)) callconv(WINAPI) void;
pub const PFNGLINDEXPOINTEREXTPROC = ?fn (GLenum, GLsizei, GLsizei, ?*const GLvoid) callconv(WINAPI) void;
pub const PFNGLNORMALPOINTEREXTPROC = ?fn (GLenum, GLsizei, GLsizei, ?*const GLvoid) callconv(WINAPI) void;
pub const PFNGLTEXCOORDPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const GLvoid) callconv(WINAPI) void;
pub const PFNGLVERTEXPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const GLvoid) callconv(WINAPI) void;
pub const PFNWGLALLOCATEMEMORYNVPROC = ?fn (GLsizei, GLfloat, GLfloat, GLfloat) callconv(WINAPI) ?*anyopaque;
pub const PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC = ?fn (HDC, ?*const HANDLE, ?*const LPVOID, ?*const DWORD, UINT) callconv(WINAPI) BOOL;
pub const PFNWGLBEGINFRAMETRACKINGI3DPROC = ?fn () callconv(WINAPI) BOOL;
pub const PFNWGLBINDDISPLAYCOLORTABLEEXTPROC = ?fn (GLushort) callconv(WINAPI) GLboolean;
pub const PFNWGLBINDSWAPBARRIERNVPROC = ?fn (GLuint, GLuint) callconv(WINAPI) BOOL;
pub const PFNWGLBINDTEXIMAGEARBPROC = ?fn (HPBUFFERARB, c_int) callconv(WINAPI) BOOL;
pub const PFNWGLBINDVIDEOCAPTUREDEVICENVPROC = ?fn (UINT, HVIDEOINPUTDEVICENV) callconv(WINAPI) BOOL;
pub const PFNWGLBINDVIDEODEVICENVPROC = ?fn (HDC, c_uint, HVIDEOOUTPUTDEVICENV, ?*const c_int) callconv(WINAPI) BOOL;
pub const PFNWGLBINDVIDEOIMAGENVPROC = ?fn (HPVIDEODEV, HPBUFFERARB, c_int) callconv(WINAPI) BOOL;
pub const PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC = ?fn (HGLRC, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(WINAPI) VOID;
pub const PFNWGLCHOOSEPIXELFORMATARBPROC = ?fn (HDC, ?*const c_int, ?*const FLOAT, UINT, ?*c_int, ?*UINT) callconv(WINAPI) BOOL;
pub const PFNWGLCHOOSEPIXELFORMATEXTPROC = ?fn (HDC, ?*const c_int, ?*const FLOAT, UINT, ?*c_int, ?*UINT) callconv(WINAPI) BOOL;
pub const PFNWGLCOPYIMAGESUBDATANVPROC = ?fn (HGLRC, GLuint, GLenum, GLint, GLint, GLint, GLint, HGLRC, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(WINAPI) BOOL;
pub const PFNWGLCREATEAFFINITYDCNVPROC = ?fn (?*const HGPUNV) callconv(WINAPI) HDC;
pub const PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC = ?fn (UINT) callconv(WINAPI) HGLRC;
pub const PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC = ?fn (UINT, HGLRC, ?*const c_int) callconv(WINAPI) HGLRC;
pub const PFNWGLCREATEBUFFERREGIONARBPROC = ?fn (HDC, c_int, UINT) callconv(WINAPI) HANDLE;
pub const PFNWGLCREATECONTEXTATTRIBSARBPROC = ?fn (HDC, HGLRC, ?*const c_int) callconv(WINAPI) HGLRC;
pub const PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC = ?fn (GLushort) callconv(WINAPI) GLboolean;
pub const PFNWGLCREATEIMAGEBUFFERI3DPROC = ?fn (HDC, DWORD, UINT) callconv(WINAPI) LPVOID;
pub const PFNWGLCREATEPBUFFERARBPROC = ?fn (HDC, c_int, c_int, c_int, ?*const c_int) callconv(WINAPI) HPBUFFERARB;
pub const PFNWGLCREATEPBUFFEREXTPROC = ?fn (HDC, c_int, c_int, c_int, ?*const c_int) callconv(WINAPI) HPBUFFEREXT;
pub const PFNWGLDELAYBEFORESWAPNVPROC = ?fn (HDC, GLfloat) callconv(WINAPI) BOOL;
pub const PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC = ?fn (HGLRC) callconv(WINAPI) BOOL;
pub const PFNWGLDELETEBUFFERREGIONARBPROC = ?fn (HANDLE) callconv(WINAPI) VOID;
pub const PFNWGLDELETEDCNVPROC = ?fn (HDC) callconv(WINAPI) BOOL;
pub const PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC = ?fn (GLushort) callconv(WINAPI) VOID;
pub const PFNWGLDESTROYIMAGEBUFFERI3DPROC = ?fn (HDC, LPVOID) callconv(WINAPI) BOOL;
pub const PFNWGLDESTROYPBUFFERARBPROC = ?fn (HPBUFFERARB) callconv(WINAPI) BOOL;
pub const PFNWGLDESTROYPBUFFEREXTPROC = ?fn (HPBUFFEREXT) callconv(WINAPI) BOOL;
pub const PFNWGLDISABLEFRAMELOCKI3DPROC = ?fn () callconv(WINAPI) BOOL;
pub const PFNWGLDISABLEGENLOCKI3DPROC = ?fn (HDC) callconv(WINAPI) BOOL;
pub const PFNWGLDXCLOSEDEVICENVPROC = ?fn (HANDLE) callconv(WINAPI) BOOL;
pub const PFNWGLDXLOCKOBJECTSNVPROC = ?fn (HANDLE, GLint, ?*HANDLE) callconv(WINAPI) BOOL;
pub const PFNWGLDXOBJECTACCESSNVPROC = ?fn (HANDLE, GLenum) callconv(WINAPI) BOOL;
pub const PFNWGLDXOPENDEVICENVPROC = ?fn (?*anyopaque) callconv(WINAPI) HANDLE;
pub const PFNWGLDXREGISTEROBJECTNVPROC = ?fn (HANDLE, ?*anyopaque, GLuint, GLenum, GLenum) callconv(WINAPI) HANDLE;
pub const PFNWGLDXSETRESOURCESHAREHANDLENVPROC = ?fn (?*anyopaque, HANDLE) callconv(WINAPI) BOOL;
pub const PFNWGLDXUNLOCKOBJECTSNVPROC = ?fn (HANDLE, GLint, ?*HANDLE) callconv(WINAPI) BOOL;
pub const PFNWGLDXUNREGISTEROBJECTNVPROC = ?fn (HANDLE, HANDLE) callconv(WINAPI) BOOL;
pub const PFNWGLENABLEFRAMELOCKI3DPROC = ?fn () callconv(WINAPI) BOOL;
pub const PFNWGLENABLEGENLOCKI3DPROC = ?fn (HDC) callconv(WINAPI) BOOL;
pub const PFNWGLENDFRAMETRACKINGI3DPROC = ?fn () callconv(WINAPI) BOOL;
pub const PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC = ?fn (HDC, ?*HVIDEOINPUTDEVICENV) callconv(WINAPI) UINT;
pub const PFNWGLENUMERATEVIDEODEVICESNVPROC = ?fn (HDC, ?*HVIDEOOUTPUTDEVICENV) callconv(WINAPI) c_int;
pub const PFNWGLENUMGPUDEVICESNVPROC = ?fn (HGPUNV, UINT, PGPU_DEVICE) callconv(WINAPI) BOOL;
pub const PFNWGLENUMGPUSFROMAFFINITYDCNVPROC = ?fn (HDC, UINT, ?*HGPUNV) callconv(WINAPI) BOOL;
pub const PFNWGLENUMGPUSNVPROC = ?fn (UINT, ?*HGPUNV) callconv(WINAPI) BOOL;
pub const PFNWGLFREEMEMORYNVPROC = ?fn (?*anyopaque) callconv(WINAPI) void;
pub const PFNWGLGENLOCKSAMPLERATEI3DPROC = ?fn (HDC, UINT) callconv(WINAPI) BOOL;
pub const PFNWGLGENLOCKSOURCEDELAYI3DPROC = ?fn (HDC, UINT) callconv(WINAPI) BOOL;
pub const PFNWGLGENLOCKSOURCEEDGEI3DPROC = ?fn (HDC, UINT) callconv(WINAPI) BOOL;
pub const PFNWGLGENLOCKSOURCEI3DPROC = ?fn (HDC, UINT) callconv(WINAPI) BOOL;
pub const PFNWGLGETCONTEXTGPUIDAMDPROC = ?fn (HGLRC) callconv(WINAPI) UINT;
pub const PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC = ?fn () callconv(WINAPI) HGLRC;
pub const PFNWGLGETCURRENTREADDCARBPROC = ?fn () callconv(WINAPI) HDC;
pub const PFNWGLGETCURRENTREADDCEXTPROC = ?fn () callconv(WINAPI) HDC;
pub const PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC = ?fn (HDC, c_int, ?*c_int) callconv(WINAPI) BOOL;
pub const PFNWGLGETEXTENSIONSSTRINGARBPROC = ?fn (HDC) ?[*]const u8;
pub const PFNWGLGETEXTENSIONSSTRINGEXTPROC = ?fn () ?[*]const u8;
pub const PFNWGLGETFRAMEUSAGEI3DPROC = ?fn (?*f32) callconv(WINAPI) BOOL;
pub const PFNWGLGETGAMMATABLEI3DPROC = ?fn (HDC, c_int, ?*USHORT, ?*USHORT, ?*USHORT) callconv(WINAPI) BOOL;
pub const PFNWGLGETGAMMATABLEPARAMETERSI3DPROC = ?fn (HDC, c_int, ?*c_int) callconv(WINAPI) BOOL;
pub const PFNWGLGETGENLOCKSAMPLERATEI3DPROC = ?fn (HDC, ?*UINT) callconv(WINAPI) BOOL;
pub const PFNWGLGETGENLOCKSOURCEDELAYI3DPROC = ?fn (HDC, ?*UINT) callconv(WINAPI) BOOL;
pub const PFNWGLGETGENLOCKSOURCEEDGEI3DPROC = ?fn (HDC, ?*UINT) callconv(WINAPI) BOOL;
pub const PFNWGLGETGENLOCKSOURCEI3DPROC = ?fn (HDC, ?*UINT) callconv(WINAPI) BOOL;
pub const PFNWGLGETGPUIDSAMDPROC = ?fn (UINT, ?*UINT) callconv(WINAPI) UINT;
pub const PFNWGLGETGPUINFOAMDPROC = ?fn (UINT, c_int, GLenum, UINT, ?*anyopaque) callconv(WINAPI) INT;
pub const PFNWGLGETMSCRATEOMLPROC = ?fn (HDC, ?*INT32, ?*INT32) callconv(WINAPI) BOOL;
pub const PFNWGLGETPBUFFERDCARBPROC = ?fn (HPBUFFERARB) callconv(WINAPI) HDC;
pub const PFNWGLGETPBUFFERDCEXTPROC = ?fn (HPBUFFEREXT) callconv(WINAPI) HDC;
pub const PFNWGLGETPIXELFORMATATTRIBFVARBPROC = ?fn (HDC, c_int, c_int, UINT, ?*const c_int, ?*FLOAT) callconv(WINAPI) BOOL;
pub const PFNWGLGETPIXELFORMATATTRIBFVEXTPROC = ?fn (HDC, c_int, c_int, UINT, ?*c_int, ?*FLOAT) callconv(WINAPI) BOOL;
pub const PFNWGLGETPIXELFORMATATTRIBIVARBPROC = ?fn (HDC, c_int, c_int, UINT, ?*const c_int, ?*c_int) callconv(WINAPI) BOOL;
pub const PFNWGLGETPIXELFORMATATTRIBIVEXTPROC = ?fn (HDC, c_int, c_int, UINT, ?*c_int, ?*c_int) callconv(WINAPI) BOOL;
pub const PFNWGLGETSWAPINTERVALEXTPROC = ?fn () callconv(WINAPI) c_int;
pub const PFNWGLGETSYNCVALUESOMLPROC = ?fn (HDC, ?*INT64, ?*INT64, ?*INT64) callconv(WINAPI) BOOL;
pub const PFNWGLGETVIDEODEVICENVPROC = ?fn (HDC, c_int, ?*HPVIDEODEV) callconv(WINAPI) BOOL;
pub const PFNWGLGETVIDEOINFONVPROC = ?fn (HPVIDEODEV, ?*c_ulong, ?*c_ulong) callconv(WINAPI) BOOL;
pub const PFNWGLISENABLEDFRAMELOCKI3DPROC = ?fn (?*BOOL) callconv(WINAPI) BOOL;
pub const PFNWGLISENABLEDGENLOCKI3DPROC = ?fn (HDC, ?*BOOL) callconv(WINAPI) BOOL;
pub const PFNWGLJOINSWAPGROUPNVPROC = ?fn (HDC, GLuint) callconv(WINAPI) BOOL;
pub const PFNWGLLOADDISPLAYCOLORTABLEEXTPROC = ?fn (?*const GLushort, GLuint) callconv(WINAPI) GLboolean;
pub const PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC = ?fn (HDC, HVIDEOINPUTDEVICENV) callconv(WINAPI) BOOL;
pub const PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC = ?fn (HGLRC) callconv(WINAPI) BOOL;
pub const PFNWGLMAKECONTEXTCURRENTARBPROC = ?fn (HDC, HDC, HGLRC) callconv(WINAPI) BOOL;
pub const PFNWGLMAKECONTEXTCURRENTEXTPROC = ?fn (HDC, HDC, HGLRC) callconv(WINAPI) BOOL;
pub const PFNWGLQUERYCURRENTCONTEXTNVPROC = ?fn (c_int, ?*c_int) callconv(WINAPI) BOOL;
pub const PFNWGLQUERYFRAMECOUNTNVPROC = ?fn (HDC, ?*GLuint) callconv(WINAPI) BOOL;
pub const PFNWGLQUERYFRAMELOCKMASTERI3DPROC = ?fn (?*BOOL) callconv(WINAPI) BOOL;
pub const PFNWGLQUERYFRAMETRACKINGI3DPROC = ?fn (?*DWORD, ?*DWORD, ?*f32) callconv(WINAPI) BOOL;
pub const PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC = ?fn (HDC, ?*UINT, ?*UINT) callconv(WINAPI) BOOL;
pub const PFNWGLQUERYMAXSWAPGROUPSNVPROC = ?fn (HDC, ?*GLuint, ?*GLuint) callconv(WINAPI) BOOL;
pub const PFNWGLQUERYPBUFFERARBPROC = ?fn (HPBUFFERARB, c_int, ?*c_int) callconv(WINAPI) BOOL;
pub const PFNWGLQUERYPBUFFEREXTPROC = ?fn (HPBUFFEREXT, c_int, ?*c_int) callconv(WINAPI) BOOL;
pub const PFNWGLQUERYSWAPGROUPNVPROC = ?fn (HDC, ?*GLuint, ?*GLuint) callconv(WINAPI) BOOL;
pub const PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC = ?fn (HDC, HVIDEOINPUTDEVICENV, c_int, ?*c_int) callconv(WINAPI) BOOL;
pub const PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC = ?fn (HDC, ?*const LPVOID, UINT) callconv(WINAPI) BOOL;
pub const PFNWGLRELEASEPBUFFERDCARBPROC = ?fn (HPBUFFERARB, HDC) callconv(WINAPI) c_int;
pub const PFNWGLRELEASEPBUFFERDCEXTPROC = ?fn (HPBUFFEREXT, HDC) callconv(WINAPI) c_int;
pub const PFNWGLRELEASETEXIMAGEARBPROC = ?fn (HPBUFFERARB, c_int) callconv(WINAPI) BOOL;
pub const PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC = ?fn (HDC, HVIDEOINPUTDEVICENV) callconv(WINAPI) BOOL;
pub const PFNWGLRELEASEVIDEODEVICENVPROC = ?fn (HPVIDEODEV) callconv(WINAPI) BOOL;
pub const PFNWGLRELEASEVIDEOIMAGENVPROC = ?fn (HPBUFFERARB, c_int) callconv(WINAPI) BOOL;
pub const PFNWGLRESETFRAMECOUNTNVPROC = ?fn (HDC) callconv(WINAPI) BOOL;
pub const PFNWGLRESTOREBUFFERREGIONARBPROC = ?fn (HANDLE, c_int, c_int, c_int, c_int, c_int, c_int) callconv(WINAPI) BOOL;
pub const PFNWGLSAVEBUFFERREGIONARBPROC = ?fn (HANDLE, c_int, c_int, c_int, c_int) callconv(WINAPI) BOOL;
pub const PFNWGLSENDPBUFFERTOVIDEONVPROC = ?fn (HPBUFFERARB, c_int, ?*c_ulong, BOOL) callconv(WINAPI) BOOL;
pub const PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC = ?fn (HDC, c_int, ?*const c_int) callconv(WINAPI) BOOL;
pub const PFNWGLSETGAMMATABLEI3DPROC = ?fn (HDC, c_int, ?*const USHORT, ?*const USHORT, ?*const USHORT) callconv(WINAPI) BOOL;
pub const PFNWGLSETGAMMATABLEPARAMETERSI3DPROC = ?fn (HDC, c_int, ?*const c_int) callconv(WINAPI) BOOL;
pub const PFNWGLSETPBUFFERATTRIBARBPROC = ?fn (HPBUFFERARB, ?*const c_int) callconv(WINAPI) BOOL;
pub const PFNWGLSETSTEREOEMITTERSTATE3DLPROC = ?fn (HDC, UINT) callconv(WINAPI) BOOL;
pub const PFNWGLSWAPBUFFERSMSCOMLPROC = ?fn (HDC, INT64, INT64, INT64) callconv(WINAPI) INT64;
pub const PFNWGLSWAPINTERVALEXTPROC = ?fn (c_int) callconv(WINAPI) BOOL;
pub const PFNWGLSWAPLAYERBUFFERSMSCOMLPROC = ?fn (HDC, c_int, INT64, INT64, INT64) callconv(WINAPI) INT64;
pub const PFNWGLWAITFORMSCOMLPROC = ?fn (HDC, INT64, INT64, INT64, ?*INT64, ?*INT64, ?*INT64) callconv(WINAPI) BOOL;
pub const PFNWGLWAITFORSBCOMLPROC = ?fn (HDC, INT64, ?*INT64, ?*INT64, ?*INT64) callconv(WINAPI) BOOL;

pub extern "opengl32" fn glAccum(op: GLenum, value: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glAlphaFunc(func: GLenum, ref: GLclampf) callconv(WINAPI) void;
pub extern "opengl32" fn glAreTexturesResident(n: GLsizei, textures: ?*const GLuint, residences: ?*GLboolean) callconv(WINAPI) GLboolean;
pub extern "opengl32" fn glArrayElement(i: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glBegin(mode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glBindTexture(target: GLenum, texture: GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: ?[*]const GLubyte) callconv(WINAPI) void;
pub extern "opengl32" fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glCallList(list: GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glCallLists(n: GLsizei, type_0: GLenum, lists: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glClear(mask: GLbitfield) callconv(WINAPI) void;
pub extern "opengl32" fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) callconv(WINAPI) void;
pub extern "opengl32" fn glClearDepth(depth: GLclampd) callconv(WINAPI) void;
pub extern "opengl32" fn glClearIndex(c: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glClearStencil(s: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glClipPlane(plane: GLenum, equation: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3bv(v: ?*const GLbyte) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3i(red: GLint, green: GLint, blue: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3s(red: GLshort, green: GLshort, blue: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3ubv(v: ?[*]const GLubyte) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3uiv(v: ?*const GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3us(red: GLushort, green: GLushort, blue: GLushort) callconv(WINAPI) void;
pub extern "opengl32" fn glColor3usv(v: ?*const GLushort) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4bv(v: ?*const GLbyte) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4ubv(v: ?[*]const GLubyte) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4uiv(v: ?*const GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) callconv(WINAPI) void;
pub extern "opengl32" fn glColor4usv(v: ?*const GLushort) callconv(WINAPI) void;
pub extern "opengl32" fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) callconv(WINAPI) void;
pub extern "opengl32" fn glColorMaterial(face: GLenum, mode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glColorPointer(size: GLint, type_0: GLenum, stride: GLsizei, pointer: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_0: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glCopyTexImage1D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glCopyTexImage2D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) callconv(WINAPI) void;
pub extern "opengl32" fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(WINAPI) void;
pub extern "opengl32" fn glCullFace(mode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glDeleteLists(list: GLuint, range: GLsizei) callconv(WINAPI) void;
pub extern "opengl32" fn glDeleteTextures(n: GLsizei, textures: ?*const GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glDepthFunc(func: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glDepthMask(flag: GLboolean) callconv(WINAPI) void;
pub extern "opengl32" fn glDepthRange(zNear: GLclampd, zFar: GLclampd) callconv(WINAPI) void;
pub extern "opengl32" fn glDisable(cap: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glDisableClientState(array: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) callconv(WINAPI) void;
pub extern "opengl32" fn glDrawBuffer(mode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glDrawElements(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glEdgeFlag(flag: GLboolean) callconv(WINAPI) void;
pub extern "opengl32" fn glEdgeFlagPointer(stride: GLsizei, pointer: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glEdgeFlagv(flag: ?*const GLboolean) callconv(WINAPI) void;
pub extern "opengl32" fn glEnable(cap: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glEnableClientState(array: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glEnd() callconv(WINAPI) void;
pub extern "opengl32" fn glEndList() callconv(WINAPI) void;
pub extern "opengl32" fn glEvalCoord1d(u: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glEvalCoord1dv(u: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glEvalCoord1f(u: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glEvalCoord1fv(u: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glEvalCoord2d(u: GLdouble, v: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glEvalCoord2dv(u: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glEvalCoord2f(u: GLfloat, v: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glEvalCoord2fv(u: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glEvalMesh1(mode: GLenum, i1: GLint, i2_0: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glEvalMesh2(mode: GLenum, i1: GLint, i2_0: GLint, j1: GLint, j2: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glEvalPoint1(i: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glEvalPoint2(i: GLint, j: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glFeedbackBuffer(size: GLsizei, type_0: GLenum, buffer: ?*GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glFinish() callconv(WINAPI) void;
pub extern "opengl32" fn glFlush() callconv(WINAPI) void;
pub extern "opengl32" fn glFogf(pname: GLenum, param: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glFogfv(pname: GLenum, params: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glFogi(pname: GLenum, param: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glFogiv(pname: GLenum, params: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glFrontFace(mode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glGenLists(range: GLsizei) callconv(WINAPI) GLuint;
pub extern "opengl32" fn glGenTextures(n: GLsizei, textures: ?*GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glGetBooleanv(pname: GLenum, params: ?*GLboolean) callconv(WINAPI) void;
pub extern "opengl32" fn glGetClipPlane(plane: GLenum, equation: ?*GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glGetDoublev(pname: GLenum, params: ?*GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glGetError() callconv(WINAPI) GLenum;
pub extern "opengl32" fn glGetFloatv(pname: GLenum, params: ?*GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glGetIntegerv(pname: GLenum, params: ?*GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glGetLightfv(light: GLenum, pname: GLenum, params: ?*GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glGetLightiv(light: GLenum, pname: GLenum, params: ?*GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glGetMapdv(target: GLenum, query: GLenum, v: ?*GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glGetMapfv(target: GLenum, query: GLenum, v: ?*GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glGetMapiv(target: GLenum, query: GLenum, v: ?*GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glGetMaterialfv(face: GLenum, pname: GLenum, params: ?*GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glGetMaterialiv(face: GLenum, pname: GLenum, params: ?*GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glGetPixelMapfv(map: GLenum, values: ?*GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glGetPixelMapuiv(map: GLenum, values: ?*GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glGetPixelMapusv(map: GLenum, values: ?*GLushort) callconv(WINAPI) void;
pub extern "opengl32" fn glGetPointerv(pname: GLenum, params: ?*(?*GLvoid)) callconv(WINAPI) void;
pub extern "opengl32" fn glGetPolygonStipple(mask: ?*GLubyte) callconv(WINAPI) void;
pub extern "opengl32" fn glGetString(name: GLenum) ?[*]const GLubyte;
pub extern "opengl32" fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: ?*GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glGetTexEnviv(target: GLenum, pname: GLenum, params: ?*GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glGetTexGendv(coord: GLenum, pname: GLenum, params: ?*GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: ?*GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: ?*GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, type_0: GLenum, pixels: ?*GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: ?*GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: ?*GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: ?*GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: ?*GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glHint(target: GLenum, mode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexd(c: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexdv(c: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexf(c: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexfv(c: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexi(c: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexiv(c: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexMask(mask: GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexPointer(type_0: GLenum, stride: GLsizei, pointer: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexs(c: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexsv(c: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexub(c: GLubyte) callconv(WINAPI) void;
pub extern "opengl32" fn glIndexubv(c: ?[*]const GLubyte) callconv(WINAPI) void;
pub extern "opengl32" fn glInitNames() callconv(WINAPI) void;
pub extern "opengl32" fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glIsEnabled(cap: GLenum) callconv(WINAPI) GLboolean;
pub extern "opengl32" fn glIsList(list: GLuint) callconv(WINAPI) GLboolean;
pub extern "opengl32" fn glIsTexture(texture: GLuint) callconv(WINAPI) GLboolean;
pub extern "opengl32" fn glLightf(light: GLenum, pname: GLenum, param: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glLightfv(light: GLenum, pname: GLenum, params: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glLighti(light: GLenum, pname: GLenum, param: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glLightiv(light: GLenum, pname: GLenum, params: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glLightModelf(pname: GLenum, param: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glLightModelfv(pname: GLenum, params: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glLightModeli(pname: GLenum, param: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glLightModeliv(pname: GLenum, params: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glLineStipple(factor: GLint, pattern: GLushort) callconv(WINAPI) void;
pub extern "opengl32" fn glLineWidth(width: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glListBase(base: GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glLoadIdentity() callconv(WINAPI) void;
pub extern "opengl32" fn glLoadMatrixd(m: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glLoadMatrixf(m: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glLoadName(name: GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glLogicOp(opcode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glMap1d(target: GLenum, u1: GLdouble, u2_0: GLdouble, stride: GLint, order: GLint, points: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glMap1f(target: GLenum, u1: GLfloat, u2_0: GLfloat, stride: GLint, order: GLint, points: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glMap2d(target: GLenum, u1: GLdouble, u2_0: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glMap2f(target: GLenum, u1: GLfloat, u2_0: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glMapGrid1d(un: GLint, u1: GLdouble, u2_0: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glMapGrid1f(un: GLint, u1: GLfloat, u2_0: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glMapGrid2d(un: GLint, u1: GLdouble, u2_0: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glMapGrid2f(un: GLint, u1: GLfloat, u2_0: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glMaterialfv(face: GLenum, pname: GLenum, params: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glMateriali(face: GLenum, pname: GLenum, param: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glMaterialiv(face: GLenum, pname: GLenum, params: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glMatrixMode(mode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glMultMatrixd(m: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glMultMatrixf(m: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glNewList(list: GLuint, mode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) callconv(WINAPI) void;
pub extern "opengl32" fn glNormal3bv(v: ?*const GLbyte) callconv(WINAPI) void;
pub extern "opengl32" fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glNormal3dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glNormal3fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glNormal3i(nx: GLint, ny: GLint, nz: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glNormal3iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glNormal3sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glNormalPointer(type_0: GLenum, stride: GLsizei, pointer: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glPassThrough(token: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: ?*const GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: ?*const GLushort) callconv(WINAPI) void;
pub extern "opengl32" fn glPixelStoref(pname: GLenum, param: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glPixelStorei(pname: GLenum, param: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glPixelTransferf(pname: GLenum, param: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glPixelTransferi(pname: GLenum, param: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glPointSize(size: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glPolygonMode(face: GLenum, mode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glPolygonOffset(factor: GLfloat, units: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glPolygonStipple(mask: ?[*]const GLubyte) callconv(WINAPI) void;
pub extern "opengl32" fn glPopAttrib() callconv(WINAPI) void;
pub extern "opengl32" fn glPopClientAttrib() callconv(WINAPI) void;
pub extern "opengl32" fn glPopMatrix() callconv(WINAPI) void;
pub extern "opengl32" fn glPopName() callconv(WINAPI) void;
pub extern "opengl32" fn glPrioritizeTextures(n: GLsizei, textures: ?*const GLuint, priorities: ?*const GLclampf) callconv(WINAPI) void;
pub extern "opengl32" fn glPushAttrib(mask: GLbitfield) callconv(WINAPI) void;
pub extern "opengl32" fn glPushClientAttrib(mask: GLbitfield) callconv(WINAPI) void;
pub extern "opengl32" fn glPushMatrix() callconv(WINAPI) void;
pub extern "opengl32" fn glPushName(name: GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos2d(x: GLdouble, y: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos2dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos2f(x: GLfloat, y: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos2fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos2i(x: GLint, y: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos2iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos2s(x: GLshort, y: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos2sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos3dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos3fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos3i(x: GLint, y: GLint, z: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos3iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos3sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos4dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos4fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos4iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glRasterPos4sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glReadBuffer(mode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glRectdv(v1: ?*const GLdouble, v2: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glRectfv(v1: ?*const GLfloat, v2: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glRectiv(v1: ?*const GLint, v2: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glRectsv(v1: ?*const GLshort, v2: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glRenderMode(mode: GLenum) callconv(WINAPI) GLint;
pub extern "opengl32" fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(WINAPI) void;
pub extern "opengl32" fn glSelectBuffer(size: GLsizei, buffer: ?*GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glShadeModel(mode: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glStencilMask(mask: GLuint) callconv(WINAPI) void;
pub extern "opengl32" fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord1d(s: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord1dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord1f(s: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord1fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord1i(s: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord1iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord1s(s: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord1sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord2d(s: GLdouble, t: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord2dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord2f(s: GLfloat, t: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord2fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord2i(s: GLint, t: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord2iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord2s(s: GLshort, t: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord2sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord3dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord3fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord3i(s: GLint, t: GLint, r: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord3iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord3sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord4dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord4fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord4iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoord4sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glTexCoordPointer(size: GLint, type_0: GLenum, stride: GLsizei, pointer: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexEnvfv(target: GLenum, pname: GLenum, params: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexEnviv(target: GLenum, pname: GLenum, params: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glTexGendv(coord: GLenum, pname: GLenum, params: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexGenfv(coord: GLenum, pname: GLenum, params: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexGeniv(coord: GLenum, pname: GLenum, params: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexParameterfv(target: GLenum, pname: GLenum, params: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexParameteriv(target: GLenum, pname: GLenum, params: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex2d(x: GLdouble, y: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex2dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex2f(x: GLfloat, y: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex2fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex2i(x: GLint, y: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex2iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex2s(x: GLshort, y: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex2sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex3dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex3fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex3i(x: GLint, y: GLint, z: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex3iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex3s(x: GLshort, y: GLshort, z: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex3sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex4dv(v: ?*const GLdouble) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex4fv(v: ?*const GLfloat) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex4iv(v: ?*const GLint) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glVertex4sv(v: ?*const GLshort) callconv(WINAPI) void;
pub extern "opengl32" fn glVertexPointer(size: GLint, type_0: GLenum, stride: GLsizei, pointer: ?*const GLvoid) callconv(WINAPI) void;
pub extern "opengl32" fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) callconv(WINAPI) void;