//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (64)
//--------------------------------------------------------------------------------
pub const D3DCOMPILER_DLL = "d3dcompiler_47.dll";
pub const D3DCOMPILE_OPTIMIZATION_LEVEL2 = @as(u32, 49152);
pub const D3D_COMPILE_STANDARD_FILE_INCLUDE = @as(u32, 1);
pub const D3D_COMPILER_VERSION = @as(u32, 47);
pub const D3DCOMPILE_DEBUG = @as(u32, 1);
pub const D3DCOMPILE_SKIP_VALIDATION = @as(u32, 2);
pub const D3DCOMPILE_SKIP_OPTIMIZATION = @as(u32, 4);
pub const D3DCOMPILE_PACK_MATRIX_ROW_MAJOR = @as(u32, 8);
pub const D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR = @as(u32, 16);
pub const D3DCOMPILE_PARTIAL_PRECISION = @as(u32, 32);
pub const D3DCOMPILE_FORCE_VS_SOFTWARE_NO_OPT = @as(u32, 64);
pub const D3DCOMPILE_FORCE_PS_SOFTWARE_NO_OPT = @as(u32, 128);
pub const D3DCOMPILE_NO_PRESHADER = @as(u32, 256);
pub const D3DCOMPILE_AVOID_FLOW_CONTROL = @as(u32, 512);
pub const D3DCOMPILE_PREFER_FLOW_CONTROL = @as(u32, 1024);
pub const D3DCOMPILE_ENABLE_STRICTNESS = @as(u32, 2048);
pub const D3DCOMPILE_ENABLE_BACKWARDS_COMPATIBILITY = @as(u32, 4096);
pub const D3DCOMPILE_IEEE_STRICTNESS = @as(u32, 8192);
pub const D3DCOMPILE_OPTIMIZATION_LEVEL0 = @as(u32, 16384);
pub const D3DCOMPILE_OPTIMIZATION_LEVEL1 = @as(u32, 0);
pub const D3DCOMPILE_OPTIMIZATION_LEVEL3 = @as(u32, 32768);
pub const D3DCOMPILE_RESERVED16 = @as(u32, 65536);
pub const D3DCOMPILE_RESERVED17 = @as(u32, 131072);
pub const D3DCOMPILE_WARNINGS_ARE_ERRORS = @as(u32, 262144);
pub const D3DCOMPILE_RESOURCES_MAY_ALIAS = @as(u32, 524288);
pub const D3DCOMPILE_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES = @as(u32, 1048576);
pub const D3DCOMPILE_ALL_RESOURCES_BOUND = @as(u32, 2097152);
pub const D3DCOMPILE_DEBUG_NAME_FOR_SOURCE = @as(u32, 4194304);
pub const D3DCOMPILE_DEBUG_NAME_FOR_BINARY = @as(u32, 8388608);
pub const D3DCOMPILE_EFFECT_CHILD_EFFECT = @as(u32, 1);
pub const D3DCOMPILE_EFFECT_ALLOW_SLOW_OPS = @as(u32, 2);
pub const D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_LATEST = @as(u32, 0);
pub const D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_1_0 = @as(u32, 16);
pub const D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_1_1 = @as(u32, 32);
pub const D3DCOMPILE_SECDATA_MERGE_UAV_SLOTS = @as(u32, 1);
pub const D3DCOMPILE_SECDATA_PRESERVE_TEMPLATE_SLOTS = @as(u32, 2);
pub const D3DCOMPILE_SECDATA_REQUIRE_TEMPLATE_MATCH = @as(u32, 4);
pub const D3D_DISASM_ENABLE_COLOR_CODE = @as(u32, 1);
pub const D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS = @as(u32, 2);
pub const D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING = @as(u32, 4);
pub const D3D_DISASM_ENABLE_INSTRUCTION_CYCLE = @as(u32, 8);
pub const D3D_DISASM_DISABLE_DEBUG_INFO = @as(u32, 16);
pub const D3D_DISASM_ENABLE_INSTRUCTION_OFFSET = @as(u32, 32);
pub const D3D_DISASM_INSTRUCTION_ONLY = @as(u32, 64);
pub const D3D_DISASM_PRINT_HEX_LITERALS = @as(u32, 128);
pub const D3D_GET_INST_OFFSETS_INCLUDE_NON_EXECUTABLE = @as(u32, 1);
pub const D3D_COMPRESS_SHADER_KEEP_ALL_PARTS = @as(u32, 1);
pub const DxcValidatorFlags_Default = @as(u32, 0);
pub const DxcValidatorFlags_InPlaceEdit = @as(u32, 1);
pub const DxcValidatorFlags_RootSignatureOnly = @as(u32, 2);
pub const DxcValidatorFlags_ModuleOnly = @as(u32, 4);
pub const DxcValidatorFlags_ValidMask = @as(u32, 7);
pub const DxcVersionInfoFlags_None = @as(u32, 0);
pub const DxcVersionInfoFlags_Debug = @as(u32, 1);
pub const DxcVersionInfoFlags_Internal = @as(u32, 2);
pub const CLSID_DxcCompiler = Guid.initString("73e22d93-e6ce-47f3-b5bf-f0664f39c1b0");
pub const CLSID_DxcLinker = Guid.initString("ef6a8087-b0ea-4d56-9e45-d07e1a8b7806");
pub const CLSID_DxcDiaDataSource = Guid.initString("cd1f6b73-2ab0-484d-8edc-ebe7a43ca09f");
pub const CLSID_DxcLibrary = Guid.initString("6245d6af-66e0-48fd-80b4-4d271796748c");
pub const CLSID_DxcValidator = Guid.initString("8ca3e215-f728-4cf3-8cdd-88af917587a1");
pub const CLSID_DxcAssembler = Guid.initString("d728db68-f903-4f80-94cd-dccf76ec7151");
pub const CLSID_DxcContainerReflection = Guid.initString("b9f54489-55b8-400c-ba3a-1675e4728b91");
pub const CLSID_DxcOptimizer = Guid.initString("ae2cd79f-cc22-453f-9b6b-b124e7a5204c");
pub const CLSID_DxcContainerBuilder = Guid.initString("94134294-411f-4574-b4d0-8741e25240d2");

//--------------------------------------------------------------------------------
// Section: Types (26)
//--------------------------------------------------------------------------------
pub const DXC_CP = enum(u32) {
    ACP = 0,
    UTF16 = 1200,
    UTF8 = 65001,
};
pub const DXC_CP_ACP = DXC_CP.ACP;
pub const DXC_CP_UTF16 = DXC_CP.UTF16;
pub const DXC_CP_UTF8 = DXC_CP.UTF8;

pub const pD3DCompile = fn(
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    pFileName: ?[*:0]const u8,
    pDefines: ?*const D3D_SHADER_MACRO,
    pInclude: ?*ID3DInclude,
    pEntrypoint: ?[*:0]const u8,
    pTarget: ?[*:0]const u8,
    Flags1: u32,
    Flags2: u32,
    ppCode: ?*?*ID3DBlob,
    ppErrorMsgs: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const pD3DPreprocess = fn(
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    pFileName: ?[*:0]const u8,
    pDefines: ?*const D3D_SHADER_MACRO,
    pInclude: ?*ID3DInclude,
    ppCodeText: ?*?*ID3DBlob,
    ppErrorMsgs: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const pD3DDisassemble = fn(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    Flags: u32,
    szComments: ?[*:0]const u8,
    ppDisassembly: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const D3DCOMPILER_STRIP_FLAGS = enum(i32) {
    REFLECTION_DATA = 1,
    DEBUG_INFO = 2,
    TEST_BLOBS = 4,
    PRIVATE_DATA = 8,
    ROOT_SIGNATURE = 16,
    FORCE_DWORD = 2147483647,
};
pub const D3DCOMPILER_STRIP_REFLECTION_DATA = D3DCOMPILER_STRIP_FLAGS.REFLECTION_DATA;
pub const D3DCOMPILER_STRIP_DEBUG_INFO = D3DCOMPILER_STRIP_FLAGS.DEBUG_INFO;
pub const D3DCOMPILER_STRIP_TEST_BLOBS = D3DCOMPILER_STRIP_FLAGS.TEST_BLOBS;
pub const D3DCOMPILER_STRIP_PRIVATE_DATA = D3DCOMPILER_STRIP_FLAGS.PRIVATE_DATA;
pub const D3DCOMPILER_STRIP_ROOT_SIGNATURE = D3DCOMPILER_STRIP_FLAGS.ROOT_SIGNATURE;
pub const D3DCOMPILER_STRIP_FORCE_DWORD = D3DCOMPILER_STRIP_FLAGS.FORCE_DWORD;

pub const D3D_BLOB_PART = enum(i32) {
    INPUT_SIGNATURE_BLOB = 0,
    OUTPUT_SIGNATURE_BLOB = 1,
    INPUT_AND_OUTPUT_SIGNATURE_BLOB = 2,
    PATCH_CONSTANT_SIGNATURE_BLOB = 3,
    ALL_SIGNATURE_BLOB = 4,
    DEBUG_INFO = 5,
    LEGACY_SHADER = 6,
    XNA_PREPASS_SHADER = 7,
    XNA_SHADER = 8,
    PDB = 9,
    PRIVATE_DATA = 10,
    ROOT_SIGNATURE = 11,
    DEBUG_NAME = 12,
    TEST_ALTERNATE_SHADER = 32768,
    TEST_COMPILE_DETAILS = 32769,
    TEST_COMPILE_PERF = 32770,
    TEST_COMPILE_REPORT = 32771,
};
pub const D3D_BLOB_INPUT_SIGNATURE_BLOB = D3D_BLOB_PART.INPUT_SIGNATURE_BLOB;
pub const D3D_BLOB_OUTPUT_SIGNATURE_BLOB = D3D_BLOB_PART.OUTPUT_SIGNATURE_BLOB;
pub const D3D_BLOB_INPUT_AND_OUTPUT_SIGNATURE_BLOB = D3D_BLOB_PART.INPUT_AND_OUTPUT_SIGNATURE_BLOB;
pub const D3D_BLOB_PATCH_CONSTANT_SIGNATURE_BLOB = D3D_BLOB_PART.PATCH_CONSTANT_SIGNATURE_BLOB;
pub const D3D_BLOB_ALL_SIGNATURE_BLOB = D3D_BLOB_PART.ALL_SIGNATURE_BLOB;
pub const D3D_BLOB_DEBUG_INFO = D3D_BLOB_PART.DEBUG_INFO;
pub const D3D_BLOB_LEGACY_SHADER = D3D_BLOB_PART.LEGACY_SHADER;
pub const D3D_BLOB_XNA_PREPASS_SHADER = D3D_BLOB_PART.XNA_PREPASS_SHADER;
pub const D3D_BLOB_XNA_SHADER = D3D_BLOB_PART.XNA_SHADER;
pub const D3D_BLOB_PDB = D3D_BLOB_PART.PDB;
pub const D3D_BLOB_PRIVATE_DATA = D3D_BLOB_PART.PRIVATE_DATA;
pub const D3D_BLOB_ROOT_SIGNATURE = D3D_BLOB_PART.ROOT_SIGNATURE;
pub const D3D_BLOB_DEBUG_NAME = D3D_BLOB_PART.DEBUG_NAME;
pub const D3D_BLOB_TEST_ALTERNATE_SHADER = D3D_BLOB_PART.TEST_ALTERNATE_SHADER;
pub const D3D_BLOB_TEST_COMPILE_DETAILS = D3D_BLOB_PART.TEST_COMPILE_DETAILS;
pub const D3D_BLOB_TEST_COMPILE_PERF = D3D_BLOB_PART.TEST_COMPILE_PERF;
pub const D3D_BLOB_TEST_COMPILE_REPORT = D3D_BLOB_PART.TEST_COMPILE_REPORT;

pub const D3D_SHADER_DATA = extern struct {
    pBytecode: ?*const c_void,
    BytecodeLength: usize,
};

pub const DxcCreateInstanceProc = fn(
    rclsid: ?*const Guid,
    riid: ?*const Guid,
    ppv: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DxcCreateInstance2Proc = fn(
    pMalloc: ?*IMalloc,
    rclsid: ?*const Guid,
    riid: ?*const Guid,
    ppv: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

const IID_IDxcBlob_Value = @import("../zig.zig").Guid.initString("8ba5fb08-5195-40e2-ac58-0d989c3a0102");
pub const IID_IDxcBlob = &IID_IDxcBlob_Value;
pub const IDxcBlob = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBufferPointer: fn(
            self: *const IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) ?*c_void,
        GetBufferSize: fn(
            self: *const IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) usize,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcBlob_GetBufferPointer(self: *const T) callconv(.Inline) ?*c_void {
            return @ptrCast(*const IDxcBlob.VTable, self.vtable).GetBufferPointer(@ptrCast(*const IDxcBlob, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcBlob_GetBufferSize(self: *const T) callconv(.Inline) usize {
            return @ptrCast(*const IDxcBlob.VTable, self.vtable).GetBufferSize(@ptrCast(*const IDxcBlob, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcBlobEncoding_Value = @import("../zig.zig").Guid.initString("7241d424-2646-4191-97c0-98e96e42fc68");
pub const IID_IDxcBlobEncoding = &IID_IDxcBlobEncoding_Value;
pub const IDxcBlobEncoding = extern struct {
    pub const VTable = extern struct {
        base: IDxcBlob.VTable,
        GetEncoding: fn(
            self: *const IDxcBlobEncoding,
            pKnown: ?*BOOL,
            pCodePage: ?*DXC_CP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDxcBlob.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcBlobEncoding_GetEncoding(self: *const T, pKnown: ?*BOOL, pCodePage: ?*DXC_CP) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcBlobEncoding.VTable, self.vtable).GetEncoding(@ptrCast(*const IDxcBlobEncoding, self), pKnown, pCodePage);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcLibrary_Value = @import("../zig.zig").Guid.initString("e5204dc7-d18c-4c3c-bdfb-851673980fe7");
pub const IID_IDxcLibrary = &IID_IDxcLibrary_Value;
pub const IDxcLibrary = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetMalloc: fn(
            self: *const IDxcLibrary,
            pMalloc: ?*IMalloc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlobFromBlob: fn(
            self: *const IDxcLibrary,
            pBlob: ?*IDxcBlob,
            offset: u32,
            length: u32,
            ppResult: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlobFromFile: fn(
            self: *const IDxcLibrary,
            pFileName: ?[*:0]const u16,
            codePage: ?*DXC_CP,
            pBlobEncoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlobWithEncodingFromPinned: fn(
            self: *const IDxcLibrary,
            // TODO: what to do with BytesParamIndex 1?
            pText: ?*const c_void,
            size: u32,
            codePage: DXC_CP,
            pBlobEncoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlobWithEncodingOnHeapCopy: fn(
            self: *const IDxcLibrary,
            // TODO: what to do with BytesParamIndex 1?
            pText: ?*const c_void,
            size: u32,
            codePage: DXC_CP,
            pBlobEncoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlobWithEncodingOnMalloc: fn(
            self: *const IDxcLibrary,
            // TODO: what to do with BytesParamIndex 2?
            pText: ?*const c_void,
            pIMalloc: ?*IMalloc,
            size: u32,
            codePage: DXC_CP,
            pBlobEncoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateIncludeHandler: fn(
            self: *const IDxcLibrary,
            ppResult: ?*?*IDxcIncludeHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStreamFromBlobReadOnly: fn(
            self: *const IDxcLibrary,
            pBlob: ?*IDxcBlob,
            ppStream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBlobAsUtf8: fn(
            self: *const IDxcLibrary,
            pBlob: ?*IDxcBlob,
            pBlobEncoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBlobAsUtf16: fn(
            self: *const IDxcLibrary,
            pBlob: ?*IDxcBlob,
            pBlobEncoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLibrary_SetMalloc(self: *const T, pMalloc: ?*IMalloc) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLibrary.VTable, self.vtable).SetMalloc(@ptrCast(*const IDxcLibrary, self), pMalloc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLibrary_CreateBlobFromBlob(self: *const T, pBlob: ?*IDxcBlob, offset: u32, length: u32, ppResult: ?*?*IDxcBlob) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLibrary.VTable, self.vtable).CreateBlobFromBlob(@ptrCast(*const IDxcLibrary, self), pBlob, offset, length, ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLibrary_CreateBlobFromFile(self: *const T, pFileName: ?[*:0]const u16, codePage: ?*DXC_CP, pBlobEncoding: ?*?*IDxcBlobEncoding) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLibrary.VTable, self.vtable).CreateBlobFromFile(@ptrCast(*const IDxcLibrary, self), pFileName, codePage, pBlobEncoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLibrary_CreateBlobWithEncodingFromPinned(self: *const T, pText: ?*const c_void, size: u32, codePage: DXC_CP, pBlobEncoding: ?*?*IDxcBlobEncoding) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLibrary.VTable, self.vtable).CreateBlobWithEncodingFromPinned(@ptrCast(*const IDxcLibrary, self), pText, size, codePage, pBlobEncoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLibrary_CreateBlobWithEncodingOnHeapCopy(self: *const T, pText: ?*const c_void, size: u32, codePage: DXC_CP, pBlobEncoding: ?*?*IDxcBlobEncoding) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLibrary.VTable, self.vtable).CreateBlobWithEncodingOnHeapCopy(@ptrCast(*const IDxcLibrary, self), pText, size, codePage, pBlobEncoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLibrary_CreateBlobWithEncodingOnMalloc(self: *const T, pText: ?*const c_void, pIMalloc: ?*IMalloc, size: u32, codePage: DXC_CP, pBlobEncoding: ?*?*IDxcBlobEncoding) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLibrary.VTable, self.vtable).CreateBlobWithEncodingOnMalloc(@ptrCast(*const IDxcLibrary, self), pText, pIMalloc, size, codePage, pBlobEncoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLibrary_CreateIncludeHandler(self: *const T, ppResult: ?*?*IDxcIncludeHandler) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLibrary.VTable, self.vtable).CreateIncludeHandler(@ptrCast(*const IDxcLibrary, self), ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLibrary_CreateStreamFromBlobReadOnly(self: *const T, pBlob: ?*IDxcBlob, ppStream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLibrary.VTable, self.vtable).CreateStreamFromBlobReadOnly(@ptrCast(*const IDxcLibrary, self), pBlob, ppStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLibrary_GetBlobAsUtf8(self: *const T, pBlob: ?*IDxcBlob, pBlobEncoding: ?*?*IDxcBlobEncoding) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLibrary.VTable, self.vtable).GetBlobAsUtf8(@ptrCast(*const IDxcLibrary, self), pBlob, pBlobEncoding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLibrary_GetBlobAsUtf16(self: *const T, pBlob: ?*IDxcBlob, pBlobEncoding: ?*?*IDxcBlobEncoding) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLibrary.VTable, self.vtable).GetBlobAsUtf16(@ptrCast(*const IDxcLibrary, self), pBlob, pBlobEncoding);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcOperationResult_Value = @import("../zig.zig").Guid.initString("cedb484a-d4e9-445a-b991-ca21ca157dc2");
pub const IID_IDxcOperationResult = &IID_IDxcOperationResult_Value;
pub const IDxcOperationResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStatus: fn(
            self: *const IDxcOperationResult,
            pStatus: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResult: fn(
            self: *const IDxcOperationResult,
            pResult: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorBuffer: fn(
            self: *const IDxcOperationResult,
            pErrors: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcOperationResult_GetStatus(self: *const T, pStatus: ?*HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcOperationResult.VTable, self.vtable).GetStatus(@ptrCast(*const IDxcOperationResult, self), pStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcOperationResult_GetResult(self: *const T, pResult: ?*?*IDxcBlob) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcOperationResult.VTable, self.vtable).GetResult(@ptrCast(*const IDxcOperationResult, self), pResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcOperationResult_GetErrorBuffer(self: *const T, pErrors: ?*?*IDxcBlobEncoding) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcOperationResult.VTable, self.vtable).GetErrorBuffer(@ptrCast(*const IDxcOperationResult, self), pErrors);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcIncludeHandler_Value = @import("../zig.zig").Guid.initString("7f61fc7d-950d-467f-b3e3-3c02fb49187c");
pub const IID_IDxcIncludeHandler = &IID_IDxcIncludeHandler_Value;
pub const IDxcIncludeHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LoadSource: fn(
            self: *const IDxcIncludeHandler,
            pFilename: ?[*:0]const u16,
            ppIncludeSource: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcIncludeHandler_LoadSource(self: *const T, pFilename: ?[*:0]const u16, ppIncludeSource: ?*?*IDxcBlob) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcIncludeHandler.VTable, self.vtable).LoadSource(@ptrCast(*const IDxcIncludeHandler, self), pFilename, ppIncludeSource);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DxcDefine = extern struct {
    Name: ?[*:0]const u16,
    Value: ?[*:0]const u16,
};

const IID_IDxcCompiler_Value = @import("../zig.zig").Guid.initString("8c210bf3-011f-4422-8d70-6f9acb8db617");
pub const IID_IDxcCompiler = &IID_IDxcCompiler_Value;
pub const IDxcCompiler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Compile: fn(
            self: *const IDxcCompiler,
            pSource: ?*IDxcBlob,
            pSourceName: ?[*:0]const u16,
            pEntryPoint: ?[*:0]const u16,
            pTargetProfile: ?[*:0]const u16,
            pArguments: [*]?PWSTR,
            argCount: u32,
            pDefines: [*]const DxcDefine,
            defineCount: u32,
            pIncludeHandler: ?*IDxcIncludeHandler,
            ppResult: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Preprocess: fn(
            self: *const IDxcCompiler,
            pSource: ?*IDxcBlob,
            pSourceName: ?[*:0]const u16,
            pArguments: [*]?PWSTR,
            argCount: u32,
            pDefines: [*]const DxcDefine,
            defineCount: u32,
            pIncludeHandler: ?*IDxcIncludeHandler,
            ppResult: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disassemble: fn(
            self: *const IDxcCompiler,
            pSource: ?*IDxcBlob,
            ppDisassembly: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcCompiler_Compile(self: *const T, pSource: ?*IDxcBlob, pSourceName: ?[*:0]const u16, pEntryPoint: ?[*:0]const u16, pTargetProfile: ?[*:0]const u16, pArguments: [*]?PWSTR, argCount: u32, pDefines: [*]const DxcDefine, defineCount: u32, pIncludeHandler: ?*IDxcIncludeHandler, ppResult: ?*?*IDxcOperationResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcCompiler.VTable, self.vtable).Compile(@ptrCast(*const IDxcCompiler, self), pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcCompiler_Preprocess(self: *const T, pSource: ?*IDxcBlob, pSourceName: ?[*:0]const u16, pArguments: [*]?PWSTR, argCount: u32, pDefines: [*]const DxcDefine, defineCount: u32, pIncludeHandler: ?*IDxcIncludeHandler, ppResult: ?*?*IDxcOperationResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcCompiler.VTable, self.vtable).Preprocess(@ptrCast(*const IDxcCompiler, self), pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcCompiler_Disassemble(self: *const T, pSource: ?*IDxcBlob, ppDisassembly: ?*?*IDxcBlobEncoding) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcCompiler.VTable, self.vtable).Disassemble(@ptrCast(*const IDxcCompiler, self), pSource, ppDisassembly);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcCompiler2_Value = @import("../zig.zig").Guid.initString("a005a9d9-b8bb-4594-b5c9-0e633bec4d37");
pub const IID_IDxcCompiler2 = &IID_IDxcCompiler2_Value;
pub const IDxcCompiler2 = extern struct {
    pub const VTable = extern struct {
        base: IDxcCompiler.VTable,
        CompileWithDebug: fn(
            self: *const IDxcCompiler2,
            pSource: ?*IDxcBlob,
            pSourceName: ?[*:0]const u16,
            pEntryPoint: ?[*:0]const u16,
            pTargetProfile: ?[*:0]const u16,
            pArguments: [*]?PWSTR,
            argCount: u32,
            pDefines: [*]const DxcDefine,
            defineCount: u32,
            pIncludeHandler: ?*IDxcIncludeHandler,
            ppResult: ?*?*IDxcOperationResult,
            ppDebugBlobName: ?*?PWSTR,
            ppDebugBlob: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDxcCompiler.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcCompiler2_CompileWithDebug(self: *const T, pSource: ?*IDxcBlob, pSourceName: ?[*:0]const u16, pEntryPoint: ?[*:0]const u16, pTargetProfile: ?[*:0]const u16, pArguments: [*]?PWSTR, argCount: u32, pDefines: [*]const DxcDefine, defineCount: u32, pIncludeHandler: ?*IDxcIncludeHandler, ppResult: ?*?*IDxcOperationResult, ppDebugBlobName: ?*?PWSTR, ppDebugBlob: ?*?*IDxcBlob) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcCompiler2.VTable, self.vtable).CompileWithDebug(@ptrCast(*const IDxcCompiler2, self), pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcLinker_Value = @import("../zig.zig").Guid.initString("f1b5be2a-62dd-4327-a1c2-42ac1e1e78e6");
pub const IID_IDxcLinker = &IID_IDxcLinker_Value;
pub const IDxcLinker = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterLibrary: fn(
            self: *const IDxcLinker,
            pLibName: ?[*:0]const u16,
            pLib: ?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Link: fn(
            self: *const IDxcLinker,
            pEntryName: ?[*:0]const u16,
            pTargetProfile: ?[*:0]const u16,
            pLibNames: [*]const ?[*:0]const u16,
            libCount: u32,
            pArguments: [*]const ?[*:0]const u16,
            argCount: u32,
            ppResult: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLinker_RegisterLibrary(self: *const T, pLibName: ?[*:0]const u16, pLib: ?*IDxcBlob) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLinker.VTable, self.vtable).RegisterLibrary(@ptrCast(*const IDxcLinker, self), pLibName, pLib);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcLinker_Link(self: *const T, pEntryName: ?[*:0]const u16, pTargetProfile: ?[*:0]const u16, pLibNames: [*]const ?[*:0]const u16, libCount: u32, pArguments: [*]const ?[*:0]const u16, argCount: u32, ppResult: ?*?*IDxcOperationResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcLinker.VTable, self.vtable).Link(@ptrCast(*const IDxcLinker, self), pEntryName, pTargetProfile, pLibNames, libCount, pArguments, argCount, ppResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcValidator_Value = @import("../zig.zig").Guid.initString("a6e82bd2-1fd7-4826-9811-2857e797f49a");
pub const IID_IDxcValidator = &IID_IDxcValidator_Value;
pub const IDxcValidator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Validate: fn(
            self: *const IDxcValidator,
            pShader: ?*IDxcBlob,
            Flags: u32,
            ppResult: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcValidator_Validate(self: *const T, pShader: ?*IDxcBlob, Flags: u32, ppResult: ?*?*IDxcOperationResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcValidator.VTable, self.vtable).Validate(@ptrCast(*const IDxcValidator, self), pShader, Flags, ppResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcContainerBuilder_Value = @import("../zig.zig").Guid.initString("334b1f50-2292-4b35-99a1-25588d8c17fe");
pub const IID_IDxcContainerBuilder = &IID_IDxcContainerBuilder_Value;
pub const IDxcContainerBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Load: fn(
            self: *const IDxcContainerBuilder,
            pDxilContainerHeader: ?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPart: fn(
            self: *const IDxcContainerBuilder,
            fourCC: u32,
            pSource: ?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemovePart: fn(
            self: *const IDxcContainerBuilder,
            fourCC: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SerializeContainer: fn(
            self: *const IDxcContainerBuilder,
            ppResult: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcContainerBuilder_Load(self: *const T, pDxilContainerHeader: ?*IDxcBlob) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcContainerBuilder.VTable, self.vtable).Load(@ptrCast(*const IDxcContainerBuilder, self), pDxilContainerHeader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcContainerBuilder_AddPart(self: *const T, fourCC: u32, pSource: ?*IDxcBlob) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcContainerBuilder.VTable, self.vtable).AddPart(@ptrCast(*const IDxcContainerBuilder, self), fourCC, pSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcContainerBuilder_RemovePart(self: *const T, fourCC: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcContainerBuilder.VTable, self.vtable).RemovePart(@ptrCast(*const IDxcContainerBuilder, self), fourCC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcContainerBuilder_SerializeContainer(self: *const T, ppResult: ?*?*IDxcOperationResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcContainerBuilder.VTable, self.vtable).SerializeContainer(@ptrCast(*const IDxcContainerBuilder, self), ppResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcAssembler_Value = @import("../zig.zig").Guid.initString("091f7a26-1c1f-4948-904b-e6e3a8a771d5");
pub const IID_IDxcAssembler = &IID_IDxcAssembler_Value;
pub const IDxcAssembler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AssembleToContainer: fn(
            self: *const IDxcAssembler,
            pShader: ?*IDxcBlob,
            ppResult: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcAssembler_AssembleToContainer(self: *const T, pShader: ?*IDxcBlob, ppResult: ?*?*IDxcOperationResult) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcAssembler.VTable, self.vtable).AssembleToContainer(@ptrCast(*const IDxcAssembler, self), pShader, ppResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcContainerReflection_Value = @import("../zig.zig").Guid.initString("d2c21b26-8350-4bdc-976a-331ce6f4c54c");
pub const IID_IDxcContainerReflection = &IID_IDxcContainerReflection_Value;
pub const IDxcContainerReflection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Load: fn(
            self: *const IDxcContainerReflection,
            pContainer: ?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartCount: fn(
            self: *const IDxcContainerReflection,
            pResult: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartKind: fn(
            self: *const IDxcContainerReflection,
            idx: u32,
            pResult: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartContent: fn(
            self: *const IDxcContainerReflection,
            idx: u32,
            ppResult: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstPartKind: fn(
            self: *const IDxcContainerReflection,
            kind: u32,
            pResult: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartReflection: fn(
            self: *const IDxcContainerReflection,
            idx: u32,
            iid: ?*const Guid,
            ppvObject: ?*?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcContainerReflection_Load(self: *const T, pContainer: ?*IDxcBlob) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcContainerReflection.VTable, self.vtable).Load(@ptrCast(*const IDxcContainerReflection, self), pContainer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcContainerReflection_GetPartCount(self: *const T, pResult: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcContainerReflection.VTable, self.vtable).GetPartCount(@ptrCast(*const IDxcContainerReflection, self), pResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcContainerReflection_GetPartKind(self: *const T, idx: u32, pResult: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcContainerReflection.VTable, self.vtable).GetPartKind(@ptrCast(*const IDxcContainerReflection, self), idx, pResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcContainerReflection_GetPartContent(self: *const T, idx: u32, ppResult: ?*?*IDxcBlob) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcContainerReflection.VTable, self.vtable).GetPartContent(@ptrCast(*const IDxcContainerReflection, self), idx, ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcContainerReflection_FindFirstPartKind(self: *const T, kind: u32, pResult: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcContainerReflection.VTable, self.vtable).FindFirstPartKind(@ptrCast(*const IDxcContainerReflection, self), kind, pResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcContainerReflection_GetPartReflection(self: *const T, idx: u32, iid: ?*const Guid, ppvObject: ?*?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcContainerReflection.VTable, self.vtable).GetPartReflection(@ptrCast(*const IDxcContainerReflection, self), idx, iid, ppvObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcOptimizerPass_Value = @import("../zig.zig").Guid.initString("ae2cd79f-cc22-453f-9b6b-b124e7a5204c");
pub const IID_IDxcOptimizerPass = &IID_IDxcOptimizerPass_Value;
pub const IDxcOptimizerPass = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOptionName: fn(
            self: *const IDxcOptimizerPass,
            ppResult: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: fn(
            self: *const IDxcOptimizerPass,
            ppResult: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionArgCount: fn(
            self: *const IDxcOptimizerPass,
            pCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionArgName: fn(
            self: *const IDxcOptimizerPass,
            argIndex: u32,
            ppResult: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionArgDescription: fn(
            self: *const IDxcOptimizerPass,
            argIndex: u32,
            ppResult: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcOptimizerPass_GetOptionName(self: *const T, ppResult: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcOptimizerPass.VTable, self.vtable).GetOptionName(@ptrCast(*const IDxcOptimizerPass, self), ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcOptimizerPass_GetDescription(self: *const T, ppResult: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcOptimizerPass.VTable, self.vtable).GetDescription(@ptrCast(*const IDxcOptimizerPass, self), ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcOptimizerPass_GetOptionArgCount(self: *const T, pCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcOptimizerPass.VTable, self.vtable).GetOptionArgCount(@ptrCast(*const IDxcOptimizerPass, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcOptimizerPass_GetOptionArgName(self: *const T, argIndex: u32, ppResult: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcOptimizerPass.VTable, self.vtable).GetOptionArgName(@ptrCast(*const IDxcOptimizerPass, self), argIndex, ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcOptimizerPass_GetOptionArgDescription(self: *const T, argIndex: u32, ppResult: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcOptimizerPass.VTable, self.vtable).GetOptionArgDescription(@ptrCast(*const IDxcOptimizerPass, self), argIndex, ppResult);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcOptimizer_Value = @import("../zig.zig").Guid.initString("25740e2e-9cba-401b-9119-4fb42f39f270");
pub const IID_IDxcOptimizer = &IID_IDxcOptimizer_Value;
pub const IDxcOptimizer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAvailablePassCount: fn(
            self: *const IDxcOptimizer,
            pCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAvailablePass: fn(
            self: *const IDxcOptimizer,
            index: u32,
            ppResult: ?*?*IDxcOptimizerPass,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunOptimizer: fn(
            self: *const IDxcOptimizer,
            pBlob: ?*IDxcBlob,
            ppOptions: [*]?PWSTR,
            optionCount: u32,
            pOutputModule: ?*?*IDxcBlob,
            ppOutputText: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcOptimizer_GetAvailablePassCount(self: *const T, pCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcOptimizer.VTable, self.vtable).GetAvailablePassCount(@ptrCast(*const IDxcOptimizer, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcOptimizer_GetAvailablePass(self: *const T, index: u32, ppResult: ?*?*IDxcOptimizerPass) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcOptimizer.VTable, self.vtable).GetAvailablePass(@ptrCast(*const IDxcOptimizer, self), index, ppResult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcOptimizer_RunOptimizer(self: *const T, pBlob: ?*IDxcBlob, ppOptions: [*]?PWSTR, optionCount: u32, pOutputModule: ?*?*IDxcBlob, ppOutputText: ?*?*IDxcBlobEncoding) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcOptimizer.VTable, self.vtable).RunOptimizer(@ptrCast(*const IDxcOptimizer, self), pBlob, ppOptions, optionCount, pOutputModule, ppOutputText);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcVersionInfo_Value = @import("../zig.zig").Guid.initString("b04f5b50-2059-4f12-a8ff-a1e0cde1cc7e");
pub const IID_IDxcVersionInfo = &IID_IDxcVersionInfo_Value;
pub const IDxcVersionInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetVersion: fn(
            self: *const IDxcVersionInfo,
            pMajor: ?*u32,
            pMinor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: fn(
            self: *const IDxcVersionInfo,
            pFlags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcVersionInfo_GetVersion(self: *const T, pMajor: ?*u32, pMinor: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcVersionInfo.VTable, self.vtable).GetVersion(@ptrCast(*const IDxcVersionInfo, self), pMajor, pMinor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcVersionInfo_GetFlags(self: *const T, pFlags: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcVersionInfo.VTable, self.vtable).GetFlags(@ptrCast(*const IDxcVersionInfo, self), pFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcVersionInfo2_Value = @import("../zig.zig").Guid.initString("fb6904c4-42f0-4b62-9c46-983af7da7c83");
pub const IID_IDxcVersionInfo2 = &IID_IDxcVersionInfo2_Value;
pub const IDxcVersionInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IDxcVersionInfo.VTable,
        GetCommitInfo: fn(
            self: *const IDxcVersionInfo2,
            pCommitCount: ?*u32,
            pCommitHash: ?*?*i8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDxcVersionInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDxcVersionInfo2_GetCommitInfo(self: *const T, pCommitCount: ?*u32, pCommitHash: ?*?*i8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDxcVersionInfo2.VTable, self.vtable).GetCommitInfo(@ptrCast(*const IDxcVersionInfo2, self), pCommitCount, pCommitHash);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (27)
//--------------------------------------------------------------------------------
pub extern "D3DCOMPILER_47" fn D3DReadFileToBlob(
    pFileName: ?[*:0]const u16,
    ppContents: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DWriteBlobToFile(
    pBlob: ?*ID3DBlob,
    pFileName: ?[*:0]const u16,
    bOverwrite: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DCompile(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    pSourceName: ?[*:0]const u8,
    pDefines: ?*const D3D_SHADER_MACRO,
    pInclude: ?*ID3DInclude,
    pEntrypoint: ?[*:0]const u8,
    pTarget: ?[*:0]const u8,
    Flags1: u32,
    Flags2: u32,
    ppCode: ?*?*ID3DBlob,
    ppErrorMsgs: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DCompile2(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    pSourceName: ?[*:0]const u8,
    pDefines: ?*const D3D_SHADER_MACRO,
    pInclude: ?*ID3DInclude,
    pEntrypoint: ?[*:0]const u8,
    pTarget: ?[*:0]const u8,
    Flags1: u32,
    Flags2: u32,
    SecondaryDataFlags: u32,
    // TODO: what to do with BytesParamIndex 11?
    pSecondaryData: ?*const c_void,
    SecondaryDataSize: usize,
    ppCode: ?*?*ID3DBlob,
    ppErrorMsgs: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DCompileFromFile(
    pFileName: ?[*:0]const u16,
    pDefines: ?*const D3D_SHADER_MACRO,
    pInclude: ?*ID3DInclude,
    pEntrypoint: ?[*:0]const u8,
    pTarget: ?[*:0]const u8,
    Flags1: u32,
    Flags2: u32,
    ppCode: ?*?*ID3DBlob,
    ppErrorMsgs: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DPreprocess(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    pSourceName: ?[*:0]const u8,
    pDefines: ?*const D3D_SHADER_MACRO,
    pInclude: ?*ID3DInclude,
    ppCodeText: ?*?*ID3DBlob,
    ppErrorMsgs: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DGetDebugInfo(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    ppDebugInfo: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DReflect(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    pInterface: ?*const Guid,
    ppReflector: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DReflectLibrary(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    riid: ?*const Guid,
    ppReflector: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DDisassemble(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    Flags: u32,
    szComments: ?[*:0]const u8,
    ppDisassembly: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DDisassembleRegion(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    Flags: u32,
    szComments: ?[*:0]const u8,
    StartByteOffset: usize,
    NumInsts: usize,
    pFinishByteOffset: ?*usize,
    ppDisassembly: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DCreateLinker(
    ppLinker: ?*?*ID3D11Linker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DLoadModule(
    pSrcData: ?*const c_void,
    cbSrcDataSize: usize,
    ppModule: ?*?*ID3D11Module,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DCreateFunctionLinkingGraph(
    uFlags: u32,
    ppFunctionLinkingGraph: ?*?*ID3D11FunctionLinkingGraph,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DGetTraceInstructionOffsets(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    Flags: u32,
    StartInstIndex: usize,
    NumInsts: usize,
    pOffsets: ?[*]usize,
    pTotalInsts: ?*usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DGetInputSignatureBlob(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    ppSignatureBlob: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DGetOutputSignatureBlob(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    ppSignatureBlob: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DGetInputAndOutputSignatureBlob(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    ppSignatureBlob: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DStripShader(
    // TODO: what to do with BytesParamIndex 1?
    pShaderBytecode: ?*const c_void,
    BytecodeLength: usize,
    uStripFlags: u32,
    ppStrippedBlob: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DGetBlobPart(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    Part: D3D_BLOB_PART,
    Flags: u32,
    ppPart: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DSetBlobPart(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    Part: D3D_BLOB_PART,
    Flags: u32,
    // TODO: what to do with BytesParamIndex 5?
    pPart: ?*const c_void,
    PartSize: usize,
    ppNewShader: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DCreateBlob(
    Size: usize,
    ppBlob: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DCompressShaders(
    uNumShaders: u32,
    pShaderData: [*]D3D_SHADER_DATA,
    uFlags: u32,
    ppCompressedData: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DDecompressShaders(
    // TODO: what to do with BytesParamIndex 1?
    pSrcData: ?*const c_void,
    SrcDataSize: usize,
    uNumShaders: u32,
    uStartIndex: u32,
    pIndices: ?[*]u32,
    uFlags: u32,
    ppShaders: [*]?*ID3DBlob,
    pTotalShaders: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "D3DCOMPILER_47" fn D3DDisassemble10Effect(
    pEffect: ?*ID3D10Effect,
    Flags: u32,
    ppDisassembly: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dxcompiler" fn DxcCreateInstance(
    rclsid: ?*const Guid,
    riid: ?*const Guid,
    ppv: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dxcompiler" fn DxcCreateInstance2(
    pMalloc: ?*IMalloc,
    rclsid: ?*const Guid,
    riid: ?*const Guid,
    ppv: ?*?*c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (15)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const D3D_SHADER_MACRO = @import("../graphics/direct3d11.zig").D3D_SHADER_MACRO;
const HRESULT = @import("../foundation.zig").HRESULT;
const ID3D10Effect = @import("../graphics/direct3d10.zig").ID3D10Effect;
const ID3D11FunctionLinkingGraph = @import("../graphics/direct3d11.zig").ID3D11FunctionLinkingGraph;
const ID3D11Linker = @import("../graphics/direct3d11.zig").ID3D11Linker;
const ID3D11Module = @import("../graphics/direct3d11.zig").ID3D11Module;
const ID3DBlob = @import("../graphics/direct3d11.zig").ID3DBlob;
const ID3DInclude = @import("../graphics/direct3d11.zig").ID3DInclude;
const IMalloc = @import("../system/com.zig").IMalloc;
const IStream = @import("../storage/structured_storage.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "pD3DCompile")) { _ = pD3DCompile; }
    if (@hasDecl(@This(), "pD3DPreprocess")) { _ = pD3DPreprocess; }
    if (@hasDecl(@This(), "pD3DDisassemble")) { _ = pD3DDisassemble; }
    if (@hasDecl(@This(), "DxcCreateInstanceProc")) { _ = DxcCreateInstanceProc; }
    if (@hasDecl(@This(), "DxcCreateInstance2Proc")) { _ = DxcCreateInstance2Proc; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
