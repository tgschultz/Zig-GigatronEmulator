//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Functions (23)
//--------------------------------------------------------------------------------
pub extern "KERNEL32" fn SetEnvironmentStringsW(
    NewEnvironment: ?[*]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn GetCommandLineA(
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn GetCommandLineW(
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn GetEnvironmentStrings(
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn GetEnvironmentStringsW(
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn FreeEnvironmentStringsA(
    penv: ?[*]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn FreeEnvironmentStringsW(
    penv: ?[*]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn GetEnvironmentVariableA(
    lpName: ?[*:0]const u8,
    lpBuffer: ?[*:0]u8,
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn GetEnvironmentVariableW(
    lpName: ?[*:0]const u16,
    lpBuffer: ?[*:0]u16,
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn SetEnvironmentVariableA(
    lpName: ?[*:0]const u8,
    lpValue: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "KERNEL32" fn SetEnvironmentVariableW(
    lpName: ?[*:0]const u16,
    lpValue: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "KERNEL32" fn ExpandEnvironmentStringsA(
    lpSrc: ?[*:0]const u8,
    lpDst: ?[*:0]u8,
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "KERNEL32" fn ExpandEnvironmentStringsW(
    lpSrc: ?[*:0]const u16,
    lpDst: ?[*:0]u16,
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn SetCurrentDirectoryA(
    lpPathName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn SetCurrentDirectoryW(
    lpPathName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GetCurrentDirectoryA(
    nBufferLength: u32,
    lpBuffer: ?[*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn GetCurrentDirectoryW(
    nBufferLength: u32,
    lpBuffer: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "KERNEL32" fn NeedCurrentDirectoryForExePathA(
    ExeName: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "KERNEL32" fn NeedCurrentDirectoryForExePathW(
    ExeName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USERENV" fn CreateEnvironmentBlock(
    lpEnvironment: ?*?*c_void,
    hToken: ?HANDLE,
    bInherit: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USERENV" fn DestroyEnvironmentBlock(
    lpEnvironment: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USERENV" fn ExpandEnvironmentStringsForUserA(
    hToken: ?HANDLE,
    lpSrc: ?[*:0]const u8,
    lpDest: [*:0]u8,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "USERENV" fn ExpandEnvironmentStringsForUserW(
    hToken: ?HANDLE,
    lpSrc: ?[*:0]const u16,
    lpDest: [*:0]u16,
    dwSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (9)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const GetCommandLine = thismodule.GetCommandLineA;
        pub const FreeEnvironmentStrings = thismodule.FreeEnvironmentStringsA;
        pub const GetEnvironmentVariable = thismodule.GetEnvironmentVariableA;
        pub const SetEnvironmentVariable = thismodule.SetEnvironmentVariableA;
        pub const ExpandEnvironmentStrings = thismodule.ExpandEnvironmentStringsA;
        pub const SetCurrentDirectory = thismodule.SetCurrentDirectoryA;
        pub const GetCurrentDirectory = thismodule.GetCurrentDirectoryA;
        pub const NeedCurrentDirectoryForExePath = thismodule.NeedCurrentDirectoryForExePathA;
        pub const ExpandEnvironmentStringsForUser = thismodule.ExpandEnvironmentStringsForUserA;
    },
    .wide => struct {
        pub const GetCommandLine = thismodule.GetCommandLineW;
        pub const FreeEnvironmentStrings = thismodule.FreeEnvironmentStringsW;
        pub const GetEnvironmentVariable = thismodule.GetEnvironmentVariableW;
        pub const SetEnvironmentVariable = thismodule.SetEnvironmentVariableW;
        pub const ExpandEnvironmentStrings = thismodule.ExpandEnvironmentStringsW;
        pub const SetCurrentDirectory = thismodule.SetCurrentDirectoryW;
        pub const GetCurrentDirectory = thismodule.GetCurrentDirectoryW;
        pub const NeedCurrentDirectoryForExePath = thismodule.NeedCurrentDirectoryForExePathW;
        pub const ExpandEnvironmentStringsForUser = thismodule.ExpandEnvironmentStringsForUserW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const GetCommandLine = *opaque{};
        pub const FreeEnvironmentStrings = *opaque{};
        pub const GetEnvironmentVariable = *opaque{};
        pub const SetEnvironmentVariable = *opaque{};
        pub const ExpandEnvironmentStrings = *opaque{};
        pub const SetCurrentDirectory = *opaque{};
        pub const GetCurrentDirectory = *opaque{};
        pub const NeedCurrentDirectoryForExePath = *opaque{};
        pub const ExpandEnvironmentStringsForUser = *opaque{};
    } else struct {
        pub const GetCommandLine = @compileError("'GetCommandLine' requires that UNICODE be set to true or false in the root module");
        pub const FreeEnvironmentStrings = @compileError("'FreeEnvironmentStrings' requires that UNICODE be set to true or false in the root module");
        pub const GetEnvironmentVariable = @compileError("'GetEnvironmentVariable' requires that UNICODE be set to true or false in the root module");
        pub const SetEnvironmentVariable = @compileError("'SetEnvironmentVariable' requires that UNICODE be set to true or false in the root module");
        pub const ExpandEnvironmentStrings = @compileError("'ExpandEnvironmentStrings' requires that UNICODE be set to true or false in the root module");
        pub const SetCurrentDirectory = @compileError("'SetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const GetCurrentDirectory = @compileError("'GetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const NeedCurrentDirectoryForExePath = @compileError("'NeedCurrentDirectoryForExePath' requires that UNICODE be set to true or false in the root module");
        pub const ExpandEnvironmentStringsForUser = @compileError("'ExpandEnvironmentStringsForUser' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (4)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const HANDLE = @import("../foundation.zig").HANDLE;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
