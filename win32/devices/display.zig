//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (191)
//--------------------------------------------------------------------------------
pub const GUID_DEVINTERFACE_DISPLAY_ADAPTER = Guid.initString("5b45201d-f2f2-4f3b-85bb-30ff1f953599");
pub const GUID_DEVINTERFACE_MONITOR = Guid.initString("e6f07b5f-ee97-4a90-b076-33f57bf4eaa7");
pub const GUID_DISPLAY_DEVICE_ARRIVAL = Guid.initString("1ca05180-a699-450a-9a0c-de4fbe3ddd89");
pub const GUID_DEVINTERFACE_VIDEO_OUTPUT_ARRIVAL = Guid.initString("1ad9e4f0-f88d-4360-bab9-4c2d55e564cd");
pub const DEVPKEY_IndirectDisplay = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("c50a3f10-aa5c-4247-b830-d6a6f8eaa310"), .pid = 1 };
pub const DEVPKEY_Device_TerminalLuid = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("c50a3f10-aa5c-4247-b830-d6a6f8eaa310"), .pid = 2 };
pub const DEVPKEY_Device_AdapterLuid = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("c50a3f10-aa5c-4247-b830-d6a6f8eaa310"), .pid = 3 };
pub const DEVPKEY_Device_ActivityId = PROPERTYKEY { .fmtid = @import("../zig.zig").Guid.initString("c50a3f10-aa5c-4247-b830-d6a6f8eaa310"), .pid = 4 };
pub const INDIRECT_DISPLAY_INFO_FLAGS_CREATED_IDDCX_ADAPTER = @as(u32, 1);
pub const IOCTL_VIDEO_DISABLE_VDM = @as(u32, 2293764);
pub const IOCTL_VIDEO_REGISTER_VDM = @as(u32, 2293768);
pub const IOCTL_VIDEO_SET_OUTPUT_DEVICE_POWER_STATE = @as(u32, 2293772);
pub const IOCTL_VIDEO_GET_OUTPUT_DEVICE_POWER_STATE = @as(u32, 2293776);
pub const IOCTL_VIDEO_MONITOR_DEVICE = @as(u32, 2293780);
pub const IOCTL_VIDEO_ENUM_MONITOR_PDO = @as(u32, 2293784);
pub const IOCTL_VIDEO_INIT_WIN32K_CALLBACKS = @as(u32, 2293788);
pub const IOCTL_VIDEO_IS_VGA_DEVICE = @as(u32, 2293796);
pub const IOCTL_VIDEO_USE_DEVICE_IN_SESSION = @as(u32, 2293800);
pub const IOCTL_VIDEO_PREPARE_FOR_EARECOVERY = @as(u32, 2293804);
pub const IOCTL_VIDEO_ENABLE_VDM = @as(u32, 2293760);
pub const IOCTL_VIDEO_SAVE_HARDWARE_STATE = @as(u32, 2294272);
pub const IOCTL_VIDEO_RESTORE_HARDWARE_STATE = @as(u32, 2294276);
pub const IOCTL_VIDEO_HANDLE_VIDEOPARAMETERS = @as(u32, 2293792);
pub const IOCTL_VIDEO_QUERY_AVAIL_MODES = @as(u32, 2294784);
pub const IOCTL_VIDEO_QUERY_NUM_AVAIL_MODES = @as(u32, 2294788);
pub const IOCTL_VIDEO_QUERY_CURRENT_MODE = @as(u32, 2294792);
pub const IOCTL_VIDEO_SET_CURRENT_MODE = @as(u32, 2294796);
pub const IOCTL_VIDEO_RESET_DEVICE = @as(u32, 2294800);
pub const IOCTL_VIDEO_LOAD_AND_SET_FONT = @as(u32, 2294804);
pub const IOCTL_VIDEO_SET_PALETTE_REGISTERS = @as(u32, 2294808);
pub const IOCTL_VIDEO_SET_COLOR_REGISTERS = @as(u32, 2294812);
pub const IOCTL_VIDEO_ENABLE_CURSOR = @as(u32, 2294816);
pub const IOCTL_VIDEO_DISABLE_CURSOR = @as(u32, 2294820);
pub const IOCTL_VIDEO_SET_CURSOR_ATTR = @as(u32, 2294824);
pub const IOCTL_VIDEO_QUERY_CURSOR_ATTR = @as(u32, 2294828);
pub const IOCTL_VIDEO_SET_CURSOR_POSITION = @as(u32, 2294832);
pub const IOCTL_VIDEO_QUERY_CURSOR_POSITION = @as(u32, 2294836);
pub const IOCTL_VIDEO_ENABLE_POINTER = @as(u32, 2294840);
pub const IOCTL_VIDEO_DISABLE_POINTER = @as(u32, 2294844);
pub const IOCTL_VIDEO_SET_POINTER_ATTR = @as(u32, 2294848);
pub const IOCTL_VIDEO_QUERY_POINTER_ATTR = @as(u32, 2294852);
pub const IOCTL_VIDEO_SET_POINTER_POSITION = @as(u32, 2294856);
pub const IOCTL_VIDEO_QUERY_POINTER_POSITION = @as(u32, 2294860);
pub const IOCTL_VIDEO_QUERY_POINTER_CAPABILITIES = @as(u32, 2294864);
pub const IOCTL_VIDEO_GET_BANK_SELECT_CODE = @as(u32, 2294868);
pub const IOCTL_VIDEO_MAP_VIDEO_MEMORY = @as(u32, 2294872);
pub const IOCTL_VIDEO_UNMAP_VIDEO_MEMORY = @as(u32, 2294876);
pub const IOCTL_VIDEO_QUERY_PUBLIC_ACCESS_RANGES = @as(u32, 2294880);
pub const IOCTL_VIDEO_FREE_PUBLIC_ACCESS_RANGES = @as(u32, 2294884);
pub const IOCTL_VIDEO_QUERY_COLOR_CAPABILITIES = @as(u32, 2294888);
pub const IOCTL_VIDEO_SET_POWER_MANAGEMENT = @as(u32, 2294892);
pub const IOCTL_VIDEO_GET_POWER_MANAGEMENT = @as(u32, 2294896);
pub const IOCTL_VIDEO_SHARE_VIDEO_MEMORY = @as(u32, 2294900);
pub const IOCTL_VIDEO_UNSHARE_VIDEO_MEMORY = @as(u32, 2294904);
pub const IOCTL_VIDEO_SET_COLOR_LUT_DATA = @as(u32, 2294908);
pub const IOCTL_VIDEO_GET_CHILD_STATE = @as(u32, 2294912);
pub const IOCTL_VIDEO_VALIDATE_CHILD_STATE_CONFIGURATION = @as(u32, 2294916);
pub const IOCTL_VIDEO_SET_CHILD_STATE_CONFIGURATION = @as(u32, 2294920);
pub const IOCTL_VIDEO_SWITCH_DUALVIEW = @as(u32, 2294924);
pub const IOCTL_VIDEO_SET_BANK_POSITION = @as(u32, 2294928);
pub const IOCTL_VIDEO_QUERY_SUPPORTED_BRIGHTNESS = @as(u32, 2294932);
pub const IOCTL_VIDEO_QUERY_DISPLAY_BRIGHTNESS = @as(u32, 2294936);
pub const IOCTL_VIDEO_SET_DISPLAY_BRIGHTNESS = @as(u32, 2294940);
pub const IOCTL_FSVIDEO_COPY_FRAME_BUFFER = @as(u32, 3409920);
pub const IOCTL_FSVIDEO_WRITE_TO_FRAME_BUFFER = @as(u32, 3409924);
pub const IOCTL_FSVIDEO_REVERSE_MOUSE_POINTER = @as(u32, 3409928);
pub const IOCTL_FSVIDEO_SET_CURRENT_MODE = @as(u32, 3409932);
pub const IOCTL_FSVIDEO_SET_SCREEN_INFORMATION = @as(u32, 3409936);
pub const IOCTL_FSVIDEO_SET_CURSOR_POSITION = @as(u32, 3409940);
pub const IOCTL_PANEL_QUERY_BRIGHTNESS_CAPS = @as(u32, 2296832);
pub const IOCTL_PANEL_QUERY_BRIGHTNESS_RANGES = @as(u32, 2296836);
pub const IOCTL_PANEL_GET_BRIGHTNESS = @as(u32, 2296840);
pub const IOCTL_PANEL_SET_BRIGHTNESS = @as(u32, 2296844);
pub const IOCTL_PANEL_SET_BRIGHTNESS_STATE = @as(u32, 2296848);
pub const IOCTL_PANEL_SET_BACKLIGHT_OPTIMIZATION = @as(u32, 2296852);
pub const IOCTL_PANEL_GET_BACKLIGHT_REDUCTION = @as(u32, 2296856);
pub const IOCTL_COLORSPACE_TRANSFORM_QUERY_TARGET_CAPS = @as(u32, 2297856);
pub const IOCTL_COLORSPACE_TRANSFORM_SET = @as(u32, 2297860);
pub const IOCTL_SET_ACTIVE_COLOR_PROFILE_NAME = @as(u32, 2297864);
pub const IOCTL_MIPI_DSI_QUERY_CAPS = @as(u32, 2298880);
pub const IOCTL_MIPI_DSI_TRANSMISSION = @as(u32, 2298884);
pub const IOCTL_MIPI_DSI_RESET = @as(u32, 2298888);
pub const DXGK_WIN32K_PARAM_FLAG_UPDATEREGISTRY = @as(u32, 1);
pub const DXGK_WIN32K_PARAM_FLAG_MODESWITCH = @as(u32, 2);
pub const DXGK_WIN32K_PARAM_FLAG_DISABLEVIEW = @as(u32, 4);
pub const VIDEO_DUALVIEW_REMOVABLE = @as(u32, 1);
pub const VIDEO_DUALVIEW_PRIMARY = @as(u32, 2147483648);
pub const VIDEO_DUALVIEW_SECONDARY = @as(u32, 1073741824);
pub const VIDEO_DUALVIEW_WDDM_VGA = @as(u32, 536870912);
pub const VIDEO_STATE_NON_STANDARD_VGA = @as(u32, 1);
pub const VIDEO_STATE_UNEMULATED_VGA_STATE = @as(u32, 2);
pub const VIDEO_STATE_PACKED_CHAIN4_MODE = @as(u32, 4);
pub const VIDEO_MODE_NO_ZERO_MEMORY = @as(u32, 2147483648);
pub const VIDEO_MODE_MAP_MEM_LINEAR = @as(u32, 1073741824);
pub const VIDEO_MODE_COLOR = @as(u32, 1);
pub const VIDEO_MODE_GRAPHICS = @as(u32, 2);
pub const VIDEO_MODE_PALETTE_DRIVEN = @as(u32, 4);
pub const VIDEO_MODE_MANAGED_PALETTE = @as(u32, 8);
pub const VIDEO_MODE_INTERLACED = @as(u32, 16);
pub const VIDEO_MODE_NO_OFF_SCREEN = @as(u32, 32);
pub const VIDEO_MODE_NO_64_BIT_ACCESS = @as(u32, 64);
pub const VIDEO_MODE_BANKED = @as(u32, 128);
pub const VIDEO_MODE_LINEAR = @as(u32, 256);
pub const VIDEO_MODE_ASYNC_POINTER = @as(u32, 1);
pub const VIDEO_MODE_MONO_POINTER = @as(u32, 2);
pub const VIDEO_MODE_COLOR_POINTER = @as(u32, 4);
pub const VIDEO_MODE_ANIMATE_START = @as(u32, 8);
pub const VIDEO_MODE_ANIMATE_UPDATE = @as(u32, 16);
pub const PLANAR_HC = @as(u32, 1);
pub const VIDEO_DEVICE_COLOR = @as(u32, 1);
pub const VIDEO_OPTIONAL_GAMMET_TABLE = @as(u32, 2);
pub const VIDEO_COLOR_LUT_DATA_FORMAT_RGB256WORDS = @as(u32, 1);
pub const VIDEO_COLOR_LUT_DATA_FORMAT_PRIVATEFORMAT = @as(u32, 2147483648);
pub const DISPLAYPOLICY_AC = @as(u32, 1);
pub const DISPLAYPOLICY_DC = @as(u32, 2);
pub const CHAR_TYPE_SBCS = @as(u32, 0);
pub const CHAR_TYPE_LEADING = @as(u32, 2);
pub const CHAR_TYPE_TRAILING = @as(u32, 3);
pub const BITMAP_BITS_BYTE_ALIGN = @as(u32, 8);
pub const BITMAP_BITS_WORD_ALIGN = @as(u32, 16);
pub const BITMAP_ARRAY_BYTE = @as(u32, 3);
pub const BITMAP_PLANES = @as(u32, 1);
pub const BITMAP_BITS_PIXEL = @as(u32, 1);
pub const VIDEO_REASON_NONE = @as(u32, 0);
pub const VIDEO_REASON_POLICY1 = @as(u32, 1);
pub const VIDEO_REASON_POLICY2 = @as(u32, 2);
pub const VIDEO_REASON_POLICY3 = @as(u32, 3);
pub const VIDEO_REASON_POLICY4 = @as(u32, 4);
pub const VIDEO_REASON_LOCK = @as(u32, 5);
pub const VIDEO_REASON_FAILED_ROTATION = @as(u32, 5);
pub const VIDEO_REASON_ALLOCATION = @as(u32, 6);
pub const VIDEO_REASON_SCRATCH = @as(u32, 8);
pub const VIDEO_REASON_CONFIGURATION = @as(u32, 9);
pub const BRIGHTNESS_MAX_LEVEL_COUNT = @as(u32, 103);
pub const BRIGHTNESS_MAX_NIT_RANGE_COUNT = @as(u32, 16);
pub const DSI_PACKET_EMBEDDED_PAYLOAD_SIZE = @as(u32, 8);
pub const MAX_PACKET_COUNT = @as(u32, 128);
pub const DSI_INVALID_PACKET_INDEX = @as(u32, 255);
pub const DSI_SOT_ERROR = @as(u32, 1);
pub const DSI_SOT_SYNC_ERROR = @as(u32, 2);
pub const DSI_EOT_SYNC_ERROR = @as(u32, 4);
pub const DSI_ESCAPE_MODE_ENTRY_COMMAND_ERROR = @as(u32, 8);
pub const DSI_LOW_POWER_TRANSMIT_SYNC_ERROR = @as(u32, 16);
pub const DSI_PERIPHERAL_TIMEOUT_ERROR = @as(u32, 32);
pub const DSI_FALSE_CONTROL_ERROR = @as(u32, 64);
pub const DSI_CONTENTION_DETECTED = @as(u32, 128);
pub const DSI_CHECKSUM_ERROR_CORRECTED = @as(u32, 256);
pub const DSI_CHECKSUM_ERROR_NOT_CORRECTED = @as(u32, 512);
pub const DSI_LONG_PACKET_PAYLOAD_CHECKSUM_ERROR = @as(u32, 1024);
pub const DSI_DSI_DATA_TYPE_NOT_RECOGNIZED = @as(u32, 2048);
pub const DSI_DSI_VC_ID_INVALID = @as(u32, 4096);
pub const DSI_INVALID_TRANSMISSION_LENGTH = @as(u32, 8192);
pub const DSI_DSI_PROTOCOL_VIOLATION = @as(u32, 32768);
pub const HOST_DSI_DEVICE_NOT_READY = @as(u32, 1);
pub const HOST_DSI_INTERFACE_RESET = @as(u32, 2);
pub const HOST_DSI_DEVICE_RESET = @as(u32, 4);
pub const HOST_DSI_TRANSMISSION_CANCELLED = @as(u32, 16);
pub const HOST_DSI_TRANSMISSION_DROPPED = @as(u32, 32);
pub const HOST_DSI_TRANSMISSION_TIMEOUT = @as(u32, 64);
pub const HOST_DSI_INVALID_TRANSMISSION = @as(u32, 256);
pub const HOST_DSI_OS_REJECTED_PACKET = @as(u32, 512);
pub const HOST_DSI_DRIVER_REJECTED_PACKET = @as(u32, 1024);
pub const HOST_DSI_BAD_TRANSMISSION_MODE = @as(u32, 4096);
pub const GUID_MONITOR_OVERRIDE_PSEUDO_SPECIALIZED = Guid.initString("f196c02f-f86f-4f9a-aa15-e9cebdfe3b96");
pub const SURFACEALIGN_DISCARDABLE = @as(i32, 1);
pub const VMEMHEAP_LINEAR = @as(i32, 1);
pub const VMEMHEAP_RECTANGULAR = @as(i32, 2);
pub const VMEMHEAP_ALIGNMENT = @as(i32, 4);
pub const MC_CAPS_NONE = @as(u32, 0);
pub const MC_CAPS_MONITOR_TECHNOLOGY_TYPE = @as(u32, 1);
pub const MC_CAPS_BRIGHTNESS = @as(u32, 2);
pub const MC_CAPS_CONTRAST = @as(u32, 4);
pub const MC_CAPS_COLOR_TEMPERATURE = @as(u32, 8);
pub const MC_CAPS_RED_GREEN_BLUE_GAIN = @as(u32, 16);
pub const MC_CAPS_RED_GREEN_BLUE_DRIVE = @as(u32, 32);
pub const MC_CAPS_DEGAUSS = @as(u32, 64);
pub const MC_CAPS_DISPLAY_AREA_POSITION = @as(u32, 128);
pub const MC_CAPS_DISPLAY_AREA_SIZE = @as(u32, 256);
pub const MC_CAPS_RESTORE_FACTORY_DEFAULTS = @as(u32, 1024);
pub const MC_CAPS_RESTORE_FACTORY_COLOR_DEFAULTS = @as(u32, 2048);
pub const MC_RESTORE_FACTORY_DEFAULTS_ENABLES_MONITOR_SETTINGS = @as(u32, 4096);
pub const MC_SUPPORTED_COLOR_TEMPERATURE_NONE = @as(u32, 0);
pub const MC_SUPPORTED_COLOR_TEMPERATURE_4000K = @as(u32, 1);
pub const MC_SUPPORTED_COLOR_TEMPERATURE_5000K = @as(u32, 2);
pub const MC_SUPPORTED_COLOR_TEMPERATURE_6500K = @as(u32, 4);
pub const MC_SUPPORTED_COLOR_TEMPERATURE_7500K = @as(u32, 8);
pub const MC_SUPPORTED_COLOR_TEMPERATURE_8200K = @as(u32, 16);
pub const MC_SUPPORTED_COLOR_TEMPERATURE_9300K = @as(u32, 32);
pub const MC_SUPPORTED_COLOR_TEMPERATURE_10000K = @as(u32, 64);
pub const MC_SUPPORTED_COLOR_TEMPERATURE_11500K = @as(u32, 128);
pub const PHYSICAL_MONITOR_DESCRIPTION_SIZE = @as(u32, 128);

//--------------------------------------------------------------------------------
// Section: Types (109)
//--------------------------------------------------------------------------------
pub const INDIRECT_DISPLAY_INFO = extern struct {
    DisplayAdapterLuid: LUID,
    Flags: u32,
    NumMonitors: u32,
    DisplayAdapterTargetBase: u32,
};

pub const VIDEO_VDM = extern struct {
    ProcessHandle: ?HANDLE,
};

pub const VIDEO_REGISTER_VDM = extern struct {
    MinimumStateSize: u32,
};

pub const VIDEO_MONITOR_DESCRIPTOR = extern struct {
    DescriptorSize: u32,
    Descriptor: [1]u8,
};

pub const VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE = enum(i32) {
    PowerNotifyCallout = 1,
    EnumChildPdoNotifyCallout = 3,
    FindAdapterCallout = 4,
    PnpNotifyCallout = 7,
    DxgkDisplaySwitchCallout = 8,
    DxgkFindAdapterTdrCallout = 10,
    DxgkHardwareProtectionTeardown = 11,
    RepaintDesktop = 12,
    UpdateCursor = 13,
    DisableMultiPlaneOverlay = 14,
    DesktopDuplicationChange = 15,
    BlackScreenDiagnostics = 16,
};
pub const VideoPowerNotifyCallout = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.PowerNotifyCallout;
pub const VideoEnumChildPdoNotifyCallout = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.EnumChildPdoNotifyCallout;
pub const VideoFindAdapterCallout = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.FindAdapterCallout;
pub const VideoPnpNotifyCallout = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.PnpNotifyCallout;
pub const VideoDxgkDisplaySwitchCallout = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.DxgkDisplaySwitchCallout;
pub const VideoDxgkFindAdapterTdrCallout = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.DxgkFindAdapterTdrCallout;
pub const VideoDxgkHardwareProtectionTeardown = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.DxgkHardwareProtectionTeardown;
pub const VideoRepaintDesktop = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.RepaintDesktop;
pub const VideoUpdateCursor = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.UpdateCursor;
pub const VideoDisableMultiPlaneOverlay = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.DisableMultiPlaneOverlay;
pub const VideoDesktopDuplicationChange = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.DesktopDuplicationChange;
pub const VideoBlackScreenDiagnostics = VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE.BlackScreenDiagnostics;

pub const BlackScreenDiagnosticsCalloutParam = enum(i32) {
    agnosticsData = 1,
    splayRecovery = 2,
};
pub const BlackScreenDiagnosticsData = BlackScreenDiagnosticsCalloutParam.agnosticsData;
pub const BlackScreenDisplayRecovery = BlackScreenDiagnosticsCalloutParam.splayRecovery;

pub const DXGK_WIN32K_PARAM_DATA = extern struct {
    PathsArray: ?*c_void,
    ModesArray: ?*c_void,
    NumPathArrayElements: u32,
    NumModeArrayElements: u32,
    SDCFlags: u32,
};

pub const VIDEO_WIN32K_CALLBACKS_PARAMS = extern struct {
    CalloutType: VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE,
    PhysDisp: ?*c_void,
    Param: usize,
    Status: i32,
    LockUserSession: BOOLEAN,
    IsPostDevice: BOOLEAN,
    SurpriseRemoval: BOOLEAN,
    WaitForQueueReady: BOOLEAN,
};

pub const PVIDEO_WIN32K_CALLOUT = fn(
    Params: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const VIDEO_WIN32K_CALLBACKS = extern struct {
    PhysDisp: ?*c_void,
    Callout: ?PVIDEO_WIN32K_CALLOUT,
    bACPI: u32,
    pPhysDeviceObject: ?HANDLE,
    DualviewFlags: u32,
};

pub const VIDEO_DEVICE_SESSION_STATUS = extern struct {
    bEnable: u32,
    bSuccess: u32,
};

pub const VIDEO_HARDWARE_STATE_HEADER = extern struct {
    Length: u32,
    PortValue: [48]u8,
    AttribIndexDataState: u32,
    BasicSequencerOffset: u32,
    BasicCrtContOffset: u32,
    BasicGraphContOffset: u32,
    BasicAttribContOffset: u32,
    BasicDacOffset: u32,
    BasicLatchesOffset: u32,
    ExtendedSequencerOffset: u32,
    ExtendedCrtContOffset: u32,
    ExtendedGraphContOffset: u32,
    ExtendedAttribContOffset: u32,
    ExtendedDacOffset: u32,
    ExtendedValidatorStateOffset: u32,
    ExtendedMiscDataOffset: u32,
    PlaneLength: u32,
    Plane1Offset: u32,
    Plane2Offset: u32,
    Plane3Offset: u32,
    Plane4Offset: u32,
    VGAStateFlags: u32,
    DIBOffset: u32,
    DIBBitsPerPixel: u32,
    DIBXResolution: u32,
    DIBYResolution: u32,
    DIBXlatOffset: u32,
    DIBXlatLength: u32,
    VesaInfoOffset: u32,
    FrameBufferData: ?*c_void,
};

pub const VIDEO_HARDWARE_STATE = extern struct {
    StateHeader: ?*VIDEO_HARDWARE_STATE_HEADER,
    StateLength: u32,
};

pub const VIDEO_NUM_MODES = extern struct {
    NumModes: u32,
    ModeInformationLength: u32,
};

pub const VIDEO_MODE = extern struct {
    RequestedMode: u32,
};

pub const VIDEO_MODE_INFORMATION = extern struct {
    Length: u32,
    ModeIndex: u32,
    VisScreenWidth: u32,
    VisScreenHeight: u32,
    ScreenStride: u32,
    NumberOfPlanes: u32,
    BitsPerPlane: u32,
    Frequency: u32,
    XMillimeter: u32,
    YMillimeter: u32,
    NumberRedBits: u32,
    NumberGreenBits: u32,
    NumberBlueBits: u32,
    RedMask: u32,
    GreenMask: u32,
    BlueMask: u32,
    AttributeFlags: u32,
    VideoMemoryBitmapWidth: u32,
    VideoMemoryBitmapHeight: u32,
    DriverSpecificAttributeFlags: u32,
};

pub const VIDEO_LOAD_FONT_INFORMATION = extern struct {
    WidthInPixels: u16,
    HeightInPixels: u16,
    FontSize: u32,
    Font: [1]u8,
};

pub const VIDEO_PALETTE_DATA = extern struct {
    NumEntries: u16,
    FirstEntry: u16,
    Colors: [1]u16,
};

pub const VIDEO_CLUTDATA = extern struct {
    Red: u8,
    Green: u8,
    Blue: u8,
    Unused: u8,
};

pub const VIDEO_CLUT = extern struct {
    NumEntries: u16,
    FirstEntry: u16,
    LookupTable: [1]extern union {
        RgbArray: VIDEO_CLUTDATA,
        RgbLong: u32,
    },
};

pub const VIDEO_CURSOR_POSITION = extern struct {
    Column: i16,
    Row: i16,
};

pub const VIDEO_CURSOR_ATTRIBUTES = extern struct {
    Width: u16,
    Height: u16,
    Column: i16,
    Row: i16,
    Rate: u8,
    Enable: u8,
};

pub const VIDEO_POINTER_POSITION = extern struct {
    Column: i16,
    Row: i16,
};

pub const VIDEO_POINTER_ATTRIBUTES = extern struct {
    Flags: u32,
    Width: u32,
    Height: u32,
    WidthInBytes: u32,
    Enable: u32,
    Column: i16,
    Row: i16,
    Pixels: [1]u8,
};

pub const VIDEO_POINTER_CAPABILITIES = extern struct {
    Flags: u32,
    MaxWidth: u32,
    MaxHeight: u32,
    HWPtrBitmapStart: u32,
    HWPtrBitmapEnd: u32,
};

pub const VIDEO_BANK_SELECT = extern struct {
    Length: u32,
    Size: u32,
    BankingFlags: u32,
    BankingType: u32,
    PlanarHCBankingType: u32,
    BitmapWidthInBytes: u32,
    BitmapSize: u32,
    Granularity: u32,
    PlanarHCGranularity: u32,
    CodeOffset: u32,
    PlanarHCBankCodeOffset: u32,
    PlanarHCEnableCodeOffset: u32,
    PlanarHCDisableCodeOffset: u32,
};

pub const VIDEO_BANK_TYPE = enum(i32) {
    VideoNotBanked = 0,
    VideoBanked1RW = 1,
    VideoBanked1R1W = 2,
    VideoBanked2RW = 3,
    NumVideoBankTypes = 4,
};
pub const VideoNotBanked = VIDEO_BANK_TYPE.VideoNotBanked;
pub const VideoBanked1RW = VIDEO_BANK_TYPE.VideoBanked1RW;
pub const VideoBanked1R1W = VIDEO_BANK_TYPE.VideoBanked1R1W;
pub const VideoBanked2RW = VIDEO_BANK_TYPE.VideoBanked2RW;
pub const NumVideoBankTypes = VIDEO_BANK_TYPE.NumVideoBankTypes;

pub const VIDEO_MEMORY = extern struct {
    RequestedVirtualAddress: ?*c_void,
};

pub const VIDEO_SHARE_MEMORY = extern struct {
    ProcessHandle: ?HANDLE,
    ViewOffset: u32,
    ViewSize: u32,
    RequestedVirtualAddress: ?*c_void,
};

pub const VIDEO_SHARE_MEMORY_INFORMATION = extern struct {
    SharedViewOffset: u32,
    SharedViewSize: u32,
    VirtualAddress: ?*c_void,
};

pub const VIDEO_MEMORY_INFORMATION = extern struct {
    VideoRamBase: ?*c_void,
    VideoRamLength: u32,
    FrameBufferBase: ?*c_void,
    FrameBufferLength: u32,
};

pub const VIDEO_PUBLIC_ACCESS_RANGES = extern struct {
    InIoSpace: u32,
    MappedInIoSpace: u32,
    VirtualAddress: ?*c_void,
};

pub const VIDEO_COLOR_CAPABILITIES = extern struct {
    Length: u32,
    AttributeFlags: u32,
    RedPhosphoreDecay: i32,
    GreenPhosphoreDecay: i32,
    BluePhosphoreDecay: i32,
    WhiteChromaticity_x: i32,
    WhiteChromaticity_y: i32,
    WhiteChromaticity_Y: i32,
    RedChromaticity_x: i32,
    RedChromaticity_y: i32,
    GreenChromaticity_x: i32,
    GreenChromaticity_y: i32,
    BlueChromaticity_x: i32,
    BlueChromaticity_y: i32,
    WhiteGamma: i32,
    RedGamma: i32,
    GreenGamma: i32,
    BlueGamma: i32,
};

pub const VIDEO_POWER_STATE = enum(i32) {
    Unspecified = 0,
    On = 1,
    StandBy = 2,
    Suspend = 3,
    Off = 4,
    Hibernate = 5,
    Shutdown = 6,
    Maximum = 7,
};
pub const VideoPowerUnspecified = VIDEO_POWER_STATE.Unspecified;
pub const VideoPowerOn = VIDEO_POWER_STATE.On;
pub const VideoPowerStandBy = VIDEO_POWER_STATE.StandBy;
pub const VideoPowerSuspend = VIDEO_POWER_STATE.Suspend;
pub const VideoPowerOff = VIDEO_POWER_STATE.Off;
pub const VideoPowerHibernate = VIDEO_POWER_STATE.Hibernate;
pub const VideoPowerShutdown = VIDEO_POWER_STATE.Shutdown;
pub const VideoPowerMaximum = VIDEO_POWER_STATE.Maximum;

pub const VIDEO_POWER_MANAGEMENT = extern struct {
    Length: u32,
    DPMSVersion: u32,
    PowerState: u32,
};

pub const VIDEO_COLOR_LUT_DATA = extern struct {
    Length: u32,
    LutDataFormat: u32,
    LutData: [1]u8,
};

pub const VIDEO_LUT_RGB256WORDS = extern struct {
    Red: [256]u16,
    Green: [256]u16,
    Blue: [256]u16,
};

pub const BANK_POSITION = extern struct {
    ReadBankPosition: u32,
    WriteBankPosition: u32,
};

pub const DISPLAY_BRIGHTNESS = extern struct {
    ucDisplayPolicy: u8,
    ucACBrightness: u8,
    ucDCBrightness: u8,
};

pub const VIDEO_BRIGHTNESS_POLICY = extern struct {
    DefaultToBiosPolicy: BOOLEAN,
    LevelCount: u8,
    Level: [1]extern struct {
        BatteryLevel: u8,
        Brightness: u8,
    },
};

pub const FSCNTL_SCREEN_INFO = extern struct {
    Position: COORD,
    ScreenSize: COORD,
    nNumberOfChars: u32,
};

pub const FONT_IMAGE_INFO = extern struct {
    FontSize: COORD,
    ImageBits: ?*u8,
};

pub const CHAR_IMAGE_INFO = extern struct {
    CharInfo: CHAR_INFO,
    FontImageInfo: FONT_IMAGE_INFO,
};

pub const VGA_CHAR = extern struct {
    Char: CHAR,
    Attributes: CHAR,
};

pub const FSVIDEO_COPY_FRAME_BUFFER = extern struct {
    SrcScreen: FSCNTL_SCREEN_INFO,
    DestScreen: FSCNTL_SCREEN_INFO,
};

pub const FSVIDEO_WRITE_TO_FRAME_BUFFER = extern struct {
    SrcBuffer: ?*CHAR_IMAGE_INFO,
    DestScreen: FSCNTL_SCREEN_INFO,
};

pub const FSVIDEO_REVERSE_MOUSE_POINTER = extern struct {
    Screen: FSCNTL_SCREEN_INFO,
    dwType: u32,
};

pub const FSVIDEO_MODE_INFORMATION = extern struct {
    VideoMode: VIDEO_MODE_INFORMATION,
    VideoMemory: VIDEO_MEMORY_INFORMATION,
};

pub const FSVIDEO_SCREEN_INFORMATION = extern struct {
    ScreenSize: COORD,
    FontSize: COORD,
};

pub const FSVIDEO_CURSOR_POSITION = extern struct {
    Coord: VIDEO_CURSOR_POSITION,
    dwType: u32,
};

pub const ENG_EVENT = extern struct {
    pKEvent: ?*c_void,
    fFlags: u32,
};

pub const VIDEO_PERFORMANCE_COUNTER = extern struct {
    NbOfAllocationEvicted: [10]u64,
    NbOfAllocationMarked: [10]u64,
    NbOfAllocationRestored: [10]u64,
    KBytesEvicted: [10]u64,
    KBytesMarked: [10]u64,
    KBytesRestored: [10]u64,
    NbProcessCommited: u64,
    NbAllocationCommited: u64,
    NbAllocationMarked: u64,
    KBytesAllocated: u64,
    KBytesAvailable: u64,
    KBytesCurMarked: u64,
    Reference: u64,
    Unreference: u64,
    TrueReference: u64,
    NbOfPageIn: u64,
    KBytesPageIn: u64,
    NbOfPageOut: u64,
    KBytesPageOut: u64,
    NbOfRotateOut: u64,
    KBytesRotateOut: u64,
};

pub const VIDEO_QUERY_PERFORMANCE_COUNTER = extern struct {
    BufferSize: u32,
    Buffer: ?*VIDEO_PERFORMANCE_COUNTER,
};

pub const BRIGHTNESS_INTERFACE_VERSION = enum(i32) {
    @"1" = 1,
    @"2" = 2,
    @"3" = 3,
};
pub const BRIGHTNESS_INTERFACE_VERSION_1 = BRIGHTNESS_INTERFACE_VERSION.@"1";
pub const BRIGHTNESS_INTERFACE_VERSION_2 = BRIGHTNESS_INTERFACE_VERSION.@"2";
pub const BRIGHTNESS_INTERFACE_VERSION_3 = BRIGHTNESS_INTERFACE_VERSION.@"3";

pub const PANEL_QUERY_BRIGHTNESS_CAPS = extern struct {
    Version: BRIGHTNESS_INTERFACE_VERSION,
    Anonymous: extern union {
        Anonymous: extern struct {
            _bitfield: u32,
        },
        Value: u32,
    },
};

pub const BRIGHTNESS_LEVEL = extern struct {
    Count: u8,
    Level: [103]u8,
};

pub const BRIGHTNESS_NIT_RANGE = extern struct {
    MinLevelInMillinit: u32,
    MaxLevelInMillinit: u32,
    StepSizeInMillinit: u32,
};

pub const BRIGHTNESS_NIT_RANGES = extern struct {
    NormalRangeCount: u32,
    RangeCount: u32,
    PreferredMaximumBrightness: u32,
    SupportedRanges: [16]BRIGHTNESS_NIT_RANGE,
};

pub const PANEL_QUERY_BRIGHTNESS_RANGES = extern struct {
    Version: BRIGHTNESS_INTERFACE_VERSION,
    Anonymous: extern union {
        BrightnessLevel: BRIGHTNESS_LEVEL,
        NitRanges: BRIGHTNESS_NIT_RANGES,
    },
};

pub const PANEL_GET_BRIGHTNESS = extern struct {
    Version: BRIGHTNESS_INTERFACE_VERSION,
    Anonymous: extern union {
        Level: u8,
        Anonymous: extern struct {
            CurrentInMillinits: u32,
            TargetInMillinits: u32,
        },
    },
};

pub const CHROMATICITY_COORDINATE = extern struct {
    x: f32,
    y: f32,
};

pub const PANEL_BRIGHTNESS_SENSOR_DATA = extern struct {
    Anonymous: extern union {
        Anonymous: extern struct {
            _bitfield: u32,
        },
        Value: u32,
    },
    AlsReading: f32,
    ChromaticityCoordinate: CHROMATICITY_COORDINATE,
    ColorTemperature: f32,
};

pub const PANEL_SET_BRIGHTNESS = extern struct {
    Version: BRIGHTNESS_INTERFACE_VERSION,
    Anonymous: extern union {
        Level: u8,
        Anonymous: extern struct {
            Millinits: u32,
            TransitionTimeInMs: u32,
            SensorData: PANEL_BRIGHTNESS_SENSOR_DATA,
        },
    },
};

pub const PANEL_SET_BRIGHTNESS_STATE = extern struct {
    Anonymous: extern union {
        Anonymous: extern struct {
            _bitfield: u32,
        },
        Value: u32,
    },
};

pub const BACKLIGHT_OPTIMIZATION_LEVEL = enum(i32) {
    Disable = 0,
    Desktop = 1,
    Dynamic = 2,
    Dimmed = 3,
    EDR = 4,
};
pub const BacklightOptimizationDisable = BACKLIGHT_OPTIMIZATION_LEVEL.Disable;
pub const BacklightOptimizationDesktop = BACKLIGHT_OPTIMIZATION_LEVEL.Desktop;
pub const BacklightOptimizationDynamic = BACKLIGHT_OPTIMIZATION_LEVEL.Dynamic;
pub const BacklightOptimizationDimmed = BACKLIGHT_OPTIMIZATION_LEVEL.Dimmed;
pub const BacklightOptimizationEDR = BACKLIGHT_OPTIMIZATION_LEVEL.EDR;

pub const PANEL_SET_BACKLIGHT_OPTIMIZATION = extern struct {
    Level: BACKLIGHT_OPTIMIZATION_LEVEL,
};

pub const BACKLIGHT_REDUCTION_GAMMA_RAMP = extern struct {
    R: [256]u16,
    G: [256]u16,
    B: [256]u16,
};

pub const PANEL_GET_BACKLIGHT_REDUCTION = extern struct {
    BacklightUsersetting: u16,
    BacklightEffective: u16,
    GammaRamp: BACKLIGHT_REDUCTION_GAMMA_RAMP,
};

pub const COLORSPACE_TRANSFORM_DATA_TYPE = enum(i32) {
    IXED_POINT = 0,
    LOAT = 1,
};
pub const COLORSPACE_TRANSFORM_DATA_TYPE_FIXED_POINT = COLORSPACE_TRANSFORM_DATA_TYPE.IXED_POINT;
pub const COLORSPACE_TRANSFORM_DATA_TYPE_FLOAT = COLORSPACE_TRANSFORM_DATA_TYPE.LOAT;

pub const COLORSPACE_TRANSFORM_DATA_CAP = extern struct {
    DataType: COLORSPACE_TRANSFORM_DATA_TYPE,
    Anonymous: extern union {
        Anonymous1: extern struct {
            _bitfield: u32,
        },
        Anonymous2: extern struct {
            _bitfield: u32,
        },
        Value: u32,
    },
    NumericRangeMin: f32,
    NumericRangeMax: f32,
};

pub const COLORSPACE_TRANSFORM_1DLUT_CAP = extern struct {
    NumberOfLUTEntries: u32,
    DataCap: COLORSPACE_TRANSFORM_DATA_CAP,
};

pub const COLORSPACE_TRANSFORM_MATRIX_CAP = extern struct {
    Anonymous: extern union {
        Anonymous: extern struct {
            _bitfield: u32,
        },
        Value: u32,
    },
    DataCap: COLORSPACE_TRANSFORM_DATA_CAP,
};

pub const COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION = enum(i32) {
    DEFAULT = 0,
    @"1" = 1,
    // NOT_SUPPORTED = 0, this enum value conflicts with DEFAULT
};
pub const COLORSPACE_TRANSFORM_VERSION_DEFAULT = COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION.DEFAULT;
pub const COLORSPACE_TRANSFORM_VERSION_1 = COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION.@"1";
pub const COLORSPACE_TRANSFORM_VERSION_NOT_SUPPORTED = COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION.DEFAULT;

pub const COLORSPACE_TRANSFORM_TARGET_CAPS = extern struct {
    Version: COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION,
    LookupTable1DDegammaCap: COLORSPACE_TRANSFORM_1DLUT_CAP,
    ColorMatrix3x3Cap: COLORSPACE_TRANSFORM_MATRIX_CAP,
    LookupTable1DRegammaCap: COLORSPACE_TRANSFORM_1DLUT_CAP,
};

pub const COLORSPACE_TRANSFORM_TYPE = enum(i32) {
    UNINITIALIZED = 0,
    DEFAULT = 1,
    RGB256x3x16 = 2,
    DXGI_1 = 3,
    MATRIX_3x4 = 4,
    MATRIX_V2 = 5,
};
pub const COLORSPACE_TRANSFORM_TYPE_UNINITIALIZED = COLORSPACE_TRANSFORM_TYPE.UNINITIALIZED;
pub const COLORSPACE_TRANSFORM_TYPE_DEFAULT = COLORSPACE_TRANSFORM_TYPE.DEFAULT;
pub const COLORSPACE_TRANSFORM_TYPE_RGB256x3x16 = COLORSPACE_TRANSFORM_TYPE.RGB256x3x16;
pub const COLORSPACE_TRANSFORM_TYPE_DXGI_1 = COLORSPACE_TRANSFORM_TYPE.DXGI_1;
pub const COLORSPACE_TRANSFORM_TYPE_MATRIX_3x4 = COLORSPACE_TRANSFORM_TYPE.MATRIX_3x4;
pub const COLORSPACE_TRANSFORM_TYPE_MATRIX_V2 = COLORSPACE_TRANSFORM_TYPE.MATRIX_V2;

pub const GAMMA_RAMP_RGB256x3x16 = extern struct {
    Red: [256]u16,
    Green: [256]u16,
    Blue: [256]u16,
};

pub const GAMMA_RAMP_RGB = extern struct {
    Red: f32,
    Green: f32,
    Blue: f32,
};

pub const GAMMA_RAMP_DXGI_1 = extern struct {
    Scale: GAMMA_RAMP_RGB,
    Offset: GAMMA_RAMP_RGB,
    GammaCurve: [1025]GAMMA_RAMP_RGB,
};

pub const COLORSPACE_TRANSFORM_3x4 = extern struct {
    ColorMatrix3x4: [12]f32,
    ScalarMultiplier: f32,
    LookupTable1D: [4096]GAMMA_RAMP_RGB,
};

pub const OUTPUT_WIRE_COLOR_SPACE_TYPE = enum(i32) {
    G22_P709 = 0,
    RESERVED = 4,
    G2084_P2020 = 12,
    G22_P709_WCG = 30,
    G22_P2020 = 31,
    G2084_P2020_HDR10PLUS = 32,
    G2084_P2020_DVLL = 33,
};
pub const OUTPUT_WIRE_COLOR_SPACE_G22_P709 = OUTPUT_WIRE_COLOR_SPACE_TYPE.G22_P709;
pub const OUTPUT_WIRE_COLOR_SPACE_RESERVED = OUTPUT_WIRE_COLOR_SPACE_TYPE.RESERVED;
pub const OUTPUT_WIRE_COLOR_SPACE_G2084_P2020 = OUTPUT_WIRE_COLOR_SPACE_TYPE.G2084_P2020;
pub const OUTPUT_WIRE_COLOR_SPACE_G22_P709_WCG = OUTPUT_WIRE_COLOR_SPACE_TYPE.G22_P709_WCG;
pub const OUTPUT_WIRE_COLOR_SPACE_G22_P2020 = OUTPUT_WIRE_COLOR_SPACE_TYPE.G22_P2020;
pub const OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_HDR10PLUS = OUTPUT_WIRE_COLOR_SPACE_TYPE.G2084_P2020_HDR10PLUS;
pub const OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_DVLL = OUTPUT_WIRE_COLOR_SPACE_TYPE.G2084_P2020_DVLL;

pub const OUTPUT_COLOR_ENCODING = enum(i32) {
    RGB = 0,
    YCBCR444 = 1,
    YCBCR422 = 2,
    YCBCR420 = 3,
    INTENSITY = 4,
    FORCE_UINT32 = -1,
};
pub const OUTPUT_COLOR_ENCODING_RGB = OUTPUT_COLOR_ENCODING.RGB;
pub const OUTPUT_COLOR_ENCODING_YCBCR444 = OUTPUT_COLOR_ENCODING.YCBCR444;
pub const OUTPUT_COLOR_ENCODING_YCBCR422 = OUTPUT_COLOR_ENCODING.YCBCR422;
pub const OUTPUT_COLOR_ENCODING_YCBCR420 = OUTPUT_COLOR_ENCODING.YCBCR420;
pub const OUTPUT_COLOR_ENCODING_INTENSITY = OUTPUT_COLOR_ENCODING.INTENSITY;
pub const OUTPUT_COLOR_ENCODING_FORCE_UINT32 = OUTPUT_COLOR_ENCODING.FORCE_UINT32;

pub const OUTPUT_WIRE_FORMAT = extern struct {
    ColorEncoding: OUTPUT_COLOR_ENCODING,
    BitsPerPixel: u32,
};

pub const COLORSPACE_TRANSFORM_STAGE_CONTROL = enum(i32) {
    No_Change = 0,
    Enable = 1,
    Bypass = 2,
};
pub const ColorSpaceTransformStageControl_No_Change = COLORSPACE_TRANSFORM_STAGE_CONTROL.No_Change;
pub const ColorSpaceTransformStageControl_Enable = COLORSPACE_TRANSFORM_STAGE_CONTROL.Enable;
pub const ColorSpaceTransformStageControl_Bypass = COLORSPACE_TRANSFORM_STAGE_CONTROL.Bypass;

pub const COLORSPACE_TRANSFORM_MATRIX_V2 = extern struct {
    StageControlLookupTable1DDegamma: COLORSPACE_TRANSFORM_STAGE_CONTROL,
    LookupTable1DDegamma: [4096]GAMMA_RAMP_RGB,
    StageControlColorMatrix3x3: COLORSPACE_TRANSFORM_STAGE_CONTROL,
    ColorMatrix3x3: [9]f32,
    StageControlLookupTable1DRegamma: COLORSPACE_TRANSFORM_STAGE_CONTROL,
    LookupTable1DRegamma: [4096]GAMMA_RAMP_RGB,
};

pub const COLORSPACE_TRANSFORM = extern struct {
    Type: COLORSPACE_TRANSFORM_TYPE,
    Data: extern union {
        Rgb256x3x16: GAMMA_RAMP_RGB256x3x16,
        Dxgi1: GAMMA_RAMP_DXGI_1,
        T3x4: COLORSPACE_TRANSFORM_3x4,
        MatrixV2: COLORSPACE_TRANSFORM_MATRIX_V2,
    },
};

pub const COLORSPACE_TRANSFORM_SET_INPUT = extern struct {
    OutputWireColorSpaceExpected: OUTPUT_WIRE_COLOR_SPACE_TYPE,
    OutputWireFormatExpected: OUTPUT_WIRE_FORMAT,
    ColorSpaceTransform: COLORSPACE_TRANSFORM,
};

pub const SET_ACTIVE_COLOR_PROFILE_NAME = extern struct {
    ColorProfileName: [1]u16,
};

pub const MIPI_DSI_CAPS = extern struct {
    DSITypeMajor: u8,
    DSITypeMinor: u8,
    SpecVersionMajor: u8,
    SpecVersionMinor: u8,
    SpecVersionPatch: u8,
    TargetMaximumReturnPacketSize: u16,
    ResultCodeFlags: u8,
    ResultCodeStatus: u8,
    Revision: u8,
    Level: u8,
    DeviceClassHi: u8,
    DeviceClassLo: u8,
    ManufacturerHi: u8,
    ManufacturerLo: u8,
    ProductHi: u8,
    ProductLo: u8,
    LengthHi: u8,
    LengthLo: u8,
};

pub const DSI_CONTROL_TRANSMISSION_MODE = enum(i32) {
    DEFAULT = 0,
    FORCE_LOW_POWER = 1,
    FORCE_HIGH_PERFORMANCE = 2,
};
pub const DCT_DEFAULT = DSI_CONTROL_TRANSMISSION_MODE.DEFAULT;
pub const DCT_FORCE_LOW_POWER = DSI_CONTROL_TRANSMISSION_MODE.FORCE_LOW_POWER;
pub const DCT_FORCE_HIGH_PERFORMANCE = DSI_CONTROL_TRANSMISSION_MODE.FORCE_HIGH_PERFORMANCE;

pub const MIPI_DSI_PACKET = extern struct {
    Anonymous1: extern union {
        DataId: u8,
        Anonymous: extern struct {
            _bitfield: u8,
        },
    },
    Anonymous2: extern union {
        Anonymous: extern struct {
            Data0: u8,
            Data1: u8,
        },
        LongWriteWordCount: u16,
    },
    EccFiller: u8,
    Payload: [8]u8,
};

pub const MIPI_DSI_TRANSMISSION = extern struct {
    TotalBufferSize: u32,
    PacketCount: u8,
    FailedPacket: u8,
    Anonymous: extern struct {
        _bitfield: u16,
    },
    ReadWordCount: u16,
    FinalCommandExtraPayload: u16,
    MipiErrors: u16,
    HostErrors: u16,
    Packets: [1]MIPI_DSI_PACKET,
};

pub const MIPI_DSI_RESET = extern struct {
    Flags: u32,
    Anonymous: extern union {
        Anonymous: extern struct {
            _bitfield: u32,
        },
        Results: u32,
    },
};

pub const SURFACEALIGNMENT = extern struct {
    Anonymous: extern union {
        Linear: extern struct {
            dwStartAlignment: u32,
            dwPitchAlignment: u32,
            dwFlags: u32,
            dwReserved2: u32,
        },
        Rectangular: extern struct {
            dwXAlignment: u32,
            dwYAlignment: u32,
            dwFlags: u32,
            dwReserved2: u32,
        },
    },
};

pub const HEAPALIGNMENT = extern struct {
    dwSize: u32,
    ddsCaps: DDSCAPS,
    dwReserved: u32,
    ExecuteBuffer: SURFACEALIGNMENT,
    Overlay: SURFACEALIGNMENT,
    Texture: SURFACEALIGNMENT,
    ZBuffer: SURFACEALIGNMENT,
    AlphaBuffer: SURFACEALIGNMENT,
    Offscreen: SURFACEALIGNMENT,
    FlipTarget: SURFACEALIGNMENT,
};

pub const DD_GETHEAPALIGNMENTDATA = extern struct {
    dwInstance: usize,
    dwHeap: u32,
    ddRVal: HRESULT,
    GetHeapAlignment: ?*c_void,
    Alignment: HEAPALIGNMENT,
};

pub const VMEML = extern struct {
    next: ?*VMEML,
    ptr: usize,
    size: u32,
    bDiscardable: BOOL,
};

pub const VMEMR = extern struct {
    next: ?*VMEMR,
    prev: ?*VMEMR,
    pUp: ?*VMEMR,
    pDown: ?*VMEMR,
    pLeft: ?*VMEMR,
    pRight: ?*VMEMR,
    ptr: usize,
    size: u32,
    x: u32,
    y: u32,
    cx: u32,
    cy: u32,
    flags: u32,
    pBits: usize,
    bDiscardable: BOOL,
};

pub const VMEMHEAP = extern struct {
    dwFlags: u32,
    stride: u32,
    freeList: ?*c_void,
    allocList: ?*c_void,
    dwTotalSize: u32,
    fpGARTLin: usize,
    fpGARTDev: usize,
    dwCommitedSize: u32,
    dwCoalesceCount: u32,
    Alignment: HEAPALIGNMENT,
    ddsCapsEx: DDSCAPSEX,
    ddsCapsExAlt: DDSCAPSEX,
    liPhysAGPBase: LARGE_INTEGER,
    hdevAGP: ?HANDLE,
    pvPhysRsrv: ?*c_void,
    pAgpCommitMask: ?*u8,
    dwAgpCommitMaskSize: u32,
};

pub const AR_STATE = enum(i32) {
    ENABLED = 0,
    DISABLED = 1,
    SUPPRESSED = 2,
    REMOTESESSION = 4,
    MULTIMON = 8,
    NOSENSOR = 16,
    NOT_SUPPORTED = 32,
    DOCKED = 64,
    LAPTOP = 128,
};
pub const AR_ENABLED = AR_STATE.ENABLED;
pub const AR_DISABLED = AR_STATE.DISABLED;
pub const AR_SUPPRESSED = AR_STATE.SUPPRESSED;
pub const AR_REMOTESESSION = AR_STATE.REMOTESESSION;
pub const AR_MULTIMON = AR_STATE.MULTIMON;
pub const AR_NOSENSOR = AR_STATE.NOSENSOR;
pub const AR_NOT_SUPPORTED = AR_STATE.NOT_SUPPORTED;
pub const AR_DOCKED = AR_STATE.DOCKED;
pub const AR_LAPTOP = AR_STATE.LAPTOP;

pub const ORIENTATION_PREFERENCE = enum(i32) {
    NONE = 0,
    LANDSCAPE = 1,
    PORTRAIT = 2,
    LANDSCAPE_FLIPPED = 4,
    PORTRAIT_FLIPPED = 8,
};
pub const ORIENTATION_PREFERENCE_NONE = ORIENTATION_PREFERENCE.NONE;
pub const ORIENTATION_PREFERENCE_LANDSCAPE = ORIENTATION_PREFERENCE.LANDSCAPE;
pub const ORIENTATION_PREFERENCE_PORTRAIT = ORIENTATION_PREFERENCE.PORTRAIT;
pub const ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = ORIENTATION_PREFERENCE.LANDSCAPE_FLIPPED;
pub const ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = ORIENTATION_PREFERENCE.PORTRAIT_FLIPPED;

pub const PHYSICAL_MONITOR = packed struct {
    hPhysicalMonitor: ?HANDLE,
    szPhysicalMonitorDescription: [128]u16,
};

pub const MC_TIMING_REPORT = packed struct {
    dwHorizontalFrequencyInHZ: u32,
    dwVerticalFrequencyInHZ: u32,
    bTimingStatusByte: u8,
};

pub const MC_VCP_CODE_TYPE = enum(i32) {
    MOMENTARY = 0,
    SET_PARAMETER = 1,
};
pub const MC_MOMENTARY = MC_VCP_CODE_TYPE.MOMENTARY;
pub const MC_SET_PARAMETER = MC_VCP_CODE_TYPE.SET_PARAMETER;

pub const MC_DISPLAY_TECHNOLOGY_TYPE = enum(i32) {
    SHADOW_MASK_CATHODE_RAY_TUBE = 0,
    APERTURE_GRILL_CATHODE_RAY_TUBE = 1,
    THIN_FILM_TRANSISTOR = 2,
    LIQUID_CRYSTAL_ON_SILICON = 3,
    PLASMA = 4,
    ORGANIC_LIGHT_EMITTING_DIODE = 5,
    ELECTROLUMINESCENT = 6,
    MICROELECTROMECHANICAL = 7,
    FIELD_EMISSION_DEVICE = 8,
};
pub const MC_SHADOW_MASK_CATHODE_RAY_TUBE = MC_DISPLAY_TECHNOLOGY_TYPE.SHADOW_MASK_CATHODE_RAY_TUBE;
pub const MC_APERTURE_GRILL_CATHODE_RAY_TUBE = MC_DISPLAY_TECHNOLOGY_TYPE.APERTURE_GRILL_CATHODE_RAY_TUBE;
pub const MC_THIN_FILM_TRANSISTOR = MC_DISPLAY_TECHNOLOGY_TYPE.THIN_FILM_TRANSISTOR;
pub const MC_LIQUID_CRYSTAL_ON_SILICON = MC_DISPLAY_TECHNOLOGY_TYPE.LIQUID_CRYSTAL_ON_SILICON;
pub const MC_PLASMA = MC_DISPLAY_TECHNOLOGY_TYPE.PLASMA;
pub const MC_ORGANIC_LIGHT_EMITTING_DIODE = MC_DISPLAY_TECHNOLOGY_TYPE.ORGANIC_LIGHT_EMITTING_DIODE;
pub const MC_ELECTROLUMINESCENT = MC_DISPLAY_TECHNOLOGY_TYPE.ELECTROLUMINESCENT;
pub const MC_MICROELECTROMECHANICAL = MC_DISPLAY_TECHNOLOGY_TYPE.MICROELECTROMECHANICAL;
pub const MC_FIELD_EMISSION_DEVICE = MC_DISPLAY_TECHNOLOGY_TYPE.FIELD_EMISSION_DEVICE;

pub const MC_DRIVE_TYPE = enum(i32) {
    RED_DRIVE = 0,
    GREEN_DRIVE = 1,
    BLUE_DRIVE = 2,
};
pub const MC_RED_DRIVE = MC_DRIVE_TYPE.RED_DRIVE;
pub const MC_GREEN_DRIVE = MC_DRIVE_TYPE.GREEN_DRIVE;
pub const MC_BLUE_DRIVE = MC_DRIVE_TYPE.BLUE_DRIVE;

pub const MC_GAIN_TYPE = enum(i32) {
    RED_GAIN = 0,
    GREEN_GAIN = 1,
    BLUE_GAIN = 2,
};
pub const MC_RED_GAIN = MC_GAIN_TYPE.RED_GAIN;
pub const MC_GREEN_GAIN = MC_GAIN_TYPE.GREEN_GAIN;
pub const MC_BLUE_GAIN = MC_GAIN_TYPE.BLUE_GAIN;

pub const MC_POSITION_TYPE = enum(i32) {
    HORIZONTAL_POSITION = 0,
    VERTICAL_POSITION = 1,
};
pub const MC_HORIZONTAL_POSITION = MC_POSITION_TYPE.HORIZONTAL_POSITION;
pub const MC_VERTICAL_POSITION = MC_POSITION_TYPE.VERTICAL_POSITION;

pub const MC_SIZE_TYPE = enum(i32) {
    WIDTH = 0,
    HEIGHT = 1,
};
pub const MC_WIDTH = MC_SIZE_TYPE.WIDTH;
pub const MC_HEIGHT = MC_SIZE_TYPE.HEIGHT;

pub const MC_COLOR_TEMPERATURE = enum(i32) {
    UNKNOWN = 0,
    @"4000K" = 1,
    @"5000K" = 2,
    @"6500K" = 3,
    @"7500K" = 4,
    @"8200K" = 5,
    @"9300K" = 6,
    @"10000K" = 7,
    @"11500K" = 8,
};
pub const MC_COLOR_TEMPERATURE_UNKNOWN = MC_COLOR_TEMPERATURE.UNKNOWN;
pub const MC_COLOR_TEMPERATURE_4000K = MC_COLOR_TEMPERATURE.@"4000K";
pub const MC_COLOR_TEMPERATURE_5000K = MC_COLOR_TEMPERATURE.@"5000K";
pub const MC_COLOR_TEMPERATURE_6500K = MC_COLOR_TEMPERATURE.@"6500K";
pub const MC_COLOR_TEMPERATURE_7500K = MC_COLOR_TEMPERATURE.@"7500K";
pub const MC_COLOR_TEMPERATURE_8200K = MC_COLOR_TEMPERATURE.@"8200K";
pub const MC_COLOR_TEMPERATURE_9300K = MC_COLOR_TEMPERATURE.@"9300K";
pub const MC_COLOR_TEMPERATURE_10000K = MC_COLOR_TEMPERATURE.@"10000K";
pub const MC_COLOR_TEMPERATURE_11500K = MC_COLOR_TEMPERATURE.@"11500K";


//--------------------------------------------------------------------------------
// Section: Functions (35)
//--------------------------------------------------------------------------------
pub extern "USER32" fn GetAutoRotationState(
    pState: ?*AR_STATE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetDisplayAutoRotationPreferences(
    pOrientation: ?*ORIENTATION_PREFERENCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetDisplayAutoRotationPreferences(
    orientation: ORIENTATION_PREFERENCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetNumberOfPhysicalMonitorsFromHMONITOR(
    hMonitor: ?HMONITOR,
    pdwNumberOfPhysicalMonitors: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(
    pDirect3DDevice9: ?*IDirect3DDevice9,
    pdwNumberOfPhysicalMonitors: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetPhysicalMonitorsFromHMONITOR(
    hMonitor: ?HMONITOR,
    dwPhysicalMonitorArraySize: u32,
    pPhysicalMonitorArray: [*]PHYSICAL_MONITOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetPhysicalMonitorsFromIDirect3DDevice9(
    pDirect3DDevice9: ?*IDirect3DDevice9,
    dwPhysicalMonitorArraySize: u32,
    pPhysicalMonitorArray: [*]PHYSICAL_MONITOR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn DestroyPhysicalMonitor(
    hMonitor: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn DestroyPhysicalMonitors(
    dwPhysicalMonitorArraySize: u32,
    pPhysicalMonitorArray: [*]PHYSICAL_MONITOR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetVCPFeatureAndVCPFeatureReply(
    hMonitor: ?HANDLE,
    bVCPCode: u8,
    pvct: ?*MC_VCP_CODE_TYPE,
    pdwCurrentValue: ?*u32,
    pdwMaximumValue: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn SetVCPFeature(
    hMonitor: ?HANDLE,
    bVCPCode: u8,
    dwNewValue: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn SaveCurrentSettings(
    hMonitor: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetCapabilitiesStringLength(
    hMonitor: ?HANDLE,
    pdwCapabilitiesStringLengthInCharacters: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn CapabilitiesRequestAndCapabilitiesReply(
    hMonitor: ?HANDLE,
    pszASCIICapabilitiesString: [*:0]u8,
    dwCapabilitiesStringLengthInCharacters: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetTimingReport(
    hMonitor: ?HANDLE,
    pmtrMonitorTimingReport: ?*MC_TIMING_REPORT,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetMonitorCapabilities(
    hMonitor: ?HANDLE,
    pdwMonitorCapabilities: ?*u32,
    pdwSupportedColorTemperatures: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn SaveCurrentMonitorSettings(
    hMonitor: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetMonitorTechnologyType(
    hMonitor: ?HANDLE,
    pdtyDisplayTechnologyType: ?*MC_DISPLAY_TECHNOLOGY_TYPE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetMonitorBrightness(
    hMonitor: ?HANDLE,
    pdwMinimumBrightness: ?*u32,
    pdwCurrentBrightness: ?*u32,
    pdwMaximumBrightness: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetMonitorContrast(
    hMonitor: ?HANDLE,
    pdwMinimumContrast: ?*u32,
    pdwCurrentContrast: ?*u32,
    pdwMaximumContrast: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetMonitorColorTemperature(
    hMonitor: ?HANDLE,
    pctCurrentColorTemperature: ?*MC_COLOR_TEMPERATURE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetMonitorRedGreenOrBlueDrive(
    hMonitor: ?HANDLE,
    dtDriveType: MC_DRIVE_TYPE,
    pdwMinimumDrive: ?*u32,
    pdwCurrentDrive: ?*u32,
    pdwMaximumDrive: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetMonitorRedGreenOrBlueGain(
    hMonitor: ?HANDLE,
    gtGainType: MC_GAIN_TYPE,
    pdwMinimumGain: ?*u32,
    pdwCurrentGain: ?*u32,
    pdwMaximumGain: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn SetMonitorBrightness(
    hMonitor: ?HANDLE,
    dwNewBrightness: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn SetMonitorContrast(
    hMonitor: ?HANDLE,
    dwNewContrast: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn SetMonitorColorTemperature(
    hMonitor: ?HANDLE,
    ctCurrentColorTemperature: MC_COLOR_TEMPERATURE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn SetMonitorRedGreenOrBlueDrive(
    hMonitor: ?HANDLE,
    dtDriveType: MC_DRIVE_TYPE,
    dwNewDrive: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn SetMonitorRedGreenOrBlueGain(
    hMonitor: ?HANDLE,
    gtGainType: MC_GAIN_TYPE,
    dwNewGain: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn DegaussMonitor(
    hMonitor: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetMonitorDisplayAreaSize(
    hMonitor: ?HANDLE,
    stSizeType: MC_SIZE_TYPE,
    pdwMinimumWidthOrHeight: ?*u32,
    pdwCurrentWidthOrHeight: ?*u32,
    pdwMaximumWidthOrHeight: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn GetMonitorDisplayAreaPosition(
    hMonitor: ?HANDLE,
    ptPositionType: MC_POSITION_TYPE,
    pdwMinimumPosition: ?*u32,
    pdwCurrentPosition: ?*u32,
    pdwMaximumPosition: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn SetMonitorDisplayAreaSize(
    hMonitor: ?HANDLE,
    stSizeType: MC_SIZE_TYPE,
    dwNewDisplayAreaWidthOrHeight: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn SetMonitorDisplayAreaPosition(
    hMonitor: ?HANDLE,
    ptPositionType: MC_POSITION_TYPE,
    dwNewPosition: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn RestoreMonitorFactoryColorDefaults(
    hMonitor: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dxva2" fn RestoreMonitorFactoryDefaults(
    hMonitor: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (15)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const CHAR = @import("../system/system_services.zig").CHAR;
const CHAR_INFO = @import("../system/console.zig").CHAR_INFO;
const COORD = @import("../system/console.zig").COORD;
const DDSCAPS = @import("../graphics/direct_draw.zig").DDSCAPS;
const DDSCAPSEX = @import("../graphics/direct_draw.zig").DDSCAPSEX;
const HANDLE = @import("../foundation.zig").HANDLE;
const HMONITOR = @import("../graphics/gdi.zig").HMONITOR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDirect3DDevice9 = @import("../graphics/direct3d9.zig").IDirect3DDevice9;
const LARGE_INTEGER = @import("../system/system_services.zig").LARGE_INTEGER;
const LUID = @import("../system/system_services.zig").LUID;
const PROPERTYKEY = @import("../system/properties_system.zig").PROPERTYKEY;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PVIDEO_WIN32K_CALLOUT")) { _ = PVIDEO_WIN32K_CALLOUT; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
