//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (6133)
//--------------------------------------------------------------------------------
pub const INVALID_HANDLE_VALUE = @import("zig.zig").typedConst(HANDLE, @as(i32, -1));
pub const E_NOTIMPL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467263));
pub const E_OUTOFMEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147024882));
pub const E_INVALIDARG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147024809));
pub const E_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467259));
pub const STRICT = @as(u32, 1);
pub const MAX_PATH = @as(u32, 260);
pub const STATUS_WAIT_0 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 0));
pub const FACILTIY_MUI_ERROR_CODE = @as(u32, 11);
pub const STATUS_SEVERITY_SUCCESS = @as(u32, 0);
pub const STATUS_SEVERITY_INFORMATIONAL = @as(u32, 1);
pub const STATUS_SEVERITY_WARNING = @as(u32, 2);
pub const STATUS_SEVERITY_ERROR = @as(u32, 3);
pub const STATUS_SUCCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 0));
pub const STATUS_WAIT_1 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1));
pub const STATUS_WAIT_2 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 2));
pub const STATUS_WAIT_3 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 3));
pub const STATUS_WAIT_63 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 63));
pub const STATUS_ABANDONED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 128));
pub const STATUS_ABANDONED_WAIT_0 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 128));
pub const STATUS_ABANDONED_WAIT_63 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 191));
pub const STATUS_USER_APC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 192));
pub const STATUS_ALREADY_COMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 255));
pub const STATUS_KERNEL_APC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 256));
pub const STATUS_ALERTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 257));
pub const STATUS_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 258));
pub const STATUS_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 259));
pub const STATUS_REPARSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 260));
pub const STATUS_MORE_ENTRIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 261));
pub const STATUS_NOT_ALL_ASSIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 262));
pub const STATUS_SOME_NOT_MAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 263));
pub const STATUS_OPLOCK_BREAK_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 264));
pub const STATUS_VOLUME_MOUNTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 265));
pub const STATUS_RXACT_COMMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 266));
pub const STATUS_NOTIFY_CLEANUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 267));
pub const STATUS_NOTIFY_ENUM_DIR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 268));
pub const STATUS_NO_QUOTAS_FOR_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 269));
pub const STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 270));
pub const STATUS_PAGE_FAULT_TRANSITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 272));
pub const STATUS_PAGE_FAULT_DEMAND_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 273));
pub const STATUS_PAGE_FAULT_COPY_ON_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 274));
pub const STATUS_PAGE_FAULT_GUARD_PAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 275));
pub const STATUS_PAGE_FAULT_PAGING_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 276));
pub const STATUS_CACHE_PAGE_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 277));
pub const STATUS_CRASH_DUMP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 278));
pub const STATUS_BUFFER_ALL_ZEROS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 279));
pub const STATUS_REPARSE_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 280));
pub const STATUS_RESOURCE_REQUIREMENTS_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 281));
pub const STATUS_TRANSLATION_COMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 288));
pub const STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 289));
pub const STATUS_NOTHING_TO_TERMINATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 290));
pub const STATUS_PROCESS_NOT_IN_JOB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 291));
pub const STATUS_PROCESS_IN_JOB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 292));
pub const STATUS_VOLSNAP_HIBERNATE_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 293));
pub const STATUS_FSFILTER_OP_COMPLETED_SUCCESSFULLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 294));
pub const STATUS_INTERRUPT_VECTOR_ALREADY_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 295));
pub const STATUS_INTERRUPT_STILL_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 296));
pub const STATUS_PROCESS_CLONED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 297));
pub const STATUS_FILE_LOCKED_WITH_ONLY_READERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 298));
pub const STATUS_FILE_LOCKED_WITH_WRITERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 299));
pub const STATUS_VALID_IMAGE_HASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 300));
pub const STATUS_VALID_CATALOG_HASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 301));
pub const STATUS_VALID_STRONG_CODE_HASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 302));
pub const STATUS_GHOSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 303));
pub const STATUS_DATA_OVERWRITTEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 304));
pub const STATUS_RESOURCEMANAGER_READ_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 514));
pub const STATUS_RING_PREVIOUSLY_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 528));
pub const STATUS_RING_PREVIOUSLY_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 529));
pub const STATUS_RING_PREVIOUSLY_ABOVE_QUOTA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 530));
pub const STATUS_RING_NEWLY_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 531));
pub const STATUS_RING_SIGNAL_OPPOSITE_ENDPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 532));
pub const STATUS_OPLOCK_SWITCHED_TO_NEW_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 533));
pub const STATUS_OPLOCK_HANDLE_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 534));
pub const STATUS_WAIT_FOR_OPLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 871));
pub const STATUS_REPARSE_GLOBAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 872));
pub const DBG_EXCEPTION_HANDLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 65537));
pub const DBG_CONTINUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 65538));
pub const STATUS_FLT_IO_COMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1835009));
pub const STATUS_OBJECT_NAME_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741824));
pub const STATUS_THREAD_WAS_SUSPENDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741825));
pub const STATUS_WORKING_SET_LIMIT_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741826));
pub const STATUS_IMAGE_NOT_AT_BASE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741827));
pub const STATUS_RXACT_STATE_CREATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741828));
pub const STATUS_SEGMENT_NOTIFICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741829));
pub const STATUS_LOCAL_USER_SESSION_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741830));
pub const STATUS_BAD_CURRENT_DIRECTORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741831));
pub const STATUS_SERIAL_MORE_WRITES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741832));
pub const STATUS_REGISTRY_RECOVERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741833));
pub const STATUS_FT_READ_RECOVERY_FROM_BACKUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741834));
pub const STATUS_FT_WRITE_RECOVERY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741835));
pub const STATUS_SERIAL_COUNTER_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741836));
pub const STATUS_NULL_LM_PASSWORD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741837));
pub const STATUS_IMAGE_MACHINE_TYPE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741838));
pub const STATUS_RECEIVE_PARTIAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741839));
pub const STATUS_RECEIVE_EXPEDITED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741840));
pub const STATUS_RECEIVE_PARTIAL_EXPEDITED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741841));
pub const STATUS_EVENT_DONE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741842));
pub const STATUS_EVENT_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741843));
pub const STATUS_CHECKING_FILE_SYSTEM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741844));
pub const STATUS_FATAL_APP_EXIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741845));
pub const STATUS_PREDEFINED_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741846));
pub const STATUS_WAS_UNLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741847));
pub const STATUS_SERVICE_NOTIFICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741848));
pub const STATUS_WAS_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741849));
pub const STATUS_LOG_HARD_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741850));
pub const STATUS_ALREADY_WIN32 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741851));
pub const STATUS_WX86_UNSIMULATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741852));
pub const STATUS_WX86_CONTINUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741853));
pub const STATUS_WX86_SINGLE_STEP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741854));
pub const STATUS_WX86_BREAKPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741855));
pub const STATUS_WX86_EXCEPTION_CONTINUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741856));
pub const STATUS_WX86_EXCEPTION_LASTCHANCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741857));
pub const STATUS_WX86_EXCEPTION_CHAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741858));
pub const STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741859));
pub const STATUS_NO_YIELD_PERFORMED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741860));
pub const STATUS_TIMER_RESUME_IGNORED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741861));
pub const STATUS_ARBITRATION_UNHANDLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741862));
pub const STATUS_CARDBUS_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741863));
pub const STATUS_WX86_CREATEWX86TIB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741864));
pub const STATUS_MP_PROCESSOR_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741865));
pub const STATUS_HIBERNATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741866));
pub const STATUS_RESUME_HIBERNATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741867));
pub const STATUS_FIRMWARE_UPDATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741868));
pub const STATUS_DRIVERS_LEAKING_LOCKED_PAGES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741869));
pub const STATUS_MESSAGE_RETRIEVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741870));
pub const STATUS_SYSTEM_POWERSTATE_TRANSITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741871));
pub const STATUS_ALPC_CHECK_COMPLETION_LIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741872));
pub const STATUS_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741873));
pub const STATUS_ACCESS_AUDIT_BY_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741874));
pub const STATUS_ABANDON_HIBERFILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741875));
pub const STATUS_BIZRULES_NOT_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741876));
pub const STATUS_FT_READ_FROM_COPY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741877));
pub const STATUS_IMAGE_AT_DIFFERENT_BASE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741878));
pub const STATUS_PATCH_DEFERRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073741879));
pub const DBG_REPLY_LATER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807361));
pub const DBG_UNABLE_TO_PROVIDE_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807362));
pub const DBG_TERMINATE_THREAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807363));
pub const DBG_TERMINATE_PROCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807364));
pub const DBG_CONTROL_C = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807365));
pub const DBG_PRINTEXCEPTION_C = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807366));
pub const DBG_RIPEXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807367));
pub const DBG_CONTROL_BREAK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807368));
pub const DBG_COMMAND_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807369));
pub const DBG_PRINTEXCEPTION_WIDE_C = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073807370));
pub const STATUS_HEURISTIC_DAMAGE_POSSIBLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075380225));
pub const STATUS_GUARD_PAGE_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483647));
pub const STATUS_DATATYPE_MISALIGNMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483646));
pub const STATUS_BREAKPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483645));
pub const STATUS_SINGLE_STEP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483644));
pub const STATUS_BUFFER_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483643));
pub const STATUS_NO_MORE_FILES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483642));
pub const STATUS_WAKE_SYSTEM_DEBUGGER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483641));
pub const STATUS_HANDLES_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483638));
pub const STATUS_NO_INHERITANCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483637));
pub const STATUS_GUID_SUBSTITUTION_MADE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483636));
pub const STATUS_PARTIAL_COPY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483635));
pub const STATUS_DEVICE_PAPER_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483634));
pub const STATUS_DEVICE_POWERED_OFF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483633));
pub const STATUS_DEVICE_OFF_LINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483632));
pub const STATUS_DEVICE_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483631));
pub const STATUS_NO_MORE_EAS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483630));
pub const STATUS_INVALID_EA_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483629));
pub const STATUS_EA_LIST_INCONSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483628));
pub const STATUS_INVALID_EA_FLAG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483627));
pub const STATUS_VERIFY_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483626));
pub const STATUS_EXTRANEOUS_INFORMATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483625));
pub const STATUS_RXACT_COMMIT_NECESSARY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483624));
pub const STATUS_NO_MORE_ENTRIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483622));
pub const STATUS_FILEMARK_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483621));
pub const STATUS_MEDIA_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483620));
pub const STATUS_BUS_RESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483619));
pub const STATUS_END_OF_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483618));
pub const STATUS_BEGINNING_OF_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483617));
pub const STATUS_MEDIA_CHECK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483616));
pub const STATUS_SETMARK_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483615));
pub const STATUS_NO_DATA_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483614));
pub const STATUS_REDIRECTOR_HAS_OPEN_HANDLES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483613));
pub const STATUS_SERVER_HAS_OPEN_HANDLES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483612));
pub const STATUS_ALREADY_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483611));
pub const STATUS_LONGJUMP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483610));
pub const STATUS_CLEANER_CARTRIDGE_INSTALLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483609));
pub const STATUS_PLUGPLAY_QUERY_VETOED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483608));
pub const STATUS_UNWIND_CONSOLIDATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483607));
pub const STATUS_REGISTRY_HIVE_RECOVERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483606));
pub const STATUS_DLL_MIGHT_BE_INSECURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483605));
pub const STATUS_DLL_MIGHT_BE_INCOMPATIBLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483604));
pub const STATUS_STOPPED_ON_SYMLINK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483603));
pub const STATUS_CANNOT_GRANT_REQUESTED_OPLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483602));
pub const STATUS_NO_ACE_CONDITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483601));
pub const STATUS_DEVICE_SUPPORT_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483600));
pub const STATUS_DEVICE_POWER_CYCLE_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483599));
pub const STATUS_NO_WORK_DONE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483598));
pub const STATUS_RETURN_ADDRESS_HIJACK_ATTEMPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483597));
pub const DBG_EXCEPTION_NOT_HANDLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147418111));
pub const STATUS_CLUSTER_NODE_ALREADY_UP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2146238463));
pub const STATUS_CLUSTER_NODE_ALREADY_DOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2146238462));
pub const STATUS_CLUSTER_NETWORK_ALREADY_ONLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2146238461));
pub const STATUS_CLUSTER_NETWORK_ALREADY_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2146238460));
pub const STATUS_CLUSTER_NODE_ALREADY_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2146238459));
pub const STATUS_FLT_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145648639));
pub const STATUS_FVE_PARTIAL_METADATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145320959));
pub const STATUS_FVE_TRANSIENT_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145320958));
pub const STATUS_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147430656));
pub const STATUS_UNSUCCESSFUL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741823));
pub const STATUS_NOT_IMPLEMENTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741822));
pub const STATUS_INVALID_INFO_CLASS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741821));
pub const STATUS_INFO_LENGTH_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741820));
pub const STATUS_ACCESS_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741819));
pub const STATUS_IN_PAGE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741818));
pub const STATUS_PAGEFILE_QUOTA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741817));
pub const STATUS_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741816));
pub const STATUS_BAD_INITIAL_STACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741815));
pub const STATUS_BAD_INITIAL_PC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741814));
pub const STATUS_INVALID_CID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741813));
pub const STATUS_TIMER_NOT_CANCELED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741812));
pub const STATUS_INVALID_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741811));
pub const STATUS_NO_SUCH_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741810));
pub const STATUS_NO_SUCH_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741809));
pub const STATUS_INVALID_DEVICE_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741808));
pub const STATUS_END_OF_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741807));
pub const STATUS_WRONG_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741806));
pub const STATUS_NO_MEDIA_IN_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741805));
pub const STATUS_UNRECOGNIZED_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741804));
pub const STATUS_NONEXISTENT_SECTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741803));
pub const STATUS_MORE_PROCESSING_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741802));
pub const STATUS_NO_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741801));
pub const STATUS_CONFLICTING_ADDRESSES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741800));
pub const STATUS_NOT_MAPPED_VIEW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741799));
pub const STATUS_UNABLE_TO_FREE_VM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741798));
pub const STATUS_UNABLE_TO_DELETE_SECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741797));
pub const STATUS_INVALID_SYSTEM_SERVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741796));
pub const STATUS_ILLEGAL_INSTRUCTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741795));
pub const STATUS_INVALID_LOCK_SEQUENCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741794));
pub const STATUS_INVALID_VIEW_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741793));
pub const STATUS_INVALID_FILE_FOR_SECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741792));
pub const STATUS_ALREADY_COMMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741791));
pub const STATUS_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741789));
pub const STATUS_OBJECT_TYPE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741788));
pub const STATUS_NONCONTINUABLE_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741787));
pub const STATUS_INVALID_DISPOSITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741786));
pub const STATUS_UNWIND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741785));
pub const STATUS_BAD_STACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741784));
pub const STATUS_INVALID_UNWIND_TARGET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741783));
pub const STATUS_NOT_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741782));
pub const STATUS_PARITY_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741781));
pub const STATUS_UNABLE_TO_DECOMMIT_VM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741780));
pub const STATUS_NOT_COMMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741779));
pub const STATUS_INVALID_PORT_ATTRIBUTES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741778));
pub const STATUS_PORT_MESSAGE_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741777));
pub const STATUS_INVALID_PARAMETER_MIX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741776));
pub const STATUS_INVALID_QUOTA_LOWER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741775));
pub const STATUS_DISK_CORRUPT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741774));
pub const STATUS_OBJECT_NAME_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741773));
pub const STATUS_OBJECT_NAME_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741772));
pub const STATUS_OBJECT_NAME_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741771));
pub const STATUS_PORT_DO_NOT_DISTURB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741770));
pub const STATUS_PORT_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741769));
pub const STATUS_DEVICE_ALREADY_ATTACHED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741768));
pub const STATUS_OBJECT_PATH_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741767));
pub const STATUS_OBJECT_PATH_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741766));
pub const STATUS_OBJECT_PATH_SYNTAX_BAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741765));
pub const STATUS_DATA_OVERRUN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741764));
pub const STATUS_DATA_LATE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741763));
pub const STATUS_DATA_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741762));
pub const STATUS_CRC_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741761));
pub const STATUS_SECTION_TOO_BIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741760));
pub const STATUS_PORT_CONNECTION_REFUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741759));
pub const STATUS_INVALID_PORT_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741758));
pub const STATUS_SHARING_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741757));
pub const STATUS_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741756));
pub const STATUS_INVALID_PAGE_PROTECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741755));
pub const STATUS_MUTANT_NOT_OWNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741754));
pub const STATUS_SEMAPHORE_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741753));
pub const STATUS_PORT_ALREADY_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741752));
pub const STATUS_SECTION_NOT_IMAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741751));
pub const STATUS_SUSPEND_COUNT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741750));
pub const STATUS_THREAD_IS_TERMINATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741749));
pub const STATUS_BAD_WORKING_SET_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741748));
pub const STATUS_INCOMPATIBLE_FILE_MAP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741747));
pub const STATUS_SECTION_PROTECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741746));
pub const STATUS_EAS_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741745));
pub const STATUS_EA_TOO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741744));
pub const STATUS_NONEXISTENT_EA_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741743));
pub const STATUS_NO_EAS_ON_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741742));
pub const STATUS_EA_CORRUPT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741741));
pub const STATUS_FILE_LOCK_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741740));
pub const STATUS_LOCK_NOT_GRANTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741739));
pub const STATUS_DELETE_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741738));
pub const STATUS_CTL_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741737));
pub const STATUS_UNKNOWN_REVISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741736));
pub const STATUS_REVISION_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741735));
pub const STATUS_INVALID_OWNER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741734));
pub const STATUS_INVALID_PRIMARY_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741733));
pub const STATUS_NO_IMPERSONATION_TOKEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741732));
pub const STATUS_CANT_DISABLE_MANDATORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741731));
pub const STATUS_NO_LOGON_SERVERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741730));
pub const STATUS_NO_SUCH_PRIVILEGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741728));
pub const STATUS_PRIVILEGE_NOT_HELD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741727));
pub const STATUS_INVALID_ACCOUNT_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741726));
pub const STATUS_USER_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741725));
pub const STATUS_GROUP_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741723));
pub const STATUS_NO_SUCH_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741722));
pub const STATUS_MEMBER_IN_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741721));
pub const STATUS_MEMBER_NOT_IN_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741720));
pub const STATUS_LAST_ADMIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741719));
pub const STATUS_ILL_FORMED_PASSWORD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741717));
pub const STATUS_PASSWORD_RESTRICTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741716));
pub const STATUS_INVALID_LOGON_HOURS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741713));
pub const STATUS_INVALID_WORKSTATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741712));
pub const STATUS_NONE_MAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741709));
pub const STATUS_TOO_MANY_LUIDS_REQUESTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741708));
pub const STATUS_LUIDS_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741707));
pub const STATUS_INVALID_SUB_AUTHORITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741706));
pub const STATUS_INVALID_ACL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741705));
pub const STATUS_INVALID_SID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741704));
pub const STATUS_INVALID_SECURITY_DESCR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741703));
pub const STATUS_PROCEDURE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741702));
pub const STATUS_INVALID_IMAGE_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741701));
pub const STATUS_NO_TOKEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741700));
pub const STATUS_BAD_INHERITANCE_ACL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741699));
pub const STATUS_RANGE_NOT_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741698));
pub const STATUS_DISK_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741697));
pub const STATUS_SERVER_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741696));
pub const STATUS_SERVER_NOT_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741695));
pub const STATUS_TOO_MANY_GUIDS_REQUESTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741694));
pub const STATUS_GUIDS_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741693));
pub const STATUS_INVALID_ID_AUTHORITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741692));
pub const STATUS_AGENTS_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741691));
pub const STATUS_INVALID_VOLUME_LABEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741690));
pub const STATUS_SECTION_NOT_EXTENDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741689));
pub const STATUS_NOT_MAPPED_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741688));
pub const STATUS_RESOURCE_DATA_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741687));
pub const STATUS_RESOURCE_TYPE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741686));
pub const STATUS_RESOURCE_NAME_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741685));
pub const STATUS_ARRAY_BOUNDS_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741684));
pub const STATUS_FLOAT_DENORMAL_OPERAND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741683));
pub const STATUS_FLOAT_DIVIDE_BY_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741682));
pub const STATUS_FLOAT_INEXACT_RESULT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741681));
pub const STATUS_FLOAT_INVALID_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741680));
pub const STATUS_FLOAT_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741679));
pub const STATUS_FLOAT_STACK_CHECK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741678));
pub const STATUS_FLOAT_UNDERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741677));
pub const STATUS_INTEGER_DIVIDE_BY_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741676));
pub const STATUS_INTEGER_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741675));
pub const STATUS_PRIVILEGED_INSTRUCTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741674));
pub const STATUS_TOO_MANY_PAGING_FILES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741673));
pub const STATUS_FILE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741672));
pub const STATUS_ALLOTTED_SPACE_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741671));
pub const STATUS_INSUFFICIENT_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741670));
pub const STATUS_DFS_EXIT_PATH_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741669));
pub const STATUS_DEVICE_DATA_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741668));
pub const STATUS_DEVICE_NOT_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741667));
pub const STATUS_DEVICE_POWER_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741666));
pub const STATUS_FREE_VM_NOT_AT_BASE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741665));
pub const STATUS_MEMORY_NOT_ALLOCATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741664));
pub const STATUS_WORKING_SET_QUOTA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741663));
pub const STATUS_MEDIA_WRITE_PROTECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741662));
pub const STATUS_DEVICE_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741661));
pub const STATUS_INVALID_GROUP_ATTRIBUTES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741660));
pub const STATUS_BAD_IMPERSONATION_LEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741659));
pub const STATUS_CANT_OPEN_ANONYMOUS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741658));
pub const STATUS_BAD_VALIDATION_CLASS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741657));
pub const STATUS_BAD_TOKEN_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741656));
pub const STATUS_BAD_MASTER_BOOT_RECORD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741655));
pub const STATUS_INSTRUCTION_MISALIGNMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741654));
pub const STATUS_INSTANCE_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741653));
pub const STATUS_PIPE_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741652));
pub const STATUS_INVALID_PIPE_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741651));
pub const STATUS_PIPE_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741650));
pub const STATUS_ILLEGAL_FUNCTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741649));
pub const STATUS_PIPE_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741648));
pub const STATUS_PIPE_CLOSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741647));
pub const STATUS_PIPE_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741646));
pub const STATUS_PIPE_LISTENING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741645));
pub const STATUS_INVALID_READ_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741644));
pub const STATUS_IO_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741643));
pub const STATUS_FILE_FORCED_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741642));
pub const STATUS_PROFILING_NOT_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741641));
pub const STATUS_PROFILING_NOT_STOPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741640));
pub const STATUS_COULD_NOT_INTERPRET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741639));
pub const STATUS_FILE_IS_A_DIRECTORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741638));
pub const STATUS_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741637));
pub const STATUS_REMOTE_NOT_LISTENING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741636));
pub const STATUS_DUPLICATE_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741635));
pub const STATUS_BAD_NETWORK_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741634));
pub const STATUS_NETWORK_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741633));
pub const STATUS_DEVICE_DOES_NOT_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741632));
pub const STATUS_TOO_MANY_COMMANDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741631));
pub const STATUS_ADAPTER_HARDWARE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741630));
pub const STATUS_INVALID_NETWORK_RESPONSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741629));
pub const STATUS_UNEXPECTED_NETWORK_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741628));
pub const STATUS_BAD_REMOTE_ADAPTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741627));
pub const STATUS_PRINT_QUEUE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741626));
pub const STATUS_NO_SPOOL_SPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741625));
pub const STATUS_PRINT_CANCELLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741624));
pub const STATUS_NETWORK_NAME_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741623));
pub const STATUS_NETWORK_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741622));
pub const STATUS_BAD_DEVICE_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741621));
pub const STATUS_BAD_NETWORK_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741620));
pub const STATUS_TOO_MANY_NAMES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741619));
pub const STATUS_TOO_MANY_SESSIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741618));
pub const STATUS_SHARING_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741617));
pub const STATUS_REQUEST_NOT_ACCEPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741616));
pub const STATUS_REDIRECTOR_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741615));
pub const STATUS_NET_WRITE_FAULT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741614));
pub const STATUS_PROFILING_AT_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741613));
pub const STATUS_NOT_SAME_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741612));
pub const STATUS_FILE_RENAMED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741611));
pub const STATUS_VIRTUAL_CIRCUIT_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741610));
pub const STATUS_NO_SECURITY_ON_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741609));
pub const STATUS_CANT_WAIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741608));
pub const STATUS_PIPE_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741607));
pub const STATUS_CANT_ACCESS_DOMAIN_INFO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741606));
pub const STATUS_CANT_TERMINATE_SELF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741605));
pub const STATUS_INVALID_SERVER_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741604));
pub const STATUS_INVALID_DOMAIN_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741603));
pub const STATUS_INVALID_DOMAIN_ROLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741602));
pub const STATUS_NO_SUCH_DOMAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741601));
pub const STATUS_DOMAIN_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741600));
pub const STATUS_DOMAIN_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741599));
pub const STATUS_OPLOCK_NOT_GRANTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741598));
pub const STATUS_INVALID_OPLOCK_PROTOCOL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741597));
pub const STATUS_INTERNAL_DB_CORRUPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741596));
pub const STATUS_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741595));
pub const STATUS_GENERIC_NOT_MAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741594));
pub const STATUS_BAD_DESCRIPTOR_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741593));
pub const STATUS_INVALID_USER_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741592));
pub const STATUS_UNEXPECTED_IO_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741591));
pub const STATUS_UNEXPECTED_MM_CREATE_ERR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741590));
pub const STATUS_UNEXPECTED_MM_MAP_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741589));
pub const STATUS_UNEXPECTED_MM_EXTEND_ERR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741588));
pub const STATUS_NOT_LOGON_PROCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741587));
pub const STATUS_LOGON_SESSION_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741586));
pub const STATUS_INVALID_PARAMETER_1 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741585));
pub const STATUS_INVALID_PARAMETER_2 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741584));
pub const STATUS_INVALID_PARAMETER_3 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741583));
pub const STATUS_INVALID_PARAMETER_4 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741582));
pub const STATUS_INVALID_PARAMETER_5 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741581));
pub const STATUS_INVALID_PARAMETER_6 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741580));
pub const STATUS_INVALID_PARAMETER_7 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741579));
pub const STATUS_INVALID_PARAMETER_8 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741578));
pub const STATUS_INVALID_PARAMETER_9 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741577));
pub const STATUS_INVALID_PARAMETER_10 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741576));
pub const STATUS_INVALID_PARAMETER_11 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741575));
pub const STATUS_INVALID_PARAMETER_12 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741574));
pub const STATUS_REDIRECTOR_NOT_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741573));
pub const STATUS_REDIRECTOR_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741572));
pub const STATUS_STACK_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741571));
pub const STATUS_NO_SUCH_PACKAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741570));
pub const STATUS_BAD_FUNCTION_TABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741569));
pub const STATUS_VARIABLE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741568));
pub const STATUS_DIRECTORY_NOT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741567));
pub const STATUS_FILE_CORRUPT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741566));
pub const STATUS_NOT_A_DIRECTORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741565));
pub const STATUS_BAD_LOGON_SESSION_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741564));
pub const STATUS_LOGON_SESSION_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741563));
pub const STATUS_NAME_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741562));
pub const STATUS_FILES_OPEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741561));
pub const STATUS_CONNECTION_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741560));
pub const STATUS_MESSAGE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741559));
pub const STATUS_PROCESS_IS_TERMINATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741558));
pub const STATUS_INVALID_LOGON_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741557));
pub const STATUS_NO_GUID_TRANSLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741556));
pub const STATUS_CANNOT_IMPERSONATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741555));
pub const STATUS_IMAGE_ALREADY_LOADED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741554));
pub const STATUS_ABIOS_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741553));
pub const STATUS_ABIOS_LID_NOT_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741552));
pub const STATUS_ABIOS_LID_ALREADY_OWNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741551));
pub const STATUS_ABIOS_NOT_LID_OWNER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741550));
pub const STATUS_ABIOS_INVALID_COMMAND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741549));
pub const STATUS_ABIOS_INVALID_LID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741548));
pub const STATUS_ABIOS_SELECTOR_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741547));
pub const STATUS_ABIOS_INVALID_SELECTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741546));
pub const STATUS_NO_LDT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741545));
pub const STATUS_INVALID_LDT_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741544));
pub const STATUS_INVALID_LDT_OFFSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741543));
pub const STATUS_INVALID_LDT_DESCRIPTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741542));
pub const STATUS_INVALID_IMAGE_NE_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741541));
pub const STATUS_RXACT_INVALID_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741540));
pub const STATUS_RXACT_COMMIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741539));
pub const STATUS_MAPPED_FILE_SIZE_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741538));
pub const STATUS_TOO_MANY_OPENED_FILES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741537));
pub const STATUS_CANCELLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741536));
pub const STATUS_CANNOT_DELETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741535));
pub const STATUS_INVALID_COMPUTER_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741534));
pub const STATUS_FILE_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741533));
pub const STATUS_SPECIAL_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741532));
pub const STATUS_SPECIAL_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741531));
pub const STATUS_SPECIAL_USER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741530));
pub const STATUS_MEMBERS_PRIMARY_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741529));
pub const STATUS_FILE_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741528));
pub const STATUS_TOO_MANY_THREADS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741527));
pub const STATUS_THREAD_NOT_IN_PROCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741526));
pub const STATUS_TOKEN_ALREADY_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741525));
pub const STATUS_PAGEFILE_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741524));
pub const STATUS_COMMITMENT_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741523));
pub const STATUS_INVALID_IMAGE_LE_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741522));
pub const STATUS_INVALID_IMAGE_NOT_MZ = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741521));
pub const STATUS_INVALID_IMAGE_PROTECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741520));
pub const STATUS_INVALID_IMAGE_WIN_16 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741519));
pub const STATUS_LOGON_SERVER_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741518));
pub const STATUS_TIME_DIFFERENCE_AT_DC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741517));
pub const STATUS_SYNCHRONIZATION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741516));
pub const STATUS_DLL_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741515));
pub const STATUS_OPEN_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741514));
pub const STATUS_IO_PRIVILEGE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741513));
pub const STATUS_ORDINAL_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741512));
pub const STATUS_ENTRYPOINT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741511));
pub const STATUS_CONTROL_C_EXIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741510));
pub const STATUS_LOCAL_DISCONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741509));
pub const STATUS_REMOTE_DISCONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741508));
pub const STATUS_REMOTE_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741507));
pub const STATUS_LINK_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741506));
pub const STATUS_LINK_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741505));
pub const STATUS_INVALID_CONNECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741504));
pub const STATUS_INVALID_ADDRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741503));
pub const STATUS_DLL_INIT_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741502));
pub const STATUS_MISSING_SYSTEMFILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741501));
pub const STATUS_UNHANDLED_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741500));
pub const STATUS_APP_INIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741499));
pub const STATUS_PAGEFILE_CREATE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741498));
pub const STATUS_NO_PAGEFILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741497));
pub const STATUS_INVALID_LEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741496));
pub const STATUS_WRONG_PASSWORD_CORE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741495));
pub const STATUS_ILLEGAL_FLOAT_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741494));
pub const STATUS_PIPE_BROKEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741493));
pub const STATUS_REGISTRY_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741492));
pub const STATUS_REGISTRY_IO_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741491));
pub const STATUS_NO_EVENT_PAIR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741490));
pub const STATUS_UNRECOGNIZED_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741489));
pub const STATUS_SERIAL_NO_DEVICE_INITED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741488));
pub const STATUS_NO_SUCH_ALIAS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741487));
pub const STATUS_MEMBER_NOT_IN_ALIAS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741486));
pub const STATUS_MEMBER_IN_ALIAS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741485));
pub const STATUS_ALIAS_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741484));
pub const STATUS_LOGON_NOT_GRANTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741483));
pub const STATUS_TOO_MANY_SECRETS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741482));
pub const STATUS_SECRET_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741481));
pub const STATUS_INTERNAL_DB_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741480));
pub const STATUS_FULLSCREEN_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741479));
pub const STATUS_TOO_MANY_CONTEXT_IDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741478));
pub const STATUS_NOT_REGISTRY_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741476));
pub const STATUS_NT_CROSS_ENCRYPTION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741475));
pub const STATUS_DOMAIN_CTRLR_CONFIG_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741474));
pub const STATUS_FT_MISSING_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741473));
pub const STATUS_ILL_FORMED_SERVICE_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741472));
pub const STATUS_ILLEGAL_CHARACTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741471));
pub const STATUS_UNMAPPABLE_CHARACTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741470));
pub const STATUS_UNDEFINED_CHARACTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741469));
pub const STATUS_FLOPPY_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741468));
pub const STATUS_FLOPPY_ID_MARK_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741467));
pub const STATUS_FLOPPY_WRONG_CYLINDER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741466));
pub const STATUS_FLOPPY_UNKNOWN_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741465));
pub const STATUS_FLOPPY_BAD_REGISTERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741464));
pub const STATUS_DISK_RECALIBRATE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741463));
pub const STATUS_DISK_OPERATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741462));
pub const STATUS_DISK_RESET_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741461));
pub const STATUS_SHARED_IRQ_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741460));
pub const STATUS_FT_ORPHANING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741459));
pub const STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741458));
pub const STATUS_PARTITION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741454));
pub const STATUS_INVALID_BLOCK_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741453));
pub const STATUS_DEVICE_NOT_PARTITIONED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741452));
pub const STATUS_UNABLE_TO_LOCK_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741451));
pub const STATUS_UNABLE_TO_UNLOAD_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741450));
pub const STATUS_EOM_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741449));
pub const STATUS_NO_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741448));
pub const STATUS_NO_SUCH_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741446));
pub const STATUS_INVALID_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741445));
pub const STATUS_KEY_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741444));
pub const STATUS_NO_LOG_SPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741443));
pub const STATUS_TOO_MANY_SIDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741442));
pub const STATUS_LM_CROSS_ENCRYPTION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741441));
pub const STATUS_KEY_HAS_CHILDREN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741440));
pub const STATUS_CHILD_MUST_BE_VOLATILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741439));
pub const STATUS_DEVICE_CONFIGURATION_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741438));
pub const STATUS_DRIVER_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741437));
pub const STATUS_INVALID_DEVICE_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741436));
pub const STATUS_IO_DEVICE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741435));
pub const STATUS_DEVICE_PROTOCOL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741434));
pub const STATUS_BACKUP_CONTROLLER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741433));
pub const STATUS_LOG_FILE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741432));
pub const STATUS_TOO_LATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741431));
pub const STATUS_NO_TRUST_LSA_SECRET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741430));
pub const STATUS_NO_TRUST_SAM_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741429));
pub const STATUS_TRUSTED_DOMAIN_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741428));
pub const STATUS_TRUSTED_RELATIONSHIP_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741427));
pub const STATUS_EVENTLOG_FILE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741426));
pub const STATUS_EVENTLOG_CANT_START = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741425));
pub const STATUS_TRUST_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741424));
pub const STATUS_MUTANT_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741423));
pub const STATUS_NETLOGON_NOT_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741422));
pub const STATUS_POSSIBLE_DEADLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741420));
pub const STATUS_NETWORK_CREDENTIAL_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741419));
pub const STATUS_REMOTE_SESSION_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741418));
pub const STATUS_EVENTLOG_FILE_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741417));
pub const STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741416));
pub const STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741415));
pub const STATUS_NOLOGON_SERVER_TRUST_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741414));
pub const STATUS_DOMAIN_TRUST_INCONSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741413));
pub const STATUS_FS_DRIVER_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741412));
pub const STATUS_IMAGE_ALREADY_LOADED_AS_DLL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741411));
pub const STATUS_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741410));
pub const STATUS_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741409));
pub const STATUS_SECURITY_STREAM_IS_INCONSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741408));
pub const STATUS_INVALID_LOCK_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741407));
pub const STATUS_INVALID_ACE_CONDITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741406));
pub const STATUS_IMAGE_SUBSYSTEM_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741405));
pub const STATUS_NOTIFICATION_GUID_ALREADY_DEFINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741404));
pub const STATUS_INVALID_EXCEPTION_HANDLER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741403));
pub const STATUS_DUPLICATE_PRIVILEGES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741402));
pub const STATUS_NOT_ALLOWED_ON_SYSTEM_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741401));
pub const STATUS_REPAIR_NEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741400));
pub const STATUS_QUOTA_NOT_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741399));
pub const STATUS_NO_APPLICATION_PACKAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741398));
pub const STATUS_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741397));
pub const STATUS_NOT_SAME_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741396));
pub const STATUS_FATAL_MEMORY_EXHAUSTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741395));
pub const STATUS_ERROR_PROCESS_NOT_IN_JOB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741394));
pub const STATUS_CPU_SET_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741393));
pub const STATUS_IO_DEVICE_INVALID_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741392));
pub const STATUS_IO_UNALIGNED_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741391));
pub const STATUS_CONTROL_STACK_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741390));
pub const STATUS_NETWORK_OPEN_RESTRICTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741311));
pub const STATUS_NO_USER_SESSION_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741310));
pub const STATUS_USER_SESSION_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741309));
pub const STATUS_RESOURCE_LANG_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741308));
pub const STATUS_INSUFF_SERVER_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741307));
pub const STATUS_INVALID_BUFFER_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741306));
pub const STATUS_INVALID_ADDRESS_COMPONENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741305));
pub const STATUS_INVALID_ADDRESS_WILDCARD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741304));
pub const STATUS_TOO_MANY_ADDRESSES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741303));
pub const STATUS_ADDRESS_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741302));
pub const STATUS_ADDRESS_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741301));
pub const STATUS_CONNECTION_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741300));
pub const STATUS_CONNECTION_RESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741299));
pub const STATUS_TOO_MANY_NODES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741298));
pub const STATUS_TRANSACTION_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741297));
pub const STATUS_TRANSACTION_TIMED_OUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741296));
pub const STATUS_TRANSACTION_NO_RELEASE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741295));
pub const STATUS_TRANSACTION_NO_MATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741294));
pub const STATUS_TRANSACTION_RESPONDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741293));
pub const STATUS_TRANSACTION_INVALID_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741292));
pub const STATUS_TRANSACTION_INVALID_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741291));
pub const STATUS_NOT_SERVER_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741290));
pub const STATUS_NOT_CLIENT_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741289));
pub const STATUS_CANNOT_LOAD_REGISTRY_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741288));
pub const STATUS_DEBUG_ATTACH_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741287));
pub const STATUS_SYSTEM_PROCESS_TERMINATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741286));
pub const STATUS_DATA_NOT_ACCEPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741285));
pub const STATUS_NO_BROWSER_SERVERS_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741284));
pub const STATUS_VDM_HARD_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741283));
pub const STATUS_DRIVER_CANCEL_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741282));
pub const STATUS_REPLY_MESSAGE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741281));
pub const STATUS_MAPPED_ALIGNMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741280));
pub const STATUS_IMAGE_CHECKSUM_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741279));
pub const STATUS_LOST_WRITEBEHIND_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741278));
pub const STATUS_CLIENT_SERVER_PARAMETERS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741277));
pub const STATUS_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741275));
pub const STATUS_NOT_TINY_STREAM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741274));
pub const STATUS_RECOVERY_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741273));
pub const STATUS_STACK_OVERFLOW_READ = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741272));
pub const STATUS_FAIL_CHECK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741271));
pub const STATUS_DUPLICATE_OBJECTID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741270));
pub const STATUS_OBJECTID_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741269));
pub const STATUS_CONVERT_TO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741268));
pub const STATUS_RETRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741267));
pub const STATUS_FOUND_OUT_OF_SCOPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741266));
pub const STATUS_ALLOCATE_BUCKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741265));
pub const STATUS_PROPSET_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741264));
pub const STATUS_MARSHALL_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741263));
pub const STATUS_INVALID_VARIANT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741262));
pub const STATUS_DOMAIN_CONTROLLER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741261));
pub const STATUS_HANDLE_NOT_CLOSABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741259));
pub const STATUS_CONNECTION_REFUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741258));
pub const STATUS_GRACEFUL_DISCONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741257));
pub const STATUS_ADDRESS_ALREADY_ASSOCIATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741256));
pub const STATUS_ADDRESS_NOT_ASSOCIATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741255));
pub const STATUS_CONNECTION_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741254));
pub const STATUS_CONNECTION_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741253));
pub const STATUS_NETWORK_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741252));
pub const STATUS_HOST_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741251));
pub const STATUS_PROTOCOL_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741250));
pub const STATUS_PORT_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741249));
pub const STATUS_REQUEST_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741248));
pub const STATUS_CONNECTION_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741247));
pub const STATUS_BAD_COMPRESSION_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741246));
pub const STATUS_USER_MAPPED_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741245));
pub const STATUS_AUDIT_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741244));
pub const STATUS_TIMER_RESOLUTION_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741243));
pub const STATUS_CONNECTION_COUNT_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741242));
pub const STATUS_LOGIN_TIME_RESTRICTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741241));
pub const STATUS_LOGIN_WKSTA_RESTRICTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741240));
pub const STATUS_IMAGE_MP_UP_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741239));
pub const STATUS_INSUFFICIENT_LOGON_INFO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741232));
pub const STATUS_BAD_DLL_ENTRYPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741231));
pub const STATUS_BAD_SERVICE_ENTRYPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741230));
pub const STATUS_LPC_REPLY_LOST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741229));
pub const STATUS_IP_ADDRESS_CONFLICT1 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741228));
pub const STATUS_IP_ADDRESS_CONFLICT2 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741227));
pub const STATUS_REGISTRY_QUOTA_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741226));
pub const STATUS_PATH_NOT_COVERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741225));
pub const STATUS_NO_CALLBACK_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741224));
pub const STATUS_LICENSE_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741223));
pub const STATUS_PWD_TOO_SHORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741222));
pub const STATUS_PWD_TOO_RECENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741221));
pub const STATUS_PWD_HISTORY_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741220));
pub const STATUS_PLUGPLAY_NO_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741218));
pub const STATUS_UNSUPPORTED_COMPRESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741217));
pub const STATUS_INVALID_HW_PROFILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741216));
pub const STATUS_INVALID_PLUGPLAY_DEVICE_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741215));
pub const STATUS_DRIVER_ORDINAL_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741214));
pub const STATUS_DRIVER_ENTRYPOINT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741213));
pub const STATUS_RESOURCE_NOT_OWNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741212));
pub const STATUS_TOO_MANY_LINKS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741211));
pub const STATUS_QUOTA_LIST_INCONSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741210));
pub const STATUS_FILE_IS_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741209));
pub const STATUS_EVALUATION_EXPIRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741208));
pub const STATUS_ILLEGAL_DLL_RELOCATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741207));
pub const STATUS_LICENSE_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741206));
pub const STATUS_DLL_INIT_FAILED_LOGOFF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741205));
pub const STATUS_DRIVER_UNABLE_TO_LOAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741204));
pub const STATUS_DFS_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741203));
pub const STATUS_VOLUME_DISMOUNTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741202));
pub const STATUS_WX86_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741201));
pub const STATUS_WX86_FLOAT_STACK_CHECK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741200));
pub const STATUS_VALIDATE_CONTINUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741199));
pub const STATUS_NO_MATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741198));
pub const STATUS_NO_MORE_MATCHES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741197));
pub const STATUS_NOT_A_REPARSE_POINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741195));
pub const STATUS_IO_REPARSE_TAG_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741194));
pub const STATUS_IO_REPARSE_TAG_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741193));
pub const STATUS_IO_REPARSE_DATA_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741192));
pub const STATUS_IO_REPARSE_TAG_NOT_HANDLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741191));
pub const STATUS_PWD_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741190));
pub const STATUS_STOWED_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741189));
pub const STATUS_CONTEXT_STOWED_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741188));
pub const STATUS_REPARSE_POINT_NOT_RESOLVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741184));
pub const STATUS_DIRECTORY_IS_A_REPARSE_POINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741183));
pub const STATUS_RANGE_LIST_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741182));
pub const STATUS_SOURCE_ELEMENT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741181));
pub const STATUS_DESTINATION_ELEMENT_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741180));
pub const STATUS_ILLEGAL_ELEMENT_ADDRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741179));
pub const STATUS_MAGAZINE_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741178));
pub const STATUS_REINITIALIZATION_NEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741177));
pub const STATUS_DEVICE_REQUIRES_CLEANING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147483000));
pub const STATUS_DEVICE_DOOR_OPEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147482999));
pub const STATUS_ENCRYPTION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741174));
pub const STATUS_DECRYPTION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741173));
pub const STATUS_RANGE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741172));
pub const STATUS_NO_RECOVERY_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741171));
pub const STATUS_NO_EFS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741170));
pub const STATUS_WRONG_EFS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741169));
pub const STATUS_NO_USER_KEYS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741168));
pub const STATUS_FILE_NOT_ENCRYPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741167));
pub const STATUS_NOT_EXPORT_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741166));
pub const STATUS_FILE_ENCRYPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741165));
pub const STATUS_WAKE_SYSTEM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073742484));
pub const STATUS_WMI_GUID_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741163));
pub const STATUS_WMI_INSTANCE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741162));
pub const STATUS_WMI_ITEMID_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741161));
pub const STATUS_WMI_TRY_AGAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741160));
pub const STATUS_SHARED_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741159));
pub const STATUS_POLICY_OBJECT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741158));
pub const STATUS_POLICY_ONLY_IN_DS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741157));
pub const STATUS_VOLUME_NOT_UPGRADED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741156));
pub const STATUS_REMOTE_STORAGE_NOT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741155));
pub const STATUS_REMOTE_STORAGE_MEDIA_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741154));
pub const STATUS_NO_TRACKING_SERVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741153));
pub const STATUS_SERVER_SID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741152));
pub const STATUS_DS_NO_ATTRIBUTE_OR_VALUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741151));
pub const STATUS_DS_INVALID_ATTRIBUTE_SYNTAX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741150));
pub const STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741149));
pub const STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741148));
pub const STATUS_DS_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741147));
pub const STATUS_DS_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741146));
pub const STATUS_DS_NO_RIDS_ALLOCATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741145));
pub const STATUS_DS_NO_MORE_RIDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741144));
pub const STATUS_DS_INCORRECT_ROLE_OWNER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741143));
pub const STATUS_DS_RIDMGR_INIT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741142));
pub const STATUS_DS_OBJ_CLASS_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741141));
pub const STATUS_DS_CANT_ON_NON_LEAF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741140));
pub const STATUS_DS_CANT_ON_RDN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741139));
pub const STATUS_DS_CANT_MOD_OBJ_CLASS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741138));
pub const STATUS_DS_CROSS_DOM_MOVE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741137));
pub const STATUS_DS_GC_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741136));
pub const STATUS_DIRECTORY_SERVICE_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741135));
pub const STATUS_REPARSE_ATTRIBUTE_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741134));
pub const STATUS_CANT_ENABLE_DENY_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741133));
pub const STATUS_FLOAT_MULTIPLE_FAULTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741132));
pub const STATUS_FLOAT_MULTIPLE_TRAPS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741131));
pub const STATUS_DEVICE_REMOVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741130));
pub const STATUS_JOURNAL_DELETE_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741129));
pub const STATUS_JOURNAL_NOT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741128));
pub const STATUS_NOINTERFACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741127));
pub const STATUS_DS_RIDMGR_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741126));
pub const STATUS_DS_ADMIN_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741119));
pub const STATUS_DRIVER_FAILED_SLEEP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741118));
pub const STATUS_MUTUAL_AUTHENTICATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741117));
pub const STATUS_CORRUPT_SYSTEM_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741116));
pub const STATUS_DATATYPE_MISALIGNMENT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741115));
pub const STATUS_WMI_READ_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741114));
pub const STATUS_WMI_SET_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741113));
pub const STATUS_COMMITMENT_MINIMUM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741112));
pub const STATUS_REG_NAT_CONSUMPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741111));
pub const STATUS_TRANSPORT_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741110));
pub const STATUS_DS_SAM_INIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741109));
pub const STATUS_ONLY_IF_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741108));
pub const STATUS_DS_SENSITIVE_GROUP_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741107));
pub const STATUS_PNP_RESTART_ENUMERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741106));
pub const STATUS_JOURNAL_ENTRY_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741105));
pub const STATUS_DS_CANT_MOD_PRIMARYGROUPID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741104));
pub const STATUS_SYSTEM_IMAGE_BAD_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741103));
pub const STATUS_PNP_REBOOT_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741102));
pub const STATUS_POWER_STATE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741101));
pub const STATUS_DS_INVALID_GROUP_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741100));
pub const STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741099));
pub const STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741098));
pub const STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741097));
pub const STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741096));
pub const STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741095));
pub const STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741094));
pub const STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741093));
pub const STATUS_DS_HAVE_PRIMARY_MEMBERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741092));
pub const STATUS_WMI_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741091));
pub const STATUS_INSUFFICIENT_POWER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741090));
pub const STATUS_SAM_NEED_BOOTKEY_PASSWORD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741089));
pub const STATUS_SAM_NEED_BOOTKEY_FLOPPY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741088));
pub const STATUS_DS_CANT_START = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741087));
pub const STATUS_DS_INIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741086));
pub const STATUS_SAM_INIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741085));
pub const STATUS_DS_GC_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741084));
pub const STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741083));
pub const STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741082));
pub const STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741081));
pub const STATUS_MULTIPLE_FAULT_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741080));
pub const STATUS_CURRENT_DOMAIN_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741079));
pub const STATUS_CANNOT_MAKE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741078));
pub const STATUS_SYSTEM_SHUTDOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741077));
pub const STATUS_DS_INIT_FAILURE_CONSOLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741076));
pub const STATUS_DS_SAM_INIT_FAILURE_CONSOLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741075));
pub const STATUS_UNFINISHED_CONTEXT_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741074));
pub const STATUS_NO_TGT_REPLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741073));
pub const STATUS_OBJECTID_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741072));
pub const STATUS_NO_IP_ADDRESSES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741071));
pub const STATUS_WRONG_CREDENTIAL_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741070));
pub const STATUS_CRYPTO_SYSTEM_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741069));
pub const STATUS_MAX_REFERRALS_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741068));
pub const STATUS_MUST_BE_KDC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741067));
pub const STATUS_STRONG_CRYPTO_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741066));
pub const STATUS_TOO_MANY_PRINCIPALS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741065));
pub const STATUS_NO_PA_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741064));
pub const STATUS_PKINIT_NAME_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741063));
pub const STATUS_SMARTCARD_LOGON_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741062));
pub const STATUS_KDC_INVALID_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741061));
pub const STATUS_KDC_UNABLE_TO_REFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741060));
pub const STATUS_KDC_UNKNOWN_ETYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741059));
pub const STATUS_SHUTDOWN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741058));
pub const STATUS_SERVER_SHUTDOWN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741057));
pub const STATUS_NOT_SUPPORTED_ON_SBS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741056));
pub const STATUS_WMI_GUID_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741055));
pub const STATUS_WMI_ALREADY_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741054));
pub const STATUS_WMI_ALREADY_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741053));
pub const STATUS_MFT_TOO_FRAGMENTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741052));
pub const STATUS_COPY_PROTECTION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741051));
pub const STATUS_CSS_AUTHENTICATION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741050));
pub const STATUS_CSS_KEY_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741049));
pub const STATUS_CSS_KEY_NOT_ESTABLISHED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741048));
pub const STATUS_CSS_SCRAMBLED_SECTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741047));
pub const STATUS_CSS_REGION_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741046));
pub const STATUS_CSS_RESETS_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741045));
pub const STATUS_PASSWORD_CHANGE_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741044));
pub const STATUS_LOST_MODE_LOGON_RESTRICTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741043));
pub const STATUS_PKINIT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741024));
pub const STATUS_SMARTCARD_SUBSYSTEM_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741023));
pub const STATUS_NO_KERB_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073741022));
pub const STATUS_HOST_DOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740976));
pub const STATUS_UNSUPPORTED_PREAUTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740975));
pub const STATUS_EFS_ALG_BLOB_TOO_BIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740974));
pub const STATUS_PORT_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740973));
pub const STATUS_DEBUGGER_INACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740972));
pub const STATUS_DS_VERSION_CHECK_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740971));
pub const STATUS_AUDITING_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740970));
pub const STATUS_PRENT4_MACHINE_ACCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740969));
pub const STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740968));
pub const STATUS_INVALID_IMAGE_WIN_32 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740967));
pub const STATUS_INVALID_IMAGE_WIN_64 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740966));
pub const STATUS_BAD_BINDINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740965));
pub const STATUS_NETWORK_SESSION_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740964));
pub const STATUS_APPHELP_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740963));
pub const STATUS_ALL_SIDS_FILTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740962));
pub const STATUS_NOT_SAFE_MODE_DRIVER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740961));
pub const STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740959));
pub const STATUS_ACCESS_DISABLED_BY_POLICY_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740958));
pub const STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740957));
pub const STATUS_ACCESS_DISABLED_BY_POLICY_OTHER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740956));
pub const STATUS_FAILED_DRIVER_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740955));
pub const STATUS_DEVICE_ENUMERATION_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740954));
pub const STATUS_MOUNT_POINT_NOT_RESOLVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740952));
pub const STATUS_INVALID_DEVICE_OBJECT_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740951));
pub const STATUS_MCA_OCCURED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740950));
pub const STATUS_DRIVER_BLOCKED_CRITICAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740949));
pub const STATUS_DRIVER_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740948));
pub const STATUS_DRIVER_DATABASE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740947));
pub const STATUS_SYSTEM_HIVE_TOO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740946));
pub const STATUS_INVALID_IMPORT_OF_NON_DLL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740945));
pub const STATUS_DS_SHUTTING_DOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073742704));
pub const STATUS_NO_SECRETS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740943));
pub const STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740942));
pub const STATUS_FAILED_STACK_SWITCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740941));
pub const STATUS_HEAP_CORRUPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740940));
pub const STATUS_SMARTCARD_WRONG_PIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740928));
pub const STATUS_SMARTCARD_CARD_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740927));
pub const STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740926));
pub const STATUS_SMARTCARD_NO_CARD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740925));
pub const STATUS_SMARTCARD_NO_KEY_CONTAINER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740924));
pub const STATUS_SMARTCARD_NO_CERTIFICATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740923));
pub const STATUS_SMARTCARD_NO_KEYSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740922));
pub const STATUS_SMARTCARD_IO_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740921));
pub const STATUS_SMARTCARD_CERT_REVOKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740919));
pub const STATUS_ISSUING_CA_UNTRUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740918));
pub const STATUS_REVOCATION_OFFLINE_C = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740917));
pub const STATUS_PKINIT_CLIENT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740916));
pub const STATUS_SMARTCARD_CERT_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740915));
pub const STATUS_DRIVER_FAILED_PRIOR_UNLOAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740914));
pub const STATUS_SMARTCARD_SILENT_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740913));
pub const STATUS_PER_USER_TRUST_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740799));
pub const STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740798));
pub const STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740797));
pub const STATUS_DS_NAME_NOT_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740796));
pub const STATUS_DS_DUPLICATE_ID_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740795));
pub const STATUS_DS_GROUP_CONVERSION_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740794));
pub const STATUS_VOLSNAP_PREPARE_HIBERNATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740793));
pub const STATUS_USER2USER_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740792));
pub const STATUS_STACK_BUFFER_OVERRUN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740791));
pub const STATUS_NO_S4U_PROT_SUPPORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740790));
pub const STATUS_CROSSREALM_DELEGATION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740789));
pub const STATUS_REVOCATION_OFFLINE_KDC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740788));
pub const STATUS_ISSUING_CA_UNTRUSTED_KDC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740787));
pub const STATUS_KDC_CERT_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740786));
pub const STATUS_KDC_CERT_REVOKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740785));
pub const STATUS_PARAMETER_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740784));
pub const STATUS_HIBERNATION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740783));
pub const STATUS_DELAY_LOAD_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740782));
pub const STATUS_VDM_DISALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740780));
pub const STATUS_HUNG_DISPLAY_DRIVER_THREAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740779));
pub const STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740778));
pub const STATUS_INVALID_CRUNTIME_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740777));
pub const STATUS_NTLM_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740776));
pub const STATUS_DS_SRC_SID_EXISTS_IN_FOREST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740775));
pub const STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740774));
pub const STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740773));
pub const STATUS_INVALID_USER_PRINCIPAL_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740772));
pub const STATUS_FATAL_USER_CALLBACK_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740771));
pub const STATUS_ASSERTION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740768));
pub const STATUS_VERIFIER_STOP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740767));
pub const STATUS_CALLBACK_POP_STACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740765));
pub const STATUS_INCOMPATIBLE_DRIVER_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740764));
pub const STATUS_HIVE_UNLOADED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740763));
pub const STATUS_COMPRESSION_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740762));
pub const STATUS_FILE_SYSTEM_LIMITATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740761));
pub const STATUS_INVALID_IMAGE_HASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740760));
pub const STATUS_NOT_CAPABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740759));
pub const STATUS_REQUEST_OUT_OF_SEQUENCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740758));
pub const STATUS_IMPLEMENTATION_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740757));
pub const STATUS_ELEVATION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740756));
pub const STATUS_NO_SECURITY_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740755));
pub const STATUS_PKU2U_CERT_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740753));
pub const STATUS_BEYOND_VDL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740750));
pub const STATUS_ENCOUNTERED_WRITE_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740749));
pub const STATUS_PTE_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740748));
pub const STATUS_PURGE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740747));
pub const STATUS_CRED_REQUIRES_CONFIRMATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740736));
pub const STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740735));
pub const STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740734));
pub const STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740733));
pub const STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740732));
pub const STATUS_CS_ENCRYPTION_FILE_NOT_CSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740731));
pub const STATUS_INVALID_LABEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740730));
pub const STATUS_DRIVER_PROCESS_TERMINATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740720));
pub const STATUS_AMBIGUOUS_SYSTEM_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740719));
pub const STATUS_SYSTEM_DEVICE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740718));
pub const STATUS_RESTART_BOOT_APPLICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740717));
pub const STATUS_INSUFFICIENT_NVRAM_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740716));
pub const STATUS_INVALID_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740715));
pub const STATUS_THREAD_ALREADY_IN_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740714));
pub const STATUS_THREAD_NOT_IN_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740713));
pub const STATUS_INVALID_WEIGHT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740712));
pub const STATUS_REQUEST_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740711));
pub const STATUS_NO_RANGES_PROCESSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740704));
pub const STATUS_DISK_RESOURCES_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740703));
pub const STATUS_NEEDS_REMEDIATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740702));
pub const STATUS_DEVICE_FEATURE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740701));
pub const STATUS_DEVICE_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740700));
pub const STATUS_INVALID_TOKEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740699));
pub const STATUS_SERVER_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740698));
pub const STATUS_FILE_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740697));
pub const STATUS_DEVICE_INSUFFICIENT_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740696));
pub const STATUS_PACKAGE_UPDATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740695));
pub const STATUS_NOT_READ_FROM_COPY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740694));
pub const STATUS_FT_WRITE_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740693));
pub const STATUS_FT_DI_SCAN_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740692));
pub const STATUS_OBJECT_NOT_EXTERNALLY_BACKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740691));
pub const STATUS_EXTERNAL_BACKING_PROVIDER_UNKNOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740690));
pub const STATUS_COMPRESSION_NOT_BENEFICIAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740689));
pub const STATUS_DATA_CHECKSUM_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740688));
pub const STATUS_INTERMIXED_KERNEL_EA_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740687));
pub const STATUS_TRIM_READ_ZERO_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740686));
pub const STATUS_TOO_MANY_SEGMENT_DESCRIPTORS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740685));
pub const STATUS_INVALID_OFFSET_ALIGNMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740684));
pub const STATUS_INVALID_FIELD_IN_PARAMETER_LIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740683));
pub const STATUS_OPERATION_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740682));
pub const STATUS_INVALID_INITIATOR_TARGET_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740681));
pub const STATUS_SCRUB_DATA_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740680));
pub const STATUS_NOT_REDUNDANT_STORAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740679));
pub const STATUS_RESIDENT_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740678));
pub const STATUS_COMPRESSED_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740677));
pub const STATUS_DIRECTORY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740676));
pub const STATUS_IO_OPERATION_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740675));
pub const STATUS_SYSTEM_NEEDS_REMEDIATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740674));
pub const STATUS_APPX_INTEGRITY_FAILURE_CLR_NGEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740673));
pub const STATUS_SHARE_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740672));
pub const STATUS_APISET_NOT_HOSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740671));
pub const STATUS_APISET_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740670));
pub const STATUS_DEVICE_HARDWARE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740669));
pub const STATUS_FIRMWARE_SLOT_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740668));
pub const STATUS_FIRMWARE_IMAGE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740667));
pub const STATUS_STORAGE_TOPOLOGY_ID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740666));
pub const STATUS_WIM_NOT_BOOTABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740665));
pub const STATUS_BLOCKED_BY_PARENTAL_CONTROLS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740664));
pub const STATUS_NEEDS_REGISTRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740663));
pub const STATUS_QUOTA_ACTIVITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740662));
pub const STATUS_CALLBACK_INVOKE_INLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740661));
pub const STATUS_BLOCK_TOO_MANY_REFERENCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740660));
pub const STATUS_MARKED_TO_DISALLOW_WRITES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740659));
pub const STATUS_NETWORK_ACCESS_DENIED_EDP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740658));
pub const STATUS_ENCLAVE_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740657));
pub const STATUS_PNP_NO_COMPAT_DRIVERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740656));
pub const STATUS_PNP_DRIVER_PACKAGE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740655));
pub const STATUS_PNP_DRIVER_CONFIGURATION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740654));
pub const STATUS_PNP_DRIVER_CONFIGURATION_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740653));
pub const STATUS_PNP_FUNCTION_DRIVER_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740652));
pub const STATUS_PNP_DEVICE_CONFIGURATION_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740651));
pub const STATUS_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740650));
pub const STATUS_PACKAGE_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740649));
pub const STATUS_DEVICE_IN_MAINTENANCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740647));
pub const STATUS_NOT_SUPPORTED_ON_DAX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740646));
pub const STATUS_FREE_SPACE_TOO_FRAGMENTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740645));
pub const STATUS_DAX_MAPPING_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740644));
pub const STATUS_CHILD_PROCESS_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740643));
pub const STATUS_STORAGE_LOST_DATA_PERSISTENCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740642));
pub const STATUS_VRF_CFG_AND_IO_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740641));
pub const STATUS_PARTITION_TERMINATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740640));
pub const STATUS_EXTERNAL_SYSKEY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740639));
pub const STATUS_ENCLAVE_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740638));
pub const STATUS_FILE_PROTECTED_UNDER_DPL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740637));
pub const STATUS_VOLUME_NOT_CLUSTER_ALIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740636));
pub const STATUS_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740635));
pub const STATUS_APPX_FILE_NOT_ENCRYPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740634));
pub const STATUS_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740633));
pub const STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740632));
pub const STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740631));
pub const STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740630));
pub const STATUS_FT_READ_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740629));
pub const STATUS_PATCH_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740628));
pub const STATUS_STORAGE_RESERVE_ID_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740627));
pub const STATUS_STORAGE_RESERVE_DOES_NOT_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740626));
pub const STATUS_STORAGE_RESERVE_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740625));
pub const STATUS_STORAGE_RESERVE_NOT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740624));
pub const STATUS_NOT_A_DAX_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740623));
pub const STATUS_NOT_DAX_MAPPABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740622));
pub const STATUS_CASE_DIFFERING_NAMES_IN_DIR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740621));
pub const STATUS_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740620));
pub const STATUS_NOT_SUPPORTED_WITH_BTT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740619));
pub const STATUS_ENCRYPTION_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740618));
pub const STATUS_ENCRYPTING_METADATA_DISALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740617));
pub const STATUS_CANT_CLEAR_ENCRYPTION_FLAG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740616));
pub const STATUS_UNSATISFIED_DEPENDENCIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740615));
pub const STATUS_CASE_SENSITIVE_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740614));
pub const STATUS_INVALID_TASK_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740544));
pub const STATUS_INVALID_TASK_INDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740543));
pub const STATUS_THREAD_ALREADY_IN_TASK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740542));
pub const STATUS_CALLBACK_BYPASS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740541));
pub const STATUS_UNDEFINED_SCOPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740540));
pub const STATUS_INVALID_CAP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740539));
pub const STATUS_NOT_GUI_PROCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740538));
pub const STATUS_DEVICE_HUNG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740537));
pub const STATUS_CONTAINER_ASSIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740536));
pub const STATUS_JOB_NO_CONTAINER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740535));
pub const STATUS_DEVICE_UNRESPONSIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740534));
pub const STATUS_REPARSE_POINT_ENCOUNTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740533));
pub const STATUS_ATTRIBUTE_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740532));
pub const STATUS_NOT_A_TIERED_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740531));
pub const STATUS_ALREADY_HAS_STREAM_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740530));
pub const STATUS_JOB_NOT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740529));
pub const STATUS_ALREADY_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740528));
pub const STATUS_ENCLAVE_NOT_TERMINATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740527));
pub const STATUS_ENCLAVE_IS_TERMINATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740526));
pub const STATUS_SMB1_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740525));
pub const STATUS_SMR_GARBAGE_COLLECTION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740524));
pub const STATUS_INTERRUPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740523));
pub const STATUS_THREAD_NOT_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740522));
pub const STATUS_FAIL_FAST_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740286));
pub const STATUS_IMAGE_CERT_REVOKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740285));
pub const STATUS_DYNAMIC_CODE_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740284));
pub const STATUS_IMAGE_CERT_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740283));
pub const STATUS_STRICT_CFG_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740282));
pub const STATUS_SET_CONTEXT_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740278));
pub const STATUS_CROSS_PARTITION_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740277));
pub const STATUS_PORT_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740032));
pub const STATUS_MESSAGE_LOST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740031));
pub const STATUS_INVALID_MESSAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740030));
pub const STATUS_REQUEST_CANCELED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740029));
pub const STATUS_RECURSIVE_DISPATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740028));
pub const STATUS_LPC_RECEIVE_BUFFER_EXPECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740027));
pub const STATUS_LPC_INVALID_CONNECTION_USAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740026));
pub const STATUS_LPC_REQUESTS_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740025));
pub const STATUS_RESOURCE_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740024));
pub const STATUS_HARDWARE_MEMORY_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740023));
pub const STATUS_THREADPOOL_HANDLE_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740022));
pub const STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740021));
pub const STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740020));
pub const STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740019));
pub const STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740018));
pub const STATUS_THREADPOOL_RELEASED_DURING_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740017));
pub const STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740016));
pub const STATUS_APC_RETURNED_WHILE_IMPERSONATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740015));
pub const STATUS_PROCESS_IS_PROTECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740014));
pub const STATUS_MCA_EXCEPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740013));
pub const STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740012));
pub const STATUS_SYMLINK_CLASS_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740011));
pub const STATUS_INVALID_IDN_NORMALIZATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740010));
pub const STATUS_NO_UNICODE_TRANSLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740009));
pub const STATUS_ALREADY_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740008));
pub const STATUS_CONTEXT_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740007));
pub const STATUS_PORT_ALREADY_HAS_COMPLETION_LIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740006));
pub const STATUS_CALLBACK_RETURNED_THREAD_PRIORITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740005));
pub const STATUS_INVALID_THREAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740004));
pub const STATUS_CALLBACK_RETURNED_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740003));
pub const STATUS_CALLBACK_RETURNED_LDR_LOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740002));
pub const STATUS_CALLBACK_RETURNED_LANG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740001));
pub const STATUS_CALLBACK_RETURNED_PRI_BACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073740000));
pub const STATUS_CALLBACK_RETURNED_THREAD_AFFINITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739999));
pub const STATUS_LPC_HANDLE_COUNT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739998));
pub const STATUS_EXECUTABLE_MEMORY_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739997));
pub const STATUS_KERNEL_EXECUTABLE_MEMORY_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739996));
pub const STATUS_ATTACHED_EXECUTABLE_MEMORY_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739995));
pub const STATUS_TRIGGERED_EXECUTABLE_MEMORY_WRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739994));
pub const STATUS_DISK_REPAIR_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739776));
pub const STATUS_DS_DOMAIN_RENAME_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739775));
pub const STATUS_DISK_QUOTA_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739774));
pub const STATUS_DATA_LOST_REPAIR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147481597));
pub const STATUS_CONTENT_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739772));
pub const STATUS_BAD_CLUSTERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739771));
pub const STATUS_VOLUME_DIRTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739770));
pub const STATUS_DISK_REPAIR_REDIRECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073743879));
pub const STATUS_DISK_REPAIR_UNSUCCESSFUL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739768));
pub const STATUS_CORRUPT_LOG_OVERFULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739767));
pub const STATUS_CORRUPT_LOG_CORRUPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739766));
pub const STATUS_CORRUPT_LOG_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739765));
pub const STATUS_CORRUPT_LOG_DELETED_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739764));
pub const STATUS_CORRUPT_LOG_CLEARED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739763));
pub const STATUS_ORPHAN_NAME_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739762));
pub const STATUS_PROACTIVE_SCAN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739761));
pub const STATUS_ENCRYPTED_IO_NOT_POSSIBLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739760));
pub const STATUS_CORRUPT_LOG_UPLEVEL_RECORDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739759));
pub const STATUS_FILE_CHECKED_OUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739519));
pub const STATUS_CHECKOUT_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739518));
pub const STATUS_BAD_FILE_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739517));
pub const STATUS_FILE_TOO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739516));
pub const STATUS_FORMS_AUTH_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739515));
pub const STATUS_VIRUS_INFECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739514));
pub const STATUS_VIRUS_DELETED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739513));
pub const STATUS_BAD_MCFG_TABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739512));
pub const STATUS_CANNOT_BREAK_OPLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739511));
pub const STATUS_BAD_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739510));
pub const STATUS_BAD_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739509));
pub const STATUS_NO_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739508));
pub const STATUS_FILE_HANDLE_REVOKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073739504));
pub const STATUS_WOW_ASSERTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073702760));
pub const STATUS_INVALID_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700864));
pub const STATUS_HMAC_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700863));
pub const STATUS_AUTH_TAG_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700862));
pub const STATUS_INVALID_STATE_TRANSITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700861));
pub const STATUS_INVALID_KERNEL_INFO_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700860));
pub const STATUS_INVALID_PEP_INFO_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700859));
pub const STATUS_HANDLE_REVOKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700858));
pub const STATUS_EOF_ON_GHOSTED_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700857));
pub const STATUS_CC_NEEDS_CALLBACK_SECTION_DRAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700856));
pub const STATUS_IPSEC_QUEUE_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700848));
pub const STATUS_ND_QUEUE_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700847));
pub const STATUS_HOPLIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700846));
pub const STATUS_PROTOCOL_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700845));
pub const STATUS_FASTPATH_REJECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700844));
pub const STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700736));
pub const STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700735));
pub const STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700734));
pub const STATUS_XML_PARSE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700733));
pub const STATUS_XMLDSIG_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700732));
pub const STATUS_WRONG_COMPARTMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700731));
pub const STATUS_AUTHIP_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700730));
pub const STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700729));
pub const STATUS_DS_OID_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700728));
pub const STATUS_INCORRECT_ACCOUNT_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700727));
pub const STATUS_HASH_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700608));
pub const STATUS_HASH_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700607));
pub const STATUS_SECONDARY_IC_PROVIDER_NOT_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700575));
pub const STATUS_GPIO_CLIENT_INFORMATION_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700574));
pub const STATUS_GPIO_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700573));
pub const STATUS_GPIO_INVALID_REGISTRATION_PACKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700572));
pub const STATUS_GPIO_OPERATION_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700571));
pub const STATUS_GPIO_INCOMPATIBLE_CONNECT_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700570));
pub const STATUS_GPIO_INTERRUPT_ALREADY_UNMASKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147442393));
pub const STATUS_CANNOT_SWITCH_RUNLEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700543));
pub const STATUS_INVALID_RUNLEVEL_SETTING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700542));
pub const STATUS_RUNLEVEL_SWITCH_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700541));
pub const STATUS_SERVICES_FAILED_AUTOSTART = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073783108));
pub const STATUS_RUNLEVEL_SWITCH_AGENT_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700539));
pub const STATUS_RUNLEVEL_SWITCH_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700538));
pub const STATUS_NOT_APPCONTAINER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700352));
pub const STATUS_NOT_SUPPORTED_IN_APPCONTAINER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700351));
pub const STATUS_INVALID_PACKAGE_SID_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700350));
pub const STATUS_LPAC_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700349));
pub const STATUS_ADMINLESS_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700348));
pub const STATUS_APP_DATA_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700223));
pub const STATUS_APP_DATA_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700222));
pub const STATUS_APP_DATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700221));
pub const STATUS_APP_DATA_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700220));
pub const STATUS_APP_DATA_REBOOT_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700219));
pub const STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700191));
pub const STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700190));
pub const STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700189));
pub const STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700188));
pub const STATUS_WOF_WIM_HEADER_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700187));
pub const STATUS_WOF_WIM_RESOURCE_TABLE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700186));
pub const STATUS_WOF_FILE_RESOURCE_TABLE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073700185));
pub const STATUS_CIMFS_IMAGE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073692671));
pub const STATUS_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073689087));
pub const STATUS_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073689086));
pub const STATUS_FILE_SYSTEM_VIRTUALIZATION_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073689085));
pub const STATUS_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073689084));
pub const STATUS_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073689083));
pub const STATUS_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688832));
pub const STATUS_CLOUD_FILE_PROVIDER_NOT_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688831));
pub const STATUS_CLOUD_FILE_METADATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688830));
pub const STATUS_CLOUD_FILE_METADATA_TOO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688829));
pub const STATUS_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147430652));
pub const STATUS_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2147430651));
pub const STATUS_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688826));
pub const STATUS_NOT_A_CLOUD_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688825));
pub const STATUS_CLOUD_FILE_NOT_IN_SYNC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688824));
pub const STATUS_CLOUD_FILE_ALREADY_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688823));
pub const STATUS_CLOUD_FILE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688822));
pub const STATUS_CLOUD_FILE_INVALID_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688821));
pub const STATUS_CLOUD_FILE_READ_ONLY_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688820));
pub const STATUS_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688819));
pub const STATUS_CLOUD_FILE_VALIDATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688818));
pub const STATUS_CLOUD_FILE_AUTHENTICATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688817));
pub const STATUS_CLOUD_FILE_INSUFFICIENT_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688816));
pub const STATUS_CLOUD_FILE_NETWORK_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688815));
pub const STATUS_CLOUD_FILE_UNSUCCESSFUL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688814));
pub const STATUS_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688813));
pub const STATUS_CLOUD_FILE_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688812));
pub const STATUS_CLOUD_FILE_PINNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688811));
pub const STATUS_CLOUD_FILE_REQUEST_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688810));
pub const STATUS_CLOUD_FILE_PROPERTY_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688809));
pub const STATUS_CLOUD_FILE_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688808));
pub const STATUS_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688807));
pub const STATUS_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688806));
pub const STATUS_CLOUD_FILE_REQUEST_CANCELED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688805));
pub const STATUS_CLOUD_FILE_PROVIDER_TERMINATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688803));
pub const STATUS_NOT_A_CLOUD_SYNC_ROOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688802));
pub const STATUS_CLOUD_FILE_REQUEST_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688801));
pub const STATUS_CLOUD_FILE_DEHYDRATION_DISALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073688800));
pub const STATUS_FILE_SNAP_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679104));
pub const STATUS_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679103));
pub const STATUS_FILE_SNAP_MODIFY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679102));
pub const STATUS_FILE_SNAP_IO_NOT_COORDINATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679101));
pub const STATUS_FILE_SNAP_UNEXPECTED_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679100));
pub const STATUS_FILE_SNAP_INVALID_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073679099));
pub const DBG_NO_STATE_CHANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073676287));
pub const DBG_APP_NOT_IDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073676286));
pub const RPC_NT_INVALID_STRING_BINDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610751));
pub const RPC_NT_WRONG_KIND_OF_BINDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610750));
pub const RPC_NT_INVALID_BINDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610749));
pub const RPC_NT_PROTSEQ_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610748));
pub const RPC_NT_INVALID_RPC_PROTSEQ = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610747));
pub const RPC_NT_INVALID_STRING_UUID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610746));
pub const RPC_NT_INVALID_ENDPOINT_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610745));
pub const RPC_NT_INVALID_NET_ADDR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610744));
pub const RPC_NT_NO_ENDPOINT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610743));
pub const RPC_NT_INVALID_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610742));
pub const RPC_NT_OBJECT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610741));
pub const RPC_NT_ALREADY_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610740));
pub const RPC_NT_TYPE_ALREADY_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610739));
pub const RPC_NT_ALREADY_LISTENING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610738));
pub const RPC_NT_NO_PROTSEQS_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610737));
pub const RPC_NT_NOT_LISTENING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610736));
pub const RPC_NT_UNKNOWN_MGR_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610735));
pub const RPC_NT_UNKNOWN_IF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610734));
pub const RPC_NT_NO_BINDINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610733));
pub const RPC_NT_NO_PROTSEQS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610732));
pub const RPC_NT_CANT_CREATE_ENDPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610731));
pub const RPC_NT_OUT_OF_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610730));
pub const RPC_NT_SERVER_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610729));
pub const RPC_NT_SERVER_TOO_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610728));
pub const RPC_NT_INVALID_NETWORK_OPTIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610727));
pub const RPC_NT_NO_CALL_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610726));
pub const RPC_NT_CALL_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610725));
pub const RPC_NT_CALL_FAILED_DNE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610724));
pub const RPC_NT_PROTOCOL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610723));
pub const RPC_NT_UNSUPPORTED_TRANS_SYN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610721));
pub const RPC_NT_UNSUPPORTED_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610719));
pub const RPC_NT_INVALID_TAG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610718));
pub const RPC_NT_INVALID_BOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610717));
pub const RPC_NT_NO_ENTRY_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610716));
pub const RPC_NT_INVALID_NAME_SYNTAX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610715));
pub const RPC_NT_UNSUPPORTED_NAME_SYNTAX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610714));
pub const RPC_NT_UUID_NO_ADDRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610712));
pub const RPC_NT_DUPLICATE_ENDPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610711));
pub const RPC_NT_UNKNOWN_AUTHN_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610710));
pub const RPC_NT_MAX_CALLS_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610709));
pub const RPC_NT_STRING_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610708));
pub const RPC_NT_PROTSEQ_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610707));
pub const RPC_NT_PROCNUM_OUT_OF_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610706));
pub const RPC_NT_BINDING_HAS_NO_AUTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610705));
pub const RPC_NT_UNKNOWN_AUTHN_SERVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610704));
pub const RPC_NT_UNKNOWN_AUTHN_LEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610703));
pub const RPC_NT_INVALID_AUTH_IDENTITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610702));
pub const RPC_NT_UNKNOWN_AUTHZ_SERVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610701));
pub const EPT_NT_INVALID_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610700));
pub const EPT_NT_CANT_PERFORM_OP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610699));
pub const EPT_NT_NOT_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610698));
pub const RPC_NT_NOTHING_TO_EXPORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610697));
pub const RPC_NT_INCOMPLETE_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610696));
pub const RPC_NT_INVALID_VERS_OPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610695));
pub const RPC_NT_NO_MORE_MEMBERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610694));
pub const RPC_NT_NOT_ALL_OBJS_UNEXPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610693));
pub const RPC_NT_INTERFACE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610692));
pub const RPC_NT_ENTRY_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610691));
pub const RPC_NT_ENTRY_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610690));
pub const RPC_NT_NAME_SERVICE_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610689));
pub const RPC_NT_INVALID_NAF_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610688));
pub const RPC_NT_CANNOT_SUPPORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610687));
pub const RPC_NT_NO_CONTEXT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610686));
pub const RPC_NT_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610685));
pub const RPC_NT_ZERO_DIVIDE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610684));
pub const RPC_NT_ADDRESS_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610683));
pub const RPC_NT_FP_DIV_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610682));
pub const RPC_NT_FP_UNDERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610681));
pub const RPC_NT_FP_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610680));
pub const RPC_NT_NO_MORE_ENTRIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545215));
pub const RPC_NT_SS_CHAR_TRANS_OPEN_FAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545214));
pub const RPC_NT_SS_CHAR_TRANS_SHORT_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545213));
pub const RPC_NT_SS_IN_NULL_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545212));
pub const RPC_NT_SS_CONTEXT_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545211));
pub const RPC_NT_SS_CONTEXT_DAMAGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545210));
pub const RPC_NT_SS_HANDLES_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545209));
pub const RPC_NT_SS_CANNOT_GET_CALL_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545208));
pub const RPC_NT_NULL_REF_POINTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545207));
pub const RPC_NT_ENUM_VALUE_OUT_OF_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545206));
pub const RPC_NT_BYTE_COUNT_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545205));
pub const RPC_NT_BAD_STUB_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545204));
pub const RPC_NT_CALL_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610679));
pub const RPC_NT_NO_MORE_BINDINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610678));
pub const RPC_NT_GROUP_MEMBER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610677));
pub const EPT_NT_CANT_CREATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610676));
pub const RPC_NT_INVALID_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610675));
pub const RPC_NT_NO_INTERFACES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610673));
pub const RPC_NT_CALL_CANCELLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610672));
pub const RPC_NT_BINDING_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610671));
pub const RPC_NT_COMM_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610670));
pub const RPC_NT_UNSUPPORTED_AUTHN_LEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610669));
pub const RPC_NT_NO_PRINC_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610668));
pub const RPC_NT_NOT_RPC_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610667));
pub const RPC_NT_UUID_LOCAL_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073872982));
pub const RPC_NT_SEC_PKG_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610665));
pub const RPC_NT_NOT_CANCELLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610664));
pub const RPC_NT_INVALID_ES_ACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545127));
pub const RPC_NT_WRONG_ES_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545126));
pub const RPC_NT_WRONG_STUB_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545125));
pub const RPC_NT_INVALID_PIPE_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545124));
pub const RPC_NT_INVALID_PIPE_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545123));
pub const RPC_NT_WRONG_PIPE_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545122));
pub const RPC_NT_PIPE_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545121));
pub const RPC_NT_PIPE_DISCIPLINE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545120));
pub const RPC_NT_PIPE_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073545119));
pub const RPC_NT_INVALID_ASYNC_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610654));
pub const RPC_NT_INVALID_ASYNC_CALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610653));
pub const RPC_NT_PROXY_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610652));
pub const RPC_NT_COOKIE_AUTH_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073610651));
pub const RPC_NT_SEND_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1073873071));
pub const STATUS_ACPI_INVALID_OPCODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431103));
pub const STATUS_ACPI_STACK_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431102));
pub const STATUS_ACPI_ASSERT_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431101));
pub const STATUS_ACPI_INVALID_INDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431100));
pub const STATUS_ACPI_INVALID_ARGUMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431099));
pub const STATUS_ACPI_FATAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431098));
pub const STATUS_ACPI_INVALID_SUPERNAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431097));
pub const STATUS_ACPI_INVALID_ARGTYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431096));
pub const STATUS_ACPI_INVALID_OBJTYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431095));
pub const STATUS_ACPI_INVALID_TARGETTYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431094));
pub const STATUS_ACPI_INCORRECT_ARGUMENT_COUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431093));
pub const STATUS_ACPI_ADDRESS_NOT_MAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431092));
pub const STATUS_ACPI_INVALID_EVENTTYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431091));
pub const STATUS_ACPI_HANDLER_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431090));
pub const STATUS_ACPI_INVALID_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431089));
pub const STATUS_ACPI_INVALID_REGION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431088));
pub const STATUS_ACPI_INVALID_ACCESS_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431087));
pub const STATUS_ACPI_ACQUIRE_GLOBAL_LOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431086));
pub const STATUS_ACPI_ALREADY_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431085));
pub const STATUS_ACPI_NOT_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431084));
pub const STATUS_ACPI_INVALID_MUTEX_LEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431083));
pub const STATUS_ACPI_MUTEX_NOT_OWNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431082));
pub const STATUS_ACPI_MUTEX_NOT_OWNER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431081));
pub const STATUS_ACPI_RS_ACCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431080));
pub const STATUS_ACPI_INVALID_TABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431079));
pub const STATUS_ACPI_REG_HANDLER_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431072));
pub const STATUS_ACPI_POWER_REQUEST_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072431071));
pub const STATUS_CTX_WINSTATION_NAME_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086463));
pub const STATUS_CTX_INVALID_PD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086462));
pub const STATUS_CTX_PD_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086461));
pub const STATUS_CTX_CDM_CONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1074397188));
pub const STATUS_CTX_CDM_DISCONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1074397189));
pub const STATUS_CTX_CLOSE_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086458));
pub const STATUS_CTX_NO_OUTBUF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086457));
pub const STATUS_CTX_MODEM_INF_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086456));
pub const STATUS_CTX_INVALID_MODEMNAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086455));
pub const STATUS_CTX_RESPONSE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086454));
pub const STATUS_CTX_MODEM_RESPONSE_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086453));
pub const STATUS_CTX_MODEM_RESPONSE_NO_CARRIER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086452));
pub const STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086451));
pub const STATUS_CTX_MODEM_RESPONSE_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086450));
pub const STATUS_CTX_MODEM_RESPONSE_VOICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086449));
pub const STATUS_CTX_TD_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086448));
pub const STATUS_CTX_LICENSE_CLIENT_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086446));
pub const STATUS_CTX_LICENSE_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086445));
pub const STATUS_CTX_LICENSE_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086444));
pub const STATUS_CTX_WINSTATION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086443));
pub const STATUS_CTX_WINSTATION_NAME_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086442));
pub const STATUS_CTX_WINSTATION_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086441));
pub const STATUS_CTX_BAD_VIDEO_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086440));
pub const STATUS_CTX_GRAPHICS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086430));
pub const STATUS_CTX_NOT_CONSOLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086428));
pub const STATUS_CTX_CLIENT_QUERY_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086426));
pub const STATUS_CTX_CONSOLE_DISCONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086425));
pub const STATUS_CTX_CONSOLE_CONNECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086424));
pub const STATUS_CTX_SHADOW_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086422));
pub const STATUS_CTX_WINSTATION_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086421));
pub const STATUS_CTX_INVALID_WD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086418));
pub const STATUS_CTX_WD_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086417));
pub const STATUS_CTX_SHADOW_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086416));
pub const STATUS_CTX_SHADOW_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086415));
pub const STATUS_RDP_PROTOCOL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086414));
pub const STATUS_CTX_CLIENT_LICENSE_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086413));
pub const STATUS_CTX_CLIENT_LICENSE_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086412));
pub const STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086411));
pub const STATUS_CTX_SHADOW_NOT_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086410));
pub const STATUS_CTX_LOGON_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086409));
pub const STATUS_CTX_SECURITY_LAYER_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086408));
pub const STATUS_TS_INCOMPATIBLE_SESSIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086407));
pub const STATUS_TS_VIDEO_SUBSYSTEM_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073086406));
pub const STATUS_PNP_BAD_MPS_TABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073479627));
pub const STATUS_PNP_TRANSLATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073479626));
pub const STATUS_PNP_IRQ_TRANSLATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073479625));
pub const STATUS_PNP_INVALID_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073479624));
pub const STATUS_IO_REISSUE_AS_CACHED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073479623));
pub const STATUS_MUI_FILE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020927));
pub const STATUS_MUI_INVALID_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020926));
pub const STATUS_MUI_INVALID_RC_CONFIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020925));
pub const STATUS_MUI_INVALID_LOCALE_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020924));
pub const STATUS_MUI_INVALID_ULTIMATEFALLBACK_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020923));
pub const STATUS_MUI_FILE_NOT_LOADED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020922));
pub const STATUS_RESOURCE_ENUM_USER_STOP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1073020921));
pub const STATUS_FLT_NO_HANDLER_DEFINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906815));
pub const STATUS_FLT_CONTEXT_ALREADY_DEFINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906814));
pub const STATUS_FLT_INVALID_ASYNCHRONOUS_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906813));
pub const STATUS_FLT_DISALLOW_FAST_IO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906812));
pub const STATUS_FLT_INVALID_NAME_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906811));
pub const STATUS_FLT_NOT_SAFE_TO_POST_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906810));
pub const STATUS_FLT_NOT_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906809));
pub const STATUS_FLT_FILTER_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906808));
pub const STATUS_FLT_POST_OPERATION_CLEANUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906807));
pub const STATUS_FLT_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906806));
pub const STATUS_FLT_DELETING_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906805));
pub const STATUS_FLT_MUST_BE_NONPAGED_POOL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906804));
pub const STATUS_FLT_DUPLICATE_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906803));
pub const STATUS_FLT_CBDQ_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906802));
pub const STATUS_FLT_DO_NOT_ATTACH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906801));
pub const STATUS_FLT_DO_NOT_DETACH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906800));
pub const STATUS_FLT_INSTANCE_ALTITUDE_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906799));
pub const STATUS_FLT_INSTANCE_NAME_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906798));
pub const STATUS_FLT_FILTER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906797));
pub const STATUS_FLT_VOLUME_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906796));
pub const STATUS_FLT_INSTANCE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906795));
pub const STATUS_FLT_CONTEXT_ALLOCATION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906794));
pub const STATUS_FLT_INVALID_CONTEXT_REGISTRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906793));
pub const STATUS_FLT_NAME_CACHE_MISS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906792));
pub const STATUS_FLT_NO_DEVICE_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906791));
pub const STATUS_FLT_VOLUME_ALREADY_MOUNTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906790));
pub const STATUS_FLT_ALREADY_ENLISTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906789));
pub const STATUS_FLT_CONTEXT_ALREADY_LINKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906788));
pub const STATUS_FLT_NO_WAITER_FOR_REPLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906784));
pub const STATUS_FLT_REGISTRATION_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071906781));
pub const STATUS_SXS_SECTION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365567));
pub const STATUS_SXS_CANT_GEN_ACTCTX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365566));
pub const STATUS_SXS_INVALID_ACTCTXDATA_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365565));
pub const STATUS_SXS_ASSEMBLY_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365564));
pub const STATUS_SXS_MANIFEST_FORMAT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365563));
pub const STATUS_SXS_MANIFEST_PARSE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365562));
pub const STATUS_SXS_ACTIVATION_CONTEXT_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365561));
pub const STATUS_SXS_KEY_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365560));
pub const STATUS_SXS_VERSION_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365559));
pub const STATUS_SXS_WRONG_SECTION_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365558));
pub const STATUS_SXS_THREAD_QUERIES_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365557));
pub const STATUS_SXS_ASSEMBLY_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365556));
pub const STATUS_SXS_RELEASE_ACTIVATION_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075118093));
pub const STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365554));
pub const STATUS_SXS_EARLY_DEACTIVATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365553));
pub const STATUS_SXS_INVALID_DEACTIVATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365552));
pub const STATUS_SXS_MULTIPLE_DEACTIVATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365551));
pub const STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365550));
pub const STATUS_SXS_PROCESS_TERMINATION_REQUESTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365549));
pub const STATUS_SXS_CORRUPT_ACTIVATION_STACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365548));
pub const STATUS_SXS_CORRUPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365547));
pub const STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365546));
pub const STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365545));
pub const STATUS_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365544));
pub const STATUS_SXS_IDENTITY_PARSE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365543));
pub const STATUS_SXS_COMPONENT_STORE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365542));
pub const STATUS_SXS_FILE_HASH_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365541));
pub const STATUS_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365540));
pub const STATUS_SXS_IDENTITIES_DIFFERENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365539));
pub const STATUS_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365538));
pub const STATUS_SXS_FILE_NOT_PART_OF_ASSEMBLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365537));
pub const STATUS_ADVANCED_INSTALLER_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365536));
pub const STATUS_XML_ENCODING_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365535));
pub const STATUS_SXS_MANIFEST_TOO_BIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365534));
pub const STATUS_SXS_SETTING_NOT_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365533));
pub const STATUS_SXS_TRANSACTION_CLOSURE_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365532));
pub const STATUS_SMI_PRIMITIVE_INSTALLER_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365531));
pub const STATUS_GENERIC_COMMAND_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365530));
pub const STATUS_SXS_FILE_HASH_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072365529));
pub const STATUS_CLUSTER_INVALID_NODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496639));
pub const STATUS_CLUSTER_NODE_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496638));
pub const STATUS_CLUSTER_JOIN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496637));
pub const STATUS_CLUSTER_NODE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496636));
pub const STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496635));
pub const STATUS_CLUSTER_NETWORK_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496634));
pub const STATUS_CLUSTER_NETWORK_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496633));
pub const STATUS_CLUSTER_NETINTERFACE_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496632));
pub const STATUS_CLUSTER_NETINTERFACE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496631));
pub const STATUS_CLUSTER_INVALID_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496630));
pub const STATUS_CLUSTER_INVALID_NETWORK_PROVIDER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496629));
pub const STATUS_CLUSTER_NODE_DOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496628));
pub const STATUS_CLUSTER_NODE_UNREACHABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496627));
pub const STATUS_CLUSTER_NODE_NOT_MEMBER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496626));
pub const STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496625));
pub const STATUS_CLUSTER_INVALID_NETWORK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496624));
pub const STATUS_CLUSTER_NO_NET_ADAPTERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496623));
pub const STATUS_CLUSTER_NODE_UP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496622));
pub const STATUS_CLUSTER_NODE_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496621));
pub const STATUS_CLUSTER_NODE_NOT_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496620));
pub const STATUS_CLUSTER_NO_SECURITY_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496619));
pub const STATUS_CLUSTER_NETWORK_NOT_INTERNAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496618));
pub const STATUS_CLUSTER_POISONED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496617));
pub const STATUS_CLUSTER_NON_CSV_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496616));
pub const STATUS_CLUSTER_CSV_VOLUME_NOT_LOCAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496615));
pub const STATUS_CLUSTER_CSV_READ_OPLOCK_BREAK_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496608));
pub const STATUS_CLUSTER_CSV_AUTO_PAUSE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496607));
pub const STATUS_CLUSTER_CSV_REDIRECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496606));
pub const STATUS_CLUSTER_CSV_NOT_REDIRECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496605));
pub const STATUS_CLUSTER_CSV_VOLUME_DRAINING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496604));
pub const STATUS_CLUSTER_CSV_SNAPSHOT_CREATION_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496603));
pub const STATUS_CLUSTER_CSV_VOLUME_DRAINING_SUCCEEDED_DOWNLEVEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496602));
pub const STATUS_CLUSTER_CSV_NO_SNAPSHOTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496601));
pub const STATUS_CSV_IO_PAUSE_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496600));
pub const STATUS_CLUSTER_CSV_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496599));
pub const STATUS_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496592));
pub const STATUS_CLUSTER_CAM_TICKET_REPLAY_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072496591));
pub const STATUS_TRANSACTIONAL_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103423));
pub const STATUS_INVALID_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103422));
pub const STATUS_TRANSACTION_NOT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103421));
pub const STATUS_TM_INITIALIZATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103420));
pub const STATUS_RM_NOT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103419));
pub const STATUS_RM_METADATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103418));
pub const STATUS_TRANSACTION_NOT_JOINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103417));
pub const STATUS_DIRECTORY_NOT_RM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103416));
pub const STATUS_COULD_NOT_RESIZE_LOG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145845239));
pub const STATUS_TRANSACTIONS_UNSUPPORTED_REMOTE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103414));
pub const STATUS_LOG_RESIZE_INVALID_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103413));
pub const STATUS_REMOTE_FILE_VERSION_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103412));
pub const STATUS_CRM_PROTOCOL_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103409));
pub const STATUS_TRANSACTION_PROPAGATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103408));
pub const STATUS_CRM_PROTOCOL_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103407));
pub const STATUS_TRANSACTION_SUPERIOR_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103406));
pub const STATUS_TRANSACTION_REQUEST_NOT_VALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103405));
pub const STATUS_TRANSACTION_NOT_REQUESTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103404));
pub const STATUS_TRANSACTION_ALREADY_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103403));
pub const STATUS_TRANSACTION_ALREADY_COMMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103402));
pub const STATUS_TRANSACTION_INVALID_MARSHALL_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103401));
pub const STATUS_CURRENT_TRANSACTION_NOT_VALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103400));
pub const STATUS_LOG_GROWTH_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103399));
pub const STATUS_OBJECT_NO_LONGER_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103391));
pub const STATUS_STREAM_MINIVERSION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103390));
pub const STATUS_STREAM_MINIVERSION_NOT_VALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103389));
pub const STATUS_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103388));
pub const STATUS_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103387));
pub const STATUS_CANT_CREATE_MORE_STREAM_MINIVERSIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103386));
pub const STATUS_HANDLE_NO_LONGER_VALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103384));
pub const STATUS_NO_TXF_METADATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145845207));
pub const STATUS_LOG_CORRUPTION_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103376));
pub const STATUS_CANT_RECOVER_WITH_HANDLE_OPEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145845199));
pub const STATUS_RM_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103374));
pub const STATUS_ENLISTMENT_NOT_SUPERIOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103373));
pub const STATUS_RECOVERY_NOT_NEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075380276));
pub const STATUS_RM_ALREADY_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075380277));
pub const STATUS_FILE_IDENTITY_NOT_PERSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103370));
pub const STATUS_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103369));
pub const STATUS_CANT_CROSS_RM_BOUNDARY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103368));
pub const STATUS_TXF_DIR_NOT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103367));
pub const STATUS_INDOUBT_TRANSACTIONS_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103366));
pub const STATUS_TM_VOLATILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103365));
pub const STATUS_ROLLBACK_TIMER_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103364));
pub const STATUS_TXF_ATTRIBUTE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103363));
pub const STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103362));
pub const STATUS_TRANSACTIONAL_OPEN_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103361));
pub const STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103360));
pub const STATUS_TXF_METADATA_ALREADY_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145845183));
pub const STATUS_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145845182));
pub const STATUS_TRANSACTION_REQUIRED_PROMOTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103357));
pub const STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103356));
pub const STATUS_TRANSACTIONS_NOT_FROZEN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103355));
pub const STATUS_TRANSACTION_FREEZE_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103354));
pub const STATUS_NOT_SNAPSHOT_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103353));
pub const STATUS_NO_SAVEPOINT_WITH_OPEN_FILES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103352));
pub const STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103351));
pub const STATUS_TM_IDENTITY_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103350));
pub const STATUS_FLOATED_SECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103349));
pub const STATUS_CANNOT_ACCEPT_TRANSACTED_WORK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103348));
pub const STATUS_CANNOT_ABORT_TRANSACTIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103347));
pub const STATUS_TRANSACTION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103346));
pub const STATUS_RESOURCEMANAGER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103345));
pub const STATUS_ENLISTMENT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103344));
pub const STATUS_TRANSACTIONMANAGER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103343));
pub const STATUS_TRANSACTIONMANAGER_NOT_ONLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103342));
pub const STATUS_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103341));
pub const STATUS_TRANSACTION_NOT_ROOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103340));
pub const STATUS_TRANSACTION_OBJECT_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103339));
pub const STATUS_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103338));
pub const STATUS_TRANSACTION_RESPONSE_NOT_ENLISTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103337));
pub const STATUS_TRANSACTION_RECORD_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103336));
pub const STATUS_NO_LINK_TRACKING_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103335));
pub const STATUS_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103334));
pub const STATUS_TRANSACTION_INTEGRITY_VIOLATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103333));
pub const STATUS_TRANSACTIONMANAGER_IDENTITY_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103332));
pub const STATUS_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103331));
pub const STATUS_TRANSACTION_MUST_WRITETHROUGH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103330));
pub const STATUS_TRANSACTION_NO_SUPERIOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103329));
pub const STATUS_EXPIRED_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103328));
pub const STATUS_TRANSACTION_NOT_ENLISTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072103327));
pub const STATUS_LOG_SECTOR_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037887));
pub const STATUS_LOG_SECTOR_PARITY_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037886));
pub const STATUS_LOG_SECTOR_REMAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037885));
pub const STATUS_LOG_BLOCK_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037884));
pub const STATUS_LOG_INVALID_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037883));
pub const STATUS_LOG_BLOCKS_EXHAUSTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037882));
pub const STATUS_LOG_READ_CONTEXT_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037881));
pub const STATUS_LOG_RESTART_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037880));
pub const STATUS_LOG_BLOCK_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037879));
pub const STATUS_LOG_BLOCK_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037878));
pub const STATUS_LOG_READ_MODE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037877));
pub const STATUS_LOG_NO_RESTART = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075445772));
pub const STATUS_LOG_METADATA_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037875));
pub const STATUS_LOG_METADATA_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037874));
pub const STATUS_LOG_METADATA_INCONSISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037873));
pub const STATUS_LOG_RESERVATION_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037872));
pub const STATUS_LOG_CANT_DELETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037871));
pub const STATUS_LOG_CONTAINER_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037870));
pub const STATUS_LOG_START_OF_LOG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037869));
pub const STATUS_LOG_POLICY_ALREADY_INSTALLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037868));
pub const STATUS_LOG_POLICY_NOT_INSTALLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037867));
pub const STATUS_LOG_POLICY_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037866));
pub const STATUS_LOG_POLICY_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037865));
pub const STATUS_LOG_PINNED_ARCHIVE_TAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037864));
pub const STATUS_LOG_RECORD_NONEXISTENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037863));
pub const STATUS_LOG_RECORDS_RESERVED_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037862));
pub const STATUS_LOG_SPACE_RESERVED_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037861));
pub const STATUS_LOG_TAIL_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037860));
pub const STATUS_LOG_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037859));
pub const STATUS_LOG_MULTIPLEXED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037858));
pub const STATUS_LOG_DEDICATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037857));
pub const STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037856));
pub const STATUS_LOG_ARCHIVE_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037855));
pub const STATUS_LOG_EPHEMERAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037854));
pub const STATUS_LOG_NOT_ENOUGH_CONTAINERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037853));
pub const STATUS_LOG_CLIENT_ALREADY_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037852));
pub const STATUS_LOG_CLIENT_NOT_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037851));
pub const STATUS_LOG_FULL_HANDLER_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037850));
pub const STATUS_LOG_CONTAINER_READ_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037849));
pub const STATUS_LOG_CONTAINER_WRITE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037848));
pub const STATUS_LOG_CONTAINER_OPEN_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037847));
pub const STATUS_LOG_CONTAINER_STATE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037846));
pub const STATUS_LOG_STATE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037845));
pub const STATUS_LOG_PINNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037844));
pub const STATUS_LOG_METADATA_FLUSH_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037843));
pub const STATUS_LOG_INCONSISTENT_SECURITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037842));
pub const STATUS_LOG_APPENDED_FLUSH_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037841));
pub const STATUS_LOG_PINNED_RESERVATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1072037840));
pub const STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071972118));
pub const STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2145713941));
pub const STATUS_VIDEO_DRIVER_DEBUG_REPORT_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075511532));
pub const STATUS_MONITOR_NO_DESCRIPTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841279));
pub const STATUS_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841278));
pub const STATUS_MONITOR_INVALID_DESCRIPTOR_CHECKSUM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841277));
pub const STATUS_MONITOR_INVALID_STANDARD_TIMING_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841276));
pub const STATUS_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841275));
pub const STATUS_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841274));
pub const STATUS_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841273));
pub const STATUS_MONITOR_NO_MORE_DESCRIPTOR_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841272));
pub const STATUS_MONITOR_INVALID_DETAILED_TIMING_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841271));
pub const STATUS_MONITOR_INVALID_MANUFACTURE_DATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071841270));
pub const STATUS_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775744));
pub const STATUS_GRAPHICS_INSUFFICIENT_DMA_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775743));
pub const STATUS_GRAPHICS_INVALID_DISPLAY_ADAPTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775742));
pub const STATUS_GRAPHICS_ADAPTER_WAS_RESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775741));
pub const STATUS_GRAPHICS_INVALID_DRIVER_MODEL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775740));
pub const STATUS_GRAPHICS_PRESENT_MODE_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775739));
pub const STATUS_GRAPHICS_PRESENT_OCCLUDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775738));
pub const STATUS_GRAPHICS_PRESENT_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775737));
pub const STATUS_GRAPHICS_CANNOTCOLORCONVERT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775736));
pub const STATUS_GRAPHICS_DRIVER_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775735));
pub const STATUS_GRAPHICS_PARTIAL_DATA_POPULATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075707914));
pub const STATUS_GRAPHICS_PRESENT_REDIRECTION_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775733));
pub const STATUS_GRAPHICS_PRESENT_UNOCCLUDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775732));
pub const STATUS_GRAPHICS_WINDOWDC_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775731));
pub const STATUS_GRAPHICS_WINDOWLESS_PRESENT_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775730));
pub const STATUS_GRAPHICS_PRESENT_INVALID_WINDOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775729));
pub const STATUS_GRAPHICS_PRESENT_BUFFER_NOT_BOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775728));
pub const STATUS_GRAPHICS_VAIL_STATE_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775727));
pub const STATUS_GRAPHICS_INDIRECT_DISPLAY_ABANDON_SWAPCHAIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775726));
pub const STATUS_GRAPHICS_INDIRECT_DISPLAY_DEVICE_STOPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775725));
pub const STATUS_GRAPHICS_NO_VIDEO_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775488));
pub const STATUS_GRAPHICS_CANT_LOCK_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775487));
pub const STATUS_GRAPHICS_ALLOCATION_BUSY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775486));
pub const STATUS_GRAPHICS_TOO_MANY_REFERENCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775485));
pub const STATUS_GRAPHICS_TRY_AGAIN_LATER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775484));
pub const STATUS_GRAPHICS_TRY_AGAIN_NOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775483));
pub const STATUS_GRAPHICS_ALLOCATION_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775482));
pub const STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775481));
pub const STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775480));
pub const STATUS_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775479));
pub const STATUS_GRAPHICS_INVALID_ALLOCATION_USAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775472));
pub const STATUS_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775471));
pub const STATUS_GRAPHICS_ALLOCATION_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775470));
pub const STATUS_GRAPHICS_INVALID_ALLOCATION_INSTANCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775469));
pub const STATUS_GRAPHICS_INVALID_ALLOCATION_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775468));
pub const STATUS_GRAPHICS_WRONG_ALLOCATION_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775467));
pub const STATUS_GRAPHICS_ALLOCATION_CONTENT_LOST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775466));
pub const STATUS_GRAPHICS_GPU_EXCEPTION_ON_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071775232));
pub const STATUS_GRAPHICS_SKIP_ALLOCATION_PREPARATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708417));
pub const STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774976));
pub const STATUS_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774975));
pub const STATUS_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774974));
pub const STATUS_GRAPHICS_INVALID_VIDPN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774973));
pub const STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774972));
pub const STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774971));
pub const STATUS_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774970));
pub const STATUS_GRAPHICS_MODE_NOT_PINNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708679));
pub const STATUS_GRAPHICS_INVALID_VIDPN_SOURCEMODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774968));
pub const STATUS_GRAPHICS_INVALID_VIDPN_TARGETMODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774967));
pub const STATUS_GRAPHICS_INVALID_FREQUENCY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774966));
pub const STATUS_GRAPHICS_INVALID_ACTIVE_REGION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774965));
pub const STATUS_GRAPHICS_INVALID_TOTAL_REGION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774964));
pub const STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774960));
pub const STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774959));
pub const STATUS_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774958));
pub const STATUS_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774957));
pub const STATUS_GRAPHICS_MODE_ALREADY_IN_MODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774956));
pub const STATUS_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774955));
pub const STATUS_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774954));
pub const STATUS_GRAPHICS_SOURCE_ALREADY_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774953));
pub const STATUS_GRAPHICS_TARGET_ALREADY_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774952));
pub const STATUS_GRAPHICS_INVALID_VIDPN_PRESENT_PATH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774951));
pub const STATUS_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774950));
pub const STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774949));
pub const STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774948));
pub const STATUS_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774947));
pub const STATUS_GRAPHICS_NO_PREFERRED_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708702));
pub const STATUS_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774945));
pub const STATUS_GRAPHICS_STALE_MODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774944));
pub const STATUS_GRAPHICS_INVALID_MONITOR_SOURCEMODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774943));
pub const STATUS_GRAPHICS_INVALID_MONITOR_SOURCE_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774942));
pub const STATUS_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774941));
pub const STATUS_GRAPHICS_MODE_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774940));
pub const STATUS_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774939));
pub const STATUS_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774938));
pub const STATUS_GRAPHICS_PATH_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774937));
pub const STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774936));
pub const STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774935));
pub const STATUS_GRAPHICS_INVALID_MONITORDESCRIPTORSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774934));
pub const STATUS_GRAPHICS_INVALID_MONITORDESCRIPTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774933));
pub const STATUS_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774932));
pub const STATUS_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774931));
pub const STATUS_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774930));
pub const STATUS_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774929));
pub const STATUS_GRAPHICS_RESOURCES_NOT_RELATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774928));
pub const STATUS_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774927));
pub const STATUS_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774926));
pub const STATUS_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774925));
pub const STATUS_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774924));
pub const STATUS_GRAPHICS_NO_VIDPNMGR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774923));
pub const STATUS_GRAPHICS_NO_ACTIVE_VIDPN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774922));
pub const STATUS_GRAPHICS_STALE_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774921));
pub const STATUS_GRAPHICS_MONITOR_NOT_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774920));
pub const STATUS_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774919));
pub const STATUS_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774918));
pub const STATUS_GRAPHICS_INVALID_VISIBLEREGION_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774917));
pub const STATUS_GRAPHICS_INVALID_STRIDE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774916));
pub const STATUS_GRAPHICS_INVALID_PIXELFORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774915));
pub const STATUS_GRAPHICS_INVALID_COLORBASIS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774914));
pub const STATUS_GRAPHICS_INVALID_PIXELVALUEACCESSMODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774913));
pub const STATUS_GRAPHICS_TARGET_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774912));
pub const STATUS_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774911));
pub const STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774910));
pub const STATUS_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774909));
pub const STATUS_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774908));
pub const STATUS_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774907));
pub const STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774906));
pub const STATUS_GRAPHICS_INVALID_GAMMA_RAMP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774905));
pub const STATUS_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774904));
pub const STATUS_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774903));
pub const STATUS_GRAPHICS_MODE_NOT_IN_MODESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774902));
pub const STATUS_GRAPHICS_DATASET_IS_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708747));
pub const STATUS_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708748));
pub const STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774899));
pub const STATUS_GRAPHICS_INVALID_PATH_CONTENT_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774898));
pub const STATUS_GRAPHICS_INVALID_COPYPROTECTION_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774897));
pub const STATUS_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774896));
pub const STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708753));
pub const STATUS_GRAPHICS_INVALID_SCANLINE_ORDERING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774894));
pub const STATUS_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774893));
pub const STATUS_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774892));
pub const STATUS_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774891));
pub const STATUS_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774890));
pub const STATUS_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774889));
pub const STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774888));
pub const STATUS_GRAPHICS_MAX_NUM_PATHS_REACHED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774887));
pub const STATUS_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774886));
pub const STATUS_GRAPHICS_INVALID_CLIENT_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774885));
pub const STATUS_GRAPHICS_CLIENTVIDPN_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774884));
pub const STATUS_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774720));
pub const STATUS_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774719));
pub const STATUS_GRAPHICS_UNKNOWN_CHILD_STATUS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708975));
pub const STATUS_GRAPHICS_NOT_A_LINKED_ADAPTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774672));
pub const STATUS_GRAPHICS_LEADLINK_NOT_ENUMERATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774671));
pub const STATUS_GRAPHICS_CHAINLINKS_NOT_ENUMERATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774670));
pub const STATUS_GRAPHICS_ADAPTER_CHAIN_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774669));
pub const STATUS_GRAPHICS_CHAINLINKS_NOT_STARTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774668));
pub const STATUS_GRAPHICS_CHAINLINKS_NOT_POWERED_ON = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774667));
pub const STATUS_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774666));
pub const STATUS_GRAPHICS_LEADLINK_START_DEFERRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708983));
pub const STATUS_GRAPHICS_NOT_POST_DEVICE_DRIVER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774664));
pub const STATUS_GRAPHICS_POLLING_TOO_FREQUENTLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708985));
pub const STATUS_GRAPHICS_START_DEFERRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708986));
pub const STATUS_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774661));
pub const STATUS_GRAPHICS_DEPENDABLE_CHILD_STATUS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1075708988));
pub const STATUS_GRAPHICS_OPM_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774464));
pub const STATUS_GRAPHICS_COPP_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774463));
pub const STATUS_GRAPHICS_UAB_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774462));
pub const STATUS_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774461));
pub const STATUS_GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774459));
pub const STATUS_GRAPHICS_OPM_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774453));
pub const STATUS_GRAPHICS_OPM_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774452));
pub const STATUS_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774450));
pub const STATUS_GRAPHICS_OPM_SPANNING_MODE_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774449));
pub const STATUS_GRAPHICS_OPM_THEATER_MODE_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774448));
pub const STATUS_GRAPHICS_PVP_HFS_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774447));
pub const STATUS_GRAPHICS_OPM_INVALID_SRM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774446));
pub const STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774445));
pub const STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774444));
pub const STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774443));
pub const STATUS_GRAPHICS_OPM_HDCP_SRM_NEVER_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774442));
pub const STATUS_GRAPHICS_OPM_RESOLUTION_TOO_HIGH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774441));
pub const STATUS_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774440));
pub const STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774438));
pub const STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774436));
pub const STATUS_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774435));
pub const STATUS_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774434));
pub const STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774433));
pub const STATUS_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774432));
pub const STATUS_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774431));
pub const STATUS_GRAPHICS_I2C_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774336));
pub const STATUS_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774335));
pub const STATUS_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774334));
pub const STATUS_GRAPHICS_I2C_ERROR_RECEIVING_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774333));
pub const STATUS_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774332));
pub const STATUS_GRAPHICS_DDCCI_INVALID_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774331));
pub const STATUS_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774330));
pub const STATUS_GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774329));
pub const STATUS_GRAPHICS_MCA_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774328));
pub const STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774327));
pub const STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774326));
pub const STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774325));
pub const STATUS_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774324));
pub const STATUS_GRAPHICS_MONITOR_NO_LONGER_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774323));
pub const STATUS_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774240));
pub const STATUS_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774239));
pub const STATUS_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774238));
pub const STATUS_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774237));
pub const STATUS_GRAPHICS_INVALID_POINTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774236));
pub const STATUS_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774235));
pub const STATUS_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774234));
pub const STATUS_GRAPHICS_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774233));
pub const STATUS_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071774232));
pub const STATUS_FVE_LOCKED_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579136));
pub const STATUS_FVE_NOT_ENCRYPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579135));
pub const STATUS_FVE_BAD_INFORMATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579134));
pub const STATUS_FVE_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579133));
pub const STATUS_FVE_FAILED_WRONG_FS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579132));
pub const STATUS_FVE_BAD_PARTITION_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579131));
pub const STATUS_FVE_FS_NOT_EXTENDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579130));
pub const STATUS_FVE_FS_MOUNTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579129));
pub const STATUS_FVE_NO_LICENSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579128));
pub const STATUS_FVE_ACTION_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579127));
pub const STATUS_FVE_BAD_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579126));
pub const STATUS_FVE_VOLUME_NOT_BOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579125));
pub const STATUS_FVE_NOT_DATA_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579124));
pub const STATUS_FVE_CONV_READ_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579123));
pub const STATUS_FVE_CONV_WRITE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579122));
pub const STATUS_FVE_OVERLAPPED_UPDATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579121));
pub const STATUS_FVE_FAILED_SECTOR_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579120));
pub const STATUS_FVE_FAILED_AUTHENTICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579119));
pub const STATUS_FVE_NOT_OS_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579118));
pub const STATUS_FVE_KEYFILE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579117));
pub const STATUS_FVE_KEYFILE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579116));
pub const STATUS_FVE_KEYFILE_NO_VMK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579115));
pub const STATUS_FVE_TPM_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579114));
pub const STATUS_FVE_TPM_SRK_AUTH_NOT_ZERO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579113));
pub const STATUS_FVE_TPM_INVALID_PCR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579112));
pub const STATUS_FVE_TPM_NO_VMK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579111));
pub const STATUS_FVE_PIN_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579110));
pub const STATUS_FVE_AUTH_INVALID_APPLICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579109));
pub const STATUS_FVE_AUTH_INVALID_CONFIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579108));
pub const STATUS_FVE_DEBUGGER_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579107));
pub const STATUS_FVE_DRY_RUN_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579106));
pub const STATUS_FVE_BAD_METADATA_POINTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579105));
pub const STATUS_FVE_OLD_METADATA_COPY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579104));
pub const STATUS_FVE_REBOOT_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579103));
pub const STATUS_FVE_RAW_ACCESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579102));
pub const STATUS_FVE_RAW_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579101));
pub const STATUS_FVE_NO_AUTOUNLOCK_MASTER_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579100));
pub const STATUS_FVE_MOR_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579099));
pub const STATUS_FVE_NO_FEATURE_LICENSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579098));
pub const STATUS_FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579097));
pub const STATUS_FVE_CONV_RECOVERY_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579096));
pub const STATUS_FVE_VIRTUALIZED_SPACE_TOO_BIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579095));
pub const STATUS_FVE_INVALID_DATUM_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579094));
pub const STATUS_FVE_VOLUME_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579088));
pub const STATUS_FVE_ENH_PIN_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579087));
pub const STATUS_FVE_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579086));
pub const STATUS_FVE_WIPE_NOT_ALLOWED_ON_TP_STORAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579085));
pub const STATUS_FVE_NOT_ALLOWED_ON_CSV_STACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579084));
pub const STATUS_FVE_NOT_ALLOWED_ON_CLUSTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579083));
pub const STATUS_FVE_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579082));
pub const STATUS_FVE_WIPE_CANCEL_NOT_APPLICABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579081));
pub const STATUS_FVE_EDRIVE_DRY_RUN_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579080));
pub const STATUS_FVE_SECUREBOOT_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579079));
pub const STATUS_FVE_SECUREBOOT_CONFIG_CHANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579078));
pub const STATUS_FVE_DEVICE_LOCKEDOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579077));
pub const STATUS_FVE_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579076));
pub const STATUS_FVE_NOT_DE_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579075));
pub const STATUS_FVE_PROTECTION_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579074));
pub const STATUS_FVE_PROTECTION_CANNOT_BE_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579073));
pub const STATUS_FVE_OSV_KSR_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071579072));
pub const STATUS_FWP_CALLOUT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513599));
pub const STATUS_FWP_CONDITION_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513598));
pub const STATUS_FWP_FILTER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513597));
pub const STATUS_FWP_LAYER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513596));
pub const STATUS_FWP_PROVIDER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513595));
pub const STATUS_FWP_PROVIDER_CONTEXT_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513594));
pub const STATUS_FWP_SUBLAYER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513593));
pub const STATUS_FWP_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513592));
pub const STATUS_FWP_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513591));
pub const STATUS_FWP_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513590));
pub const STATUS_FWP_DYNAMIC_SESSION_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513589));
pub const STATUS_FWP_WRONG_SESSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513588));
pub const STATUS_FWP_NO_TXN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513587));
pub const STATUS_FWP_TXN_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513586));
pub const STATUS_FWP_TXN_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513585));
pub const STATUS_FWP_SESSION_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513584));
pub const STATUS_FWP_INCOMPATIBLE_TXN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513583));
pub const STATUS_FWP_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513582));
pub const STATUS_FWP_NET_EVENTS_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513581));
pub const STATUS_FWP_INCOMPATIBLE_LAYER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513580));
pub const STATUS_FWP_KM_CLIENTS_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513579));
pub const STATUS_FWP_LIFETIME_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513578));
pub const STATUS_FWP_BUILTIN_OBJECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513577));
pub const STATUS_FWP_TOO_MANY_CALLOUTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513576));
pub const STATUS_FWP_NOTIFICATION_DROPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513575));
pub const STATUS_FWP_TRAFFIC_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513574));
pub const STATUS_FWP_INCOMPATIBLE_SA_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513573));
pub const STATUS_FWP_NULL_POINTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513572));
pub const STATUS_FWP_INVALID_ENUMERATOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513571));
pub const STATUS_FWP_INVALID_FLAGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513570));
pub const STATUS_FWP_INVALID_NET_MASK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513569));
pub const STATUS_FWP_INVALID_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513568));
pub const STATUS_FWP_INVALID_INTERVAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513567));
pub const STATUS_FWP_ZERO_LENGTH_ARRAY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513566));
pub const STATUS_FWP_NULL_DISPLAY_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513565));
pub const STATUS_FWP_INVALID_ACTION_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513564));
pub const STATUS_FWP_INVALID_WEIGHT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513563));
pub const STATUS_FWP_MATCH_TYPE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513562));
pub const STATUS_FWP_TYPE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513561));
pub const STATUS_FWP_OUT_OF_BOUNDS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513560));
pub const STATUS_FWP_RESERVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513559));
pub const STATUS_FWP_DUPLICATE_CONDITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513558));
pub const STATUS_FWP_DUPLICATE_KEYMOD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513557));
pub const STATUS_FWP_ACTION_INCOMPATIBLE_WITH_LAYER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513556));
pub const STATUS_FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513555));
pub const STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513554));
pub const STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513553));
pub const STATUS_FWP_INCOMPATIBLE_AUTH_METHOD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513552));
pub const STATUS_FWP_INCOMPATIBLE_DH_GROUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513551));
pub const STATUS_FWP_EM_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513550));
pub const STATUS_FWP_NEVER_MATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513549));
pub const STATUS_FWP_PROVIDER_CONTEXT_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513548));
pub const STATUS_FWP_INVALID_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513547));
pub const STATUS_FWP_TOO_MANY_SUBLAYERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513546));
pub const STATUS_FWP_CALLOUT_NOTIFICATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513545));
pub const STATUS_FWP_INVALID_AUTH_TRANSFORM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513544));
pub const STATUS_FWP_INVALID_CIPHER_TRANSFORM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513543));
pub const STATUS_FWP_INCOMPATIBLE_CIPHER_TRANSFORM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513542));
pub const STATUS_FWP_INVALID_TRANSFORM_COMBINATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513541));
pub const STATUS_FWP_DUPLICATE_AUTH_METHOD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513540));
pub const STATUS_FWP_INVALID_TUNNEL_ENDPOINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513539));
pub const STATUS_FWP_L2_DRIVER_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513538));
pub const STATUS_FWP_KEY_DICTATOR_ALREADY_REGISTERED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513537));
pub const STATUS_FWP_KEY_DICTATION_INVALID_KEYING_MATERIAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513536));
pub const STATUS_FWP_CONNECTIONS_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513535));
pub const STATUS_FWP_INVALID_DNS_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513534));
pub const STATUS_FWP_STILL_ON = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513533));
pub const STATUS_FWP_IKEEXT_NOT_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513532));
pub const STATUS_FWP_TCPIP_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513344));
pub const STATUS_FWP_INJECT_HANDLE_CLOSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513343));
pub const STATUS_FWP_INJECT_HANDLE_STALE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513342));
pub const STATUS_FWP_CANNOT_PEND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513341));
pub const STATUS_FWP_DROP_NOICMP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071513340));
pub const STATUS_NDIS_CLOSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448062));
pub const STATUS_NDIS_BAD_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448060));
pub const STATUS_NDIS_BAD_CHARACTERISTICS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448059));
pub const STATUS_NDIS_ADAPTER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448058));
pub const STATUS_NDIS_OPEN_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448057));
pub const STATUS_NDIS_DEVICE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448056));
pub const STATUS_NDIS_MULTICAST_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448055));
pub const STATUS_NDIS_MULTICAST_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448054));
pub const STATUS_NDIS_MULTICAST_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448053));
pub const STATUS_NDIS_REQUEST_ABORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448052));
pub const STATUS_NDIS_RESET_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448051));
pub const STATUS_NDIS_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071447877));
pub const STATUS_NDIS_INVALID_PACKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448049));
pub const STATUS_NDIS_ADAPTER_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448047));
pub const STATUS_NDIS_INVALID_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448044));
pub const STATUS_NDIS_INVALID_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448043));
pub const STATUS_NDIS_BUFFER_TOO_SHORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448042));
pub const STATUS_NDIS_INVALID_OID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448041));
pub const STATUS_NDIS_ADAPTER_REMOVED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448040));
pub const STATUS_NDIS_UNSUPPORTED_MEDIA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448039));
pub const STATUS_NDIS_GROUP_ADDRESS_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448038));
pub const STATUS_NDIS_FILE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448037));
pub const STATUS_NDIS_ERROR_READING_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448036));
pub const STATUS_NDIS_ALREADY_MAPPED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448035));
pub const STATUS_NDIS_RESOURCE_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448034));
pub const STATUS_NDIS_MEDIA_DISCONNECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448033));
pub const STATUS_NDIS_INVALID_ADDRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448030));
pub const STATUS_NDIS_INVALID_DEVICE_REQUEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448048));
pub const STATUS_NDIS_PAUSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448022));
pub const STATUS_NDIS_INTERFACE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448021));
pub const STATUS_NDIS_UNSUPPORTED_REVISION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448020));
pub const STATUS_NDIS_INVALID_PORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448019));
pub const STATUS_NDIS_INVALID_PORT_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448018));
pub const STATUS_NDIS_LOW_POWER_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448017));
pub const STATUS_NDIS_REINIT_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448016));
pub const STATUS_NDIS_NO_QUEUES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071448015));
pub const STATUS_NDIS_DOT11_AUTO_CONFIG_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439872));
pub const STATUS_NDIS_DOT11_MEDIA_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439871));
pub const STATUS_NDIS_DOT11_POWER_STATE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439870));
pub const STATUS_NDIS_PM_WOL_PATTERN_LIST_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439869));
pub const STATUS_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439868));
pub const STATUS_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439867));
pub const STATUS_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439866));
pub const STATUS_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439865));
pub const STATUS_NDIS_DOT11_AP_BAND_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071439864));
pub const STATUS_NDIS_INDICATION_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1076035585));
pub const STATUS_NDIS_OFFLOAD_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071443953));
pub const STATUS_NDIS_OFFLOAD_CONNECTION_REJECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071443950));
pub const STATUS_NDIS_OFFLOAD_PATH_REJECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071443949));
pub const STATUS_TPM_ERROR_MASK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054848));
pub const STATUS_TPM_AUTHFAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054847));
pub const STATUS_TPM_BADINDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054846));
pub const STATUS_TPM_BAD_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054845));
pub const STATUS_TPM_AUDITFAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054844));
pub const STATUS_TPM_CLEAR_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054843));
pub const STATUS_TPM_DEACTIVATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054842));
pub const STATUS_TPM_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054841));
pub const STATUS_TPM_DISABLED_CMD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054840));
pub const STATUS_TPM_FAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054839));
pub const STATUS_TPM_BAD_ORDINAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054838));
pub const STATUS_TPM_INSTALL_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054837));
pub const STATUS_TPM_INVALID_KEYHANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054836));
pub const STATUS_TPM_KEYNOTFOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054835));
pub const STATUS_TPM_INAPPROPRIATE_ENC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054834));
pub const STATUS_TPM_MIGRATEFAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054833));
pub const STATUS_TPM_INVALID_PCR_INFO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054832));
pub const STATUS_TPM_NOSPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054831));
pub const STATUS_TPM_NOSRK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054830));
pub const STATUS_TPM_NOTSEALED_BLOB = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054829));
pub const STATUS_TPM_OWNER_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054828));
pub const STATUS_TPM_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054827));
pub const STATUS_TPM_SHORTRANDOM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054826));
pub const STATUS_TPM_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054825));
pub const STATUS_TPM_WRONGPCRVAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054824));
pub const STATUS_TPM_BAD_PARAM_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054823));
pub const STATUS_TPM_SHA_THREAD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054822));
pub const STATUS_TPM_SHA_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054821));
pub const STATUS_TPM_FAILEDSELFTEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054820));
pub const STATUS_TPM_AUTH2FAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054819));
pub const STATUS_TPM_BADTAG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054818));
pub const STATUS_TPM_IOERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054817));
pub const STATUS_TPM_ENCRYPT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054816));
pub const STATUS_TPM_DECRYPT_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054815));
pub const STATUS_TPM_INVALID_AUTHHANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054814));
pub const STATUS_TPM_NO_ENDORSEMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054813));
pub const STATUS_TPM_INVALID_KEYUSAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054812));
pub const STATUS_TPM_WRONG_ENTITYTYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054811));
pub const STATUS_TPM_INVALID_POSTINIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054810));
pub const STATUS_TPM_INAPPROPRIATE_SIG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054809));
pub const STATUS_TPM_BAD_KEY_PROPERTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054808));
pub const STATUS_TPM_BAD_MIGRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054807));
pub const STATUS_TPM_BAD_SCHEME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054806));
pub const STATUS_TPM_BAD_DATASIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054805));
pub const STATUS_TPM_BAD_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054804));
pub const STATUS_TPM_BAD_PRESENCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054803));
pub const STATUS_TPM_BAD_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054802));
pub const STATUS_TPM_NO_WRAP_TRANSPORT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054801));
pub const STATUS_TPM_AUDITFAIL_UNSUCCESSFUL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054800));
pub const STATUS_TPM_AUDITFAIL_SUCCESSFUL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054799));
pub const STATUS_TPM_NOTRESETABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054798));
pub const STATUS_TPM_NOTLOCAL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054797));
pub const STATUS_TPM_BAD_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054796));
pub const STATUS_TPM_INVALID_RESOURCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054795));
pub const STATUS_TPM_NOTFIPS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054794));
pub const STATUS_TPM_INVALID_FAMILY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054793));
pub const STATUS_TPM_NO_NV_PERMISSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054792));
pub const STATUS_TPM_REQUIRES_SIGN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054791));
pub const STATUS_TPM_KEY_NOTSUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054790));
pub const STATUS_TPM_AUTH_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054789));
pub const STATUS_TPM_AREA_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054788));
pub const STATUS_TPM_BAD_LOCALITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054787));
pub const STATUS_TPM_READ_ONLY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054786));
pub const STATUS_TPM_PER_NOWRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054785));
pub const STATUS_TPM_FAMILYCOUNT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054784));
pub const STATUS_TPM_WRITE_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054783));
pub const STATUS_TPM_BAD_ATTRIBUTES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054782));
pub const STATUS_TPM_INVALID_STRUCTURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054781));
pub const STATUS_TPM_KEY_OWNER_CONTROL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054780));
pub const STATUS_TPM_BAD_COUNTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054779));
pub const STATUS_TPM_NOT_FULLWRITE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054778));
pub const STATUS_TPM_CONTEXT_GAP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054777));
pub const STATUS_TPM_MAXNVWRITES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054776));
pub const STATUS_TPM_NOOPERATOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054775));
pub const STATUS_TPM_RESOURCEMISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054774));
pub const STATUS_TPM_DELEGATE_LOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054773));
pub const STATUS_TPM_DELEGATE_FAMILY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054772));
pub const STATUS_TPM_DELEGATE_ADMIN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054771));
pub const STATUS_TPM_TRANSPORT_NOTEXCLUSIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054770));
pub const STATUS_TPM_OWNER_CONTROL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054769));
pub const STATUS_TPM_DAA_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054768));
pub const STATUS_TPM_DAA_INPUT_DATA0 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054767));
pub const STATUS_TPM_DAA_INPUT_DATA1 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054766));
pub const STATUS_TPM_DAA_ISSUER_SETTINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054765));
pub const STATUS_TPM_DAA_TPM_SETTINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054764));
pub const STATUS_TPM_DAA_STAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054763));
pub const STATUS_TPM_DAA_ISSUER_VALIDITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054762));
pub const STATUS_TPM_DAA_WRONG_W = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054761));
pub const STATUS_TPM_BAD_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054760));
pub const STATUS_TPM_BAD_DELEGATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054759));
pub const STATUS_TPM_BADCONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054758));
pub const STATUS_TPM_TOOMANYCONTEXTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054757));
pub const STATUS_TPM_MA_TICKET_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054756));
pub const STATUS_TPM_MA_DESTINATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054755));
pub const STATUS_TPM_MA_SOURCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054754));
pub const STATUS_TPM_MA_AUTHORITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054753));
pub const STATUS_TPM_PERMANENTEK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054751));
pub const STATUS_TPM_BAD_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054750));
pub const STATUS_TPM_NOCONTEXTSPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054749));
pub const STATUS_TPM_20_E_ASYMMETRIC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054719));
pub const STATUS_TPM_20_E_ATTRIBUTES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054718));
pub const STATUS_TPM_20_E_HASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054717));
pub const STATUS_TPM_20_E_VALUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054716));
pub const STATUS_TPM_20_E_HIERARCHY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054715));
pub const STATUS_TPM_20_E_KEY_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054713));
pub const STATUS_TPM_20_E_MGF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054712));
pub const STATUS_TPM_20_E_MODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054711));
pub const STATUS_TPM_20_E_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054710));
pub const STATUS_TPM_20_E_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054709));
pub const STATUS_TPM_20_E_KDF = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054708));
pub const STATUS_TPM_20_E_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054707));
pub const STATUS_TPM_20_E_AUTH_FAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054706));
pub const STATUS_TPM_20_E_NONCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054705));
pub const STATUS_TPM_20_E_PP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054704));
pub const STATUS_TPM_20_E_SCHEME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054702));
pub const STATUS_TPM_20_E_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054699));
pub const STATUS_TPM_20_E_SYMMETRIC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054698));
pub const STATUS_TPM_20_E_TAG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054697));
pub const STATUS_TPM_20_E_SELECTOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054696));
pub const STATUS_TPM_20_E_INSUFFICIENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054694));
pub const STATUS_TPM_20_E_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054693));
pub const STATUS_TPM_20_E_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054692));
pub const STATUS_TPM_20_E_POLICY_FAIL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054691));
pub const STATUS_TPM_20_E_INTEGRITY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054689));
pub const STATUS_TPM_20_E_TICKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054688));
pub const STATUS_TPM_20_E_RESERVED_BITS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054687));
pub const STATUS_TPM_20_E_BAD_AUTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054686));
pub const STATUS_TPM_20_E_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054685));
pub const STATUS_TPM_20_E_POLICY_CC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054684));
pub const STATUS_TPM_20_E_BINDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054683));
pub const STATUS_TPM_20_E_CURVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054682));
pub const STATUS_TPM_20_E_ECC_POINT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054681));
pub const STATUS_TPM_20_E_INITIALIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054592));
pub const STATUS_TPM_20_E_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054591));
pub const STATUS_TPM_20_E_SEQUENCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054589));
pub const STATUS_TPM_20_E_PRIVATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054581));
pub const STATUS_TPM_20_E_HMAC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054567));
pub const STATUS_TPM_20_E_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054560));
pub const STATUS_TPM_20_E_EXCLUSIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054559));
pub const STATUS_TPM_20_E_ECC_CURVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054557));
pub const STATUS_TPM_20_E_AUTH_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054556));
pub const STATUS_TPM_20_E_AUTH_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054555));
pub const STATUS_TPM_20_E_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054554));
pub const STATUS_TPM_20_E_PCR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054553));
pub const STATUS_TPM_20_E_PCR_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054552));
pub const STATUS_TPM_20_E_UPGRADE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054547));
pub const STATUS_TPM_20_E_TOO_MANY_CONTEXTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054546));
pub const STATUS_TPM_20_E_AUTH_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054545));
pub const STATUS_TPM_20_E_REBOOT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054544));
pub const STATUS_TPM_20_E_UNBALANCED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054543));
pub const STATUS_TPM_20_E_COMMAND_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054526));
pub const STATUS_TPM_20_E_COMMAND_CODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054525));
pub const STATUS_TPM_20_E_AUTHSIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054524));
pub const STATUS_TPM_20_E_AUTH_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054523));
pub const STATUS_TPM_20_E_NV_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054522));
pub const STATUS_TPM_20_E_NV_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054521));
pub const STATUS_TPM_20_E_NV_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054520));
pub const STATUS_TPM_20_E_NV_AUTHORIZATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054519));
pub const STATUS_TPM_20_E_NV_UNINITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054518));
pub const STATUS_TPM_20_E_NV_SPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054517));
pub const STATUS_TPM_20_E_NV_DEFINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054516));
pub const STATUS_TPM_20_E_BAD_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054512));
pub const STATUS_TPM_20_E_CPHASH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054511));
pub const STATUS_TPM_20_E_PARENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054510));
pub const STATUS_TPM_20_E_NEEDS_TEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054509));
pub const STATUS_TPM_20_E_NO_RESULT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054508));
pub const STATUS_TPM_20_E_SENSITIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071054507));
pub const STATUS_TPM_COMMAND_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071053824));
pub const STATUS_TPM_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071053823));
pub const STATUS_TPM_DUPLICATE_VHANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071053822));
pub const STATUS_TPM_EMBEDDED_COMMAND_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071053821));
pub const STATUS_TPM_EMBEDDED_COMMAND_UNSUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071053820));
pub const STATUS_TPM_RETRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071052800));
pub const STATUS_TPM_NEEDS_SELFTEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071052799));
pub const STATUS_TPM_DOING_SELFTEST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071052798));
pub const STATUS_TPM_DEFEND_LOCK_RUNNING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071052797));
pub const STATUS_TPM_COMMAND_CANCELED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050751));
pub const STATUS_TPM_TOO_MANY_CONTEXTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050750));
pub const STATUS_TPM_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050749));
pub const STATUS_TPM_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050748));
pub const STATUS_TPM_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050747));
pub const STATUS_TPM_PPI_FUNCTION_UNSUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071050746));
pub const STATUS_PCP_ERROR_MASK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046656));
pub const STATUS_PCP_DEVICE_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046655));
pub const STATUS_PCP_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046654));
pub const STATUS_PCP_INVALID_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046653));
pub const STATUS_PCP_FLAG_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046652));
pub const STATUS_PCP_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046651));
pub const STATUS_PCP_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046650));
pub const STATUS_PCP_INTERNAL_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046649));
pub const STATUS_PCP_AUTHENTICATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046648));
pub const STATUS_PCP_AUTHENTICATION_IGNORED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046647));
pub const STATUS_PCP_POLICY_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046646));
pub const STATUS_PCP_PROFILE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046645));
pub const STATUS_PCP_VALIDATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046644));
pub const STATUS_PCP_DEVICE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046643));
pub const STATUS_PCP_WRONG_PARENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046642));
pub const STATUS_PCP_KEY_NOT_LOADED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046641));
pub const STATUS_PCP_NO_KEY_CERTIFICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046640));
pub const STATUS_PCP_KEY_NOT_FINALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046639));
pub const STATUS_PCP_ATTESTATION_CHALLENGE_NOT_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046638));
pub const STATUS_PCP_NOT_PCR_BOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046637));
pub const STATUS_PCP_KEY_ALREADY_FINALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046636));
pub const STATUS_PCP_KEY_USAGE_POLICY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046635));
pub const STATUS_PCP_KEY_USAGE_POLICY_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046634));
pub const STATUS_PCP_SOFT_KEY_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046633));
pub const STATUS_PCP_KEY_NOT_AUTHENTICATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046632));
pub const STATUS_PCP_KEY_NOT_AIK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046631));
pub const STATUS_PCP_KEY_NOT_SIGNING_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046630));
pub const STATUS_PCP_LOCKED_OUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046629));
pub const STATUS_PCP_CLAIM_TYPE_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046628));
pub const STATUS_PCP_TPM_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046627));
pub const STATUS_PCP_BUFFER_LENGTH_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046626));
pub const STATUS_PCP_IFX_RSA_KEY_CREATION_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046625));
pub const STATUS_PCP_TICKET_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046624));
pub const STATUS_PCP_RAW_POLICY_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046623));
pub const STATUS_PCP_KEY_HANDLE_INVALIDATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071046622));
pub const STATUS_PCP_UNSUPPORTED_PSS_SALT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 1076437027));
pub const STATUS_RTPM_CONTEXT_CONTINUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 2699264));
pub const STATUS_RTPM_CONTEXT_COMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 2699265));
pub const STATUS_RTPM_NO_RESULT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071042558));
pub const STATUS_RTPM_PCR_READ_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071042557));
pub const STATUS_RTPM_INVALID_CONTEXT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071042556));
pub const STATUS_RTPM_UNSUPPORTED_CMD = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071042555));
pub const STATUS_TPM_ZERO_EXHAUST_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071038464));
pub const STATUS_HV_INVALID_HYPERCALL_CODE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268414));
pub const STATUS_HV_INVALID_HYPERCALL_INPUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268413));
pub const STATUS_HV_INVALID_ALIGNMENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268412));
pub const STATUS_HV_INVALID_PARAMETER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268411));
pub const STATUS_HV_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268410));
pub const STATUS_HV_INVALID_PARTITION_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268409));
pub const STATUS_HV_OPERATION_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268408));
pub const STATUS_HV_UNKNOWN_PROPERTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268407));
pub const STATUS_HV_PROPERTY_VALUE_OUT_OF_RANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268406));
pub const STATUS_HV_INSUFFICIENT_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268405));
pub const STATUS_HV_PARTITION_TOO_DEEP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268404));
pub const STATUS_HV_INVALID_PARTITION_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268403));
pub const STATUS_HV_INVALID_VP_INDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268402));
pub const STATUS_HV_INVALID_PORT_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268399));
pub const STATUS_HV_INVALID_CONNECTION_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268398));
pub const STATUS_HV_INSUFFICIENT_BUFFERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268397));
pub const STATUS_HV_NOT_ACKNOWLEDGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268396));
pub const STATUS_HV_INVALID_VP_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268395));
pub const STATUS_HV_ACKNOWLEDGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268394));
pub const STATUS_HV_INVALID_SAVE_RESTORE_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268393));
pub const STATUS_HV_INVALID_SYNIC_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268392));
pub const STATUS_HV_OBJECT_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268391));
pub const STATUS_HV_INVALID_PROXIMITY_DOMAIN_INFO = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268390));
pub const STATUS_HV_NO_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268389));
pub const STATUS_HV_INACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268388));
pub const STATUS_HV_NO_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268387));
pub const STATUS_HV_FEATURE_UNAVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268386));
pub const STATUS_HV_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268365));
pub const STATUS_HV_INSUFFICIENT_DEVICE_DOMAINS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268360));
pub const STATUS_HV_CPUID_FEATURE_VALIDATION_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268356));
pub const STATUS_HV_CPUID_XSAVE_FEATURE_VALIDATION_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268355));
pub const STATUS_HV_PROCESSOR_STARTUP_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268354));
pub const STATUS_HV_SMX_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268353));
pub const STATUS_HV_INVALID_LP_INDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268351));
pub const STATUS_HV_INVALID_REGISTER_VALUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268336));
pub const STATUS_HV_INVALID_VTL_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268335));
pub const STATUS_HV_NX_NOT_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268331));
pub const STATUS_HV_INVALID_DEVICE_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268329));
pub const STATUS_HV_INVALID_DEVICE_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268328));
pub const STATUS_HV_PENDING_PAGE_REQUESTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 3473497));
pub const STATUS_HV_PAGE_REQUEST_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268320));
pub const STATUS_HV_INVALID_CPU_GROUP_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268305));
pub const STATUS_HV_INVALID_CPU_GROUP_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268304));
pub const STATUS_HV_OPERATION_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268303));
pub const STATUS_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268302));
pub const STATUS_HV_INSUFFICIENT_ROOT_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268301));
pub const STATUS_HV_EVENT_BUFFER_ALREADY_FREED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268300));
pub const STATUS_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070268299));
pub const STATUS_HV_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070264320));
pub const STATUS_VID_DUPLICATE_HANDLER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137343));
pub const STATUS_VID_TOO_MANY_HANDLERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137342));
pub const STATUS_VID_QUEUE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137341));
pub const STATUS_VID_HANDLER_NOT_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137340));
pub const STATUS_VID_INVALID_OBJECT_NAME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137339));
pub const STATUS_VID_PARTITION_NAME_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137338));
pub const STATUS_VID_MESSAGE_QUEUE_NAME_TOO_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137337));
pub const STATUS_VID_PARTITION_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137336));
pub const STATUS_VID_PARTITION_DOES_NOT_EXIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137335));
pub const STATUS_VID_PARTITION_NAME_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137334));
pub const STATUS_VID_MESSAGE_QUEUE_ALREADY_EXISTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137333));
pub const STATUS_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137332));
pub const STATUS_VID_MB_STILL_REFERENCED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137331));
pub const STATUS_VID_CHILD_GPA_PAGE_SET_CORRUPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137330));
pub const STATUS_VID_INVALID_NUMA_SETTINGS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137329));
pub const STATUS_VID_INVALID_NUMA_NODE_INDEX = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137328));
pub const STATUS_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137327));
pub const STATUS_VID_INVALID_MEMORY_BLOCK_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137326));
pub const STATUS_VID_PAGE_RANGE_OVERFLOW = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137325));
pub const STATUS_VID_INVALID_MESSAGE_QUEUE_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137324));
pub const STATUS_VID_INVALID_GPA_RANGE_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137323));
pub const STATUS_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137322));
pub const STATUS_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137321));
pub const STATUS_VID_INVALID_PPM_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137320));
pub const STATUS_VID_MBPS_ARE_LOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137319));
pub const STATUS_VID_MESSAGE_QUEUE_CLOSED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137318));
pub const STATUS_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137317));
pub const STATUS_VID_STOP_PENDING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137316));
pub const STATUS_VID_INVALID_PROCESSOR_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137315));
pub const STATUS_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137314));
pub const STATUS_VID_KM_INTERFACE_ALREADY_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137313));
pub const STATUS_VID_MB_PROPERTY_ALREADY_SET_RESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137312));
pub const STATUS_VID_MMIO_RANGE_DESTROYED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137311));
pub const STATUS_VID_INVALID_CHILD_GPA_PAGE_SET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137310));
pub const STATUS_VID_RESERVE_PAGE_SET_IS_BEING_USED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137309));
pub const STATUS_VID_RESERVE_PAGE_SET_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137308));
pub const STATUS_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137307));
pub const STATUS_VID_MBP_COUNT_EXCEEDED_LIMIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137306));
pub const STATUS_VID_SAVED_STATE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137305));
pub const STATUS_VID_SAVED_STATE_UNRECOGNIZED_ITEM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137304));
pub const STATUS_VID_SAVED_STATE_INCOMPATIBLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137303));
pub const STATUS_VID_VTL_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070137302));
pub const STATUS_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143879167));
pub const STATUS_IPSEC_BAD_SPI = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202879));
pub const STATUS_IPSEC_SA_LIFETIME_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202878));
pub const STATUS_IPSEC_WRONG_SA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202877));
pub const STATUS_IPSEC_REPLAY_CHECK_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202876));
pub const STATUS_IPSEC_INVALID_PACKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202875));
pub const STATUS_IPSEC_INTEGRITY_CHECK_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202874));
pub const STATUS_IPSEC_CLEAR_TEXT_DROP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202873));
pub const STATUS_IPSEC_AUTH_FIREWALL_DROP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202872));
pub const STATUS_IPSEC_THROTTLE_DROP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070202871));
pub const STATUS_IPSEC_DOSP_BLOCK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170112));
pub const STATUS_IPSEC_DOSP_RECEIVED_MULTICAST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170111));
pub const STATUS_IPSEC_DOSP_INVALID_PACKET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170110));
pub const STATUS_IPSEC_DOSP_STATE_LOOKUP_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170109));
pub const STATUS_IPSEC_DOSP_MAX_ENTRIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170108));
pub const STATUS_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170107));
pub const STATUS_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070170106));
pub const STATUS_VOLMGR_INCOMPLETE_REGENERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143813631));
pub const STATUS_VOLMGR_INCOMPLETE_DISK_MIGRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143813630));
pub const STATUS_VOLMGR_DATABASE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071807));
pub const STATUS_VOLMGR_DISK_CONFIGURATION_CORRUPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071806));
pub const STATUS_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071805));
pub const STATUS_VOLMGR_PACK_CONFIG_UPDATE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071804));
pub const STATUS_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071803));
pub const STATUS_VOLMGR_DISK_DUPLICATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071802));
pub const STATUS_VOLMGR_DISK_DYNAMIC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071801));
pub const STATUS_VOLMGR_DISK_ID_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071800));
pub const STATUS_VOLMGR_DISK_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071799));
pub const STATUS_VOLMGR_DISK_LAST_VOTER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071798));
pub const STATUS_VOLMGR_DISK_LAYOUT_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071797));
pub const STATUS_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071796));
pub const STATUS_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071795));
pub const STATUS_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071794));
pub const STATUS_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071793));
pub const STATUS_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071792));
pub const STATUS_VOLMGR_DISK_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071791));
pub const STATUS_VOLMGR_DISK_NOT_EMPTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071790));
pub const STATUS_VOLMGR_DISK_NOT_ENOUGH_SPACE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071789));
pub const STATUS_VOLMGR_DISK_REVECTORING_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071788));
pub const STATUS_VOLMGR_DISK_SECTOR_SIZE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071787));
pub const STATUS_VOLMGR_DISK_SET_NOT_CONTAINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071786));
pub const STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071785));
pub const STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071784));
pub const STATUS_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071783));
pub const STATUS_VOLMGR_EXTENT_ALREADY_USED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071782));
pub const STATUS_VOLMGR_EXTENT_NOT_CONTIGUOUS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071781));
pub const STATUS_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071780));
pub const STATUS_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071779));
pub const STATUS_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071778));
pub const STATUS_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071777));
pub const STATUS_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071776));
pub const STATUS_VOLMGR_INTERLEAVE_LENGTH_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071775));
pub const STATUS_VOLMGR_MAXIMUM_REGISTERED_USERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071774));
pub const STATUS_VOLMGR_MEMBER_IN_SYNC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071773));
pub const STATUS_VOLMGR_MEMBER_INDEX_DUPLICATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071772));
pub const STATUS_VOLMGR_MEMBER_INDEX_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071771));
pub const STATUS_VOLMGR_MEMBER_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071770));
pub const STATUS_VOLMGR_MEMBER_NOT_DETACHED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071769));
pub const STATUS_VOLMGR_MEMBER_REGENERATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071768));
pub const STATUS_VOLMGR_ALL_DISKS_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071767));
pub const STATUS_VOLMGR_NO_REGISTERED_USERS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071766));
pub const STATUS_VOLMGR_NO_SUCH_USER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071765));
pub const STATUS_VOLMGR_NOTIFICATION_RESET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071764));
pub const STATUS_VOLMGR_NUMBER_OF_MEMBERS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071763));
pub const STATUS_VOLMGR_NUMBER_OF_PLEXES_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071762));
pub const STATUS_VOLMGR_PACK_DUPLICATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071761));
pub const STATUS_VOLMGR_PACK_ID_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071760));
pub const STATUS_VOLMGR_PACK_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071759));
pub const STATUS_VOLMGR_PACK_NAME_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071758));
pub const STATUS_VOLMGR_PACK_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071757));
pub const STATUS_VOLMGR_PACK_HAS_QUORUM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071756));
pub const STATUS_VOLMGR_PACK_WITHOUT_QUORUM = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071755));
pub const STATUS_VOLMGR_PARTITION_STYLE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071754));
pub const STATUS_VOLMGR_PARTITION_UPDATE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071753));
pub const STATUS_VOLMGR_PLEX_IN_SYNC = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071752));
pub const STATUS_VOLMGR_PLEX_INDEX_DUPLICATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071751));
pub const STATUS_VOLMGR_PLEX_INDEX_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071750));
pub const STATUS_VOLMGR_PLEX_LAST_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071749));
pub const STATUS_VOLMGR_PLEX_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071748));
pub const STATUS_VOLMGR_PLEX_REGENERATING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071747));
pub const STATUS_VOLMGR_PLEX_TYPE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071746));
pub const STATUS_VOLMGR_PLEX_NOT_RAID5 = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071745));
pub const STATUS_VOLMGR_PLEX_NOT_SIMPLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071744));
pub const STATUS_VOLMGR_STRUCTURE_SIZE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071743));
pub const STATUS_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071742));
pub const STATUS_VOLMGR_TRANSACTION_IN_PROGRESS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071741));
pub const STATUS_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071740));
pub const STATUS_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071739));
pub const STATUS_VOLMGR_VOLUME_ID_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071738));
pub const STATUS_VOLMGR_VOLUME_LENGTH_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071737));
pub const STATUS_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071736));
pub const STATUS_VOLMGR_VOLUME_NOT_MIRRORED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071735));
pub const STATUS_VOLMGR_VOLUME_NOT_RETAINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071734));
pub const STATUS_VOLMGR_VOLUME_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071733));
pub const STATUS_VOLMGR_VOLUME_RETAINED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071732));
pub const STATUS_VOLMGR_NUMBER_OF_EXTENTS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071731));
pub const STATUS_VOLMGR_DIFFERENT_SECTOR_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071730));
pub const STATUS_VOLMGR_BAD_BOOT_DISK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071729));
pub const STATUS_VOLMGR_PACK_CONFIG_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071728));
pub const STATUS_VOLMGR_PACK_CONFIG_ONLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071727));
pub const STATUS_VOLMGR_NOT_PRIMARY_PACK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071726));
pub const STATUS_VOLMGR_PACK_LOG_UPDATE_FAILED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071725));
pub const STATUS_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071724));
pub const STATUS_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071723));
pub const STATUS_VOLMGR_VOLUME_MIRRORED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071722));
pub const STATUS_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071721));
pub const STATUS_VOLMGR_NO_VALID_LOG_COPIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071720));
pub const STATUS_VOLMGR_PRIMARY_PACK_PRESENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071719));
pub const STATUS_VOLMGR_NUMBER_OF_DISKS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071718));
pub const STATUS_VOLMGR_MIRROR_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071717));
pub const STATUS_VOLMGR_RAID5_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070071716));
pub const STATUS_BCD_NOT_ALL_ENTRIES_IMPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143748095));
pub const STATUS_BCD_TOO_MANY_ELEMENTS = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1070006270));
pub const STATUS_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143748093));
pub const STATUS_VHD_DRIVE_FOOTER_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940735));
pub const STATUS_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940734));
pub const STATUS_VHD_DRIVE_FOOTER_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940733));
pub const STATUS_VHD_FORMAT_UNKNOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940732));
pub const STATUS_VHD_FORMAT_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940731));
pub const STATUS_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940730));
pub const STATUS_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940729));
pub const STATUS_VHD_SPARSE_HEADER_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940728));
pub const STATUS_VHD_BLOCK_ALLOCATION_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940727));
pub const STATUS_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940726));
pub const STATUS_VHD_INVALID_BLOCK_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940725));
pub const STATUS_VHD_BITMAP_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940724));
pub const STATUS_VHD_PARENT_VHD_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940723));
pub const STATUS_VHD_CHILD_PARENT_ID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940722));
pub const STATUS_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940721));
pub const STATUS_VHD_METADATA_READ_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940720));
pub const STATUS_VHD_METADATA_WRITE_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940719));
pub const STATUS_VHD_INVALID_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940718));
pub const STATUS_VHD_INVALID_FILE_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940717));
pub const STATUS_VIRTDISK_PROVIDER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940716));
pub const STATUS_VIRTDISK_NOT_VIRTUAL_DISK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940715));
pub const STATUS_VHD_PARENT_VHD_ACCESS_DENIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940714));
pub const STATUS_VHD_CHILD_PARENT_SIZE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940713));
pub const STATUS_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940712));
pub const STATUS_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940711));
pub const STATUS_VIRTUAL_DISK_LIMITATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940710));
pub const STATUS_VHD_INVALID_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940709));
pub const STATUS_VHD_INVALID_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940708));
pub const STATUS_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940707));
pub const STATUS_VIRTDISK_DISK_ALREADY_OWNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940706));
pub const STATUS_VIRTDISK_DISK_ONLINE_AND_WRITABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940705));
pub const STATUS_CTLOG_TRACKING_NOT_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940704));
pub const STATUS_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940703));
pub const STATUS_CTLOG_VHD_CHANGED_OFFLINE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940702));
pub const STATUS_CTLOG_INVALID_TRACKING_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940701));
pub const STATUS_CTLOG_INCONSISTENT_TRACKING_FILE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940700));
pub const STATUS_VHD_METADATA_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940696));
pub const STATUS_VHD_INVALID_CHANGE_TRACKING_ID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940695));
pub const STATUS_VHD_CHANGE_TRACKING_DISABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940694));
pub const STATUS_VHD_MISSING_CHANGE_TRACKING_INFORMATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940688));
pub const STATUS_VHD_RESIZE_WOULD_TRUNCATE_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940687));
pub const STATUS_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940686));
pub const STATUS_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069940685));
pub const STATUS_QUERY_STORAGE_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143682559));
pub const STATUS_GDI_HANDLE_LEAK = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143354879));
pub const STATUS_RKF_KEY_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547519));
pub const STATUS_RKF_DUPLICATE_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547518));
pub const STATUS_RKF_BLOB_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547517));
pub const STATUS_RKF_STORE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547516));
pub const STATUS_RKF_FILE_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547515));
pub const STATUS_RKF_ACTIVE_KEY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069547514));
pub const STATUS_RDBSS_RESTART_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069481983));
pub const STATUS_RDBSS_CONTINUE_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069481982));
pub const STATUS_RDBSS_POST_OPERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069481981));
pub const STATUS_RDBSS_RETRY_LOOKUP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069481980));
pub const STATUS_BTH_ATT_INVALID_HANDLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416447));
pub const STATUS_BTH_ATT_READ_NOT_PERMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416446));
pub const STATUS_BTH_ATT_WRITE_NOT_PERMITTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416445));
pub const STATUS_BTH_ATT_INVALID_PDU = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416444));
pub const STATUS_BTH_ATT_INSUFFICIENT_AUTHENTICATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416443));
pub const STATUS_BTH_ATT_REQUEST_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416442));
pub const STATUS_BTH_ATT_INVALID_OFFSET = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416441));
pub const STATUS_BTH_ATT_INSUFFICIENT_AUTHORIZATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416440));
pub const STATUS_BTH_ATT_PREPARE_QUEUE_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416439));
pub const STATUS_BTH_ATT_ATTRIBUTE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416438));
pub const STATUS_BTH_ATT_ATTRIBUTE_NOT_LONG = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416437));
pub const STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416436));
pub const STATUS_BTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416435));
pub const STATUS_BTH_ATT_UNLIKELY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416434));
pub const STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416433));
pub const STATUS_BTH_ATT_UNSUPPORTED_GROUP_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416432));
pub const STATUS_BTH_ATT_INSUFFICIENT_RESOURCES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069416431));
pub const STATUS_BTH_ATT_UNKNOWN_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069412352));
pub const STATUS_SECUREBOOT_ROLLBACK_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350911));
pub const STATUS_SECUREBOOT_POLICY_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350910));
pub const STATUS_SECUREBOOT_INVALID_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350909));
pub const STATUS_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350908));
pub const STATUS_SECUREBOOT_POLICY_NOT_SIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350907));
pub const STATUS_SECUREBOOT_NOT_ENABLED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -2143092730));
pub const STATUS_SECUREBOOT_FILE_REPLACED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350905));
pub const STATUS_SECUREBOOT_POLICY_NOT_AUTHORIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350904));
pub const STATUS_SECUREBOOT_POLICY_UNKNOWN = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350903));
pub const STATUS_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350902));
pub const STATUS_SECUREBOOT_PLATFORM_ID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350901));
pub const STATUS_SECUREBOOT_POLICY_ROLLBACK_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350900));
pub const STATUS_SECUREBOOT_POLICY_UPGRADE_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350899));
pub const STATUS_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350898));
pub const STATUS_SECUREBOOT_NOT_BASE_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350897));
pub const STATUS_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069350896));
pub const STATUS_PLATFORM_MANIFEST_NOT_AUTHORIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340863));
pub const STATUS_PLATFORM_MANIFEST_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340862));
pub const STATUS_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340861));
pub const STATUS_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340860));
pub const STATUS_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340859));
pub const STATUS_PLATFORM_MANIFEST_NOT_ACTIVE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340858));
pub const STATUS_PLATFORM_MANIFEST_NOT_SIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058340857));
pub const STATUS_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471935));
pub const STATUS_SYSTEM_INTEGRITY_POLICY_VIOLATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471934));
pub const STATUS_SYSTEM_INTEGRITY_INVALID_POLICY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471933));
pub const STATUS_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471932));
pub const STATUS_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471931));
pub const STATUS_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058471930));
pub const STATUS_NO_APPLICABLE_APP_LICENSES_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406399));
pub const STATUS_CLIP_LICENSE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406398));
pub const STATUS_CLIP_DEVICE_LICENSE_MISSING = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406397));
pub const STATUS_CLIP_LICENSE_INVALID_SIGNATURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406396));
pub const STATUS_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406395));
pub const STATUS_CLIP_LICENSE_EXPIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406394));
pub const STATUS_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406393));
pub const STATUS_CLIP_LICENSE_NOT_SIGNED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406392));
pub const STATUS_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406391));
pub const STATUS_CLIP_LICENSE_DEVICE_ID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058406390));
pub const STATUS_AUDIO_ENGINE_NODE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069285375));
pub const STATUS_HDAUDIO_EMPTY_CONNECTION_LIST = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069285374));
pub const STATUS_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069285373));
pub const STATUS_HDAUDIO_NO_LOGICAL_DEVICES_CREATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069285372));
pub const STATUS_HDAUDIO_NULL_LINKED_LIST_ENTRY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069285371));
pub const STATUS_SPACES_REPAIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 15138816));
pub const STATUS_SPACES_PAUSE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 15138817));
pub const STATUS_SPACES_COMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 15138818));
pub const STATUS_SPACES_REDIRECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, 15138819));
pub const STATUS_SPACES_FAULT_DOMAIN_TYPE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058603007));
pub const STATUS_SPACES_RESILIENCY_TYPE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058603005));
pub const STATUS_SPACES_DRIVE_SECTOR_SIZE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058603004));
pub const STATUS_SPACES_DRIVE_REDUNDANCY_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058603002));
pub const STATUS_SPACES_NUMBER_OF_DATA_COPIES_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058603001));
pub const STATUS_SPACES_INTERLEAVE_LENGTH_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602999));
pub const STATUS_SPACES_NUMBER_OF_COLUMNS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602998));
pub const STATUS_SPACES_NOT_ENOUGH_DRIVES = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602997));
pub const STATUS_SPACES_EXTENDED_ERROR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602996));
pub const STATUS_SPACES_PROVISIONING_TYPE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602995));
pub const STATUS_SPACES_ALLOCATION_SIZE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602994));
pub const STATUS_SPACES_ENCLOSURE_AWARE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602993));
pub const STATUS_SPACES_WRITE_CACHE_SIZE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602992));
pub const STATUS_SPACES_NUMBER_OF_GROUPS_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602991));
pub const STATUS_SPACES_DRIVE_OPERATIONAL_STATE_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602990));
pub const STATUS_SPACES_UPDATE_COLUMN_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602989));
pub const STATUS_SPACES_MAP_REQUIRED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602988));
pub const STATUS_SPACES_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602987));
pub const STATUS_SPACES_CORRUPT_METADATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602986));
pub const STATUS_SPACES_DRT_FULL = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602985));
pub const STATUS_SPACES_INCONSISTENCY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602984));
pub const STATUS_SPACES_LOG_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602983));
pub const STATUS_SPACES_NO_REDUNDANCY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602982));
pub const STATUS_SPACES_DRIVE_NOT_READY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602981));
pub const STATUS_SPACES_DRIVE_SPLIT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602980));
pub const STATUS_SPACES_DRIVE_LOST_DATA = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602979));
pub const STATUS_SPACES_ENTRY_INCOMPLETE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602978));
pub const STATUS_SPACES_ENTRY_INVALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602977));
pub const STATUS_SPACES_MARK_DIRTY = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058602976));
pub const STATUS_VOLSNAP_BOOTFILE_NOT_VALID = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1068498941));
pub const STATUS_VOLSNAP_ACTIVATION_TIMEOUT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1068498940));
pub const STATUS_IO_PREEMPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1068433407));
pub const STATUS_SVHDX_ERROR_STORED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067712512));
pub const STATUS_SVHDX_ERROR_NOT_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647232));
pub const STATUS_SVHDX_UNIT_ATTENTION_AVAILABLE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647231));
pub const STATUS_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647230));
pub const STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647229));
pub const STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647228));
pub const STATUS_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647227));
pub const STATUS_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647226));
pub const STATUS_SVHDX_RESERVATION_CONFLICT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647225));
pub const STATUS_SVHDX_WRONG_FILE_TYPE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647224));
pub const STATUS_SVHDX_VERSION_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647223));
pub const STATUS_VHD_SHARED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647222));
pub const STATUS_SVHDX_NO_INITIATOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647221));
pub const STATUS_VHDSET_BACKING_STORAGE_NOT_FOUND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067647220));
pub const STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067646976));
pub const STATUS_SMB_BAD_CLUSTER_DIALECT = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067646975));
pub const STATUS_SMB_GUEST_LOGON_BLOCKED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1067646974));
pub const STATUS_SECCORE_INVALID_COMMAND = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058537472));
pub const STATUS_VSM_NOT_INITIALIZED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069219840));
pub const STATUS_VSM_DMA_PROTECTION_NOT_IN_USE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1069219839));
pub const STATUS_APPEXEC_CONDITION_NOT_SATISFIED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275328));
pub const STATUS_APPEXEC_HANDLE_INVALIDATED = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275327));
pub const STATUS_APPEXEC_INVALID_HOST_GENERATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275326));
pub const STATUS_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275325));
pub const STATUS_APPEXEC_INVALID_HOST_STATE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275324));
pub const STATUS_APPEXEC_NO_DONOR = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275323));
pub const STATUS_APPEXEC_HOST_ID_MISMATCH = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275322));
pub const STATUS_APPEXEC_UNKNOWN_USER = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1058275321));
pub const STATUS_QUIC_HANDSHAKE_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071382528));
pub const STATUS_QUIC_VER_NEG_FAILURE = @import("zig.zig").typedConst(NTSTATUS, @as(i32, -1071382527));
pub const WINVER = @as(u32, 1280);
pub const APP_LOCAL_DEVICE_ID_SIZE = @as(u32, 32);
pub const DM_UPDATE = @as(u32, 1);
pub const DM_COPY = @as(u32, 2);
pub const DM_PROMPT = @as(u32, 4);
pub const DM_MODIFY = @as(u32, 8);
pub const SEC_E_OK = @import("zig.zig").typedConst(HRESULT, @as(i32, 0));
pub const RPC_X_NO_MORE_ENTRIES = @as(i32, 1772);
pub const RPC_X_SS_CHAR_TRANS_OPEN_FAIL = @as(i32, 1773);
pub const RPC_X_SS_CHAR_TRANS_SHORT_FILE = @as(i32, 1774);
pub const RPC_X_SS_IN_NULL_CONTEXT = @as(i32, 1775);
pub const RPC_X_SS_CONTEXT_DAMAGED = @as(i32, 1777);
pub const RPC_X_SS_HANDLES_MISMATCH = @as(i32, 1778);
pub const RPC_X_SS_CANNOT_GET_CALL_HANDLE = @as(i32, 1779);
pub const RPC_X_NULL_REF_POINTER = @as(i32, 1780);
pub const RPC_X_ENUM_VALUE_OUT_OF_RANGE = @as(i32, 1781);
pub const RPC_X_BYTE_COUNT_TOO_SMALL = @as(i32, 1782);
pub const RPC_X_BAD_STUB_DATA = @as(i32, 1783);
pub const RPC_X_INVALID_ES_ACTION = @as(i32, 1827);
pub const RPC_X_WRONG_ES_VERSION = @as(i32, 1828);
pub const RPC_X_WRONG_STUB_VERSION = @as(i32, 1829);
pub const RPC_X_INVALID_PIPE_OBJECT = @as(i32, 1830);
pub const RPC_X_WRONG_PIPE_ORDER = @as(i32, 1831);
pub const RPC_X_WRONG_PIPE_VERSION = @as(i32, 1832);
pub const OR_INVALID_OXID = @as(i32, 1910);
pub const OR_INVALID_OID = @as(i32, 1911);
pub const OR_INVALID_SET = @as(i32, 1912);
pub const RPC_X_PIPE_CLOSED = @as(i32, 1916);
pub const RPC_X_PIPE_DISCIPLINE_ERROR = @as(i32, 1917);
pub const RPC_X_PIPE_EMPTY = @as(i32, 1918);
pub const PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED = @as(i32, 4050);
pub const PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO = @as(i32, 4051);
pub const PEERDIST_ERROR_MISSING_DATA = @as(i32, 4052);
pub const PEERDIST_ERROR_NO_MORE = @as(i32, 4053);
pub const PEERDIST_ERROR_NOT_INITIALIZED = @as(i32, 4054);
pub const PEERDIST_ERROR_ALREADY_INITIALIZED = @as(i32, 4055);
pub const PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS = @as(i32, 4056);
pub const PEERDIST_ERROR_INVALIDATED = @as(i32, 4057);
pub const PEERDIST_ERROR_ALREADY_EXISTS = @as(i32, 4058);
pub const PEERDIST_ERROR_OPERATION_NOTFOUND = @as(i32, 4059);
pub const PEERDIST_ERROR_ALREADY_COMPLETED = @as(i32, 4060);
pub const PEERDIST_ERROR_OUT_OF_BOUNDS = @as(i32, 4061);
pub const PEERDIST_ERROR_VERSION_UNSUPPORTED = @as(i32, 4062);
pub const PEERDIST_ERROR_INVALID_CONFIGURATION = @as(i32, 4063);
pub const PEERDIST_ERROR_NOT_LICENSED = @as(i32, 4064);
pub const PEERDIST_ERROR_SERVICE_UNAVAILABLE = @as(i32, 4065);
pub const PEERDIST_ERROR_TRUST_FAILURE = @as(i32, 4066);
pub const SCHED_E_SERVICE_NOT_LOCALSYSTEM = @as(i32, 6200);
pub const FRS_ERR_INVALID_API_SEQUENCE = @as(i32, 8001);
pub const FRS_ERR_STARTING_SERVICE = @as(i32, 8002);
pub const FRS_ERR_STOPPING_SERVICE = @as(i32, 8003);
pub const FRS_ERR_INTERNAL_API = @as(i32, 8004);
pub const FRS_ERR_INTERNAL = @as(i32, 8005);
pub const FRS_ERR_SERVICE_COMM = @as(i32, 8006);
pub const FRS_ERR_INSUFFICIENT_PRIV = @as(i32, 8007);
pub const FRS_ERR_AUTHENTICATION = @as(i32, 8008);
pub const FRS_ERR_PARENT_INSUFFICIENT_PRIV = @as(i32, 8009);
pub const FRS_ERR_PARENT_AUTHENTICATION = @as(i32, 8010);
pub const FRS_ERR_CHILD_TO_PARENT_COMM = @as(i32, 8011);
pub const FRS_ERR_PARENT_TO_CHILD_COMM = @as(i32, 8012);
pub const FRS_ERR_SYSVOL_POPULATE = @as(i32, 8013);
pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT = @as(i32, 8014);
pub const FRS_ERR_SYSVOL_IS_BUSY = @as(i32, 8015);
pub const FRS_ERR_SYSVOL_DEMOTE = @as(i32, 8016);
pub const FRS_ERR_INVALID_SERVICE_PARAMETER = @as(i32, 8017);
pub const DNS_INFO_NO_RECORDS = @as(i32, 9501);
pub const DNS_REQUEST_PENDING = @as(i32, 9506);
pub const DNS_STATUS_FQDN = @as(i32, 9557);
pub const DNS_STATUS_DOTTED_NAME = @as(i32, 9558);
pub const DNS_STATUS_SINGLE_PART_NAME = @as(i32, 9559);
pub const DNS_WARNING_PTR_CREATE_FAILED = @as(i32, 9715);
pub const DNS_WARNING_DOMAIN_UNDELETED = @as(i32, 9716);
pub const DNS_INFO_AXFR_COMPLETE = @as(i32, 9751);
pub const DNS_INFO_ADDED_LOCAL_WINS = @as(i32, 9753);
pub const DNS_STATUS_CONTINUE_NEEDED = @as(i32, 9801);
pub const WARNING_IPSEC_MM_POLICY_PRUNED = @as(i32, 13024);
pub const WARNING_IPSEC_QM_POLICY_PRUNED = @as(i32, 13025);
pub const APPMODEL_ERROR_NO_PACKAGE = @as(i32, 15700);
pub const APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT = @as(i32, 15701);
pub const APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT = @as(i32, 15702);
pub const APPMODEL_ERROR_NO_APPLICATION = @as(i32, 15703);
pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED = @as(i32, 15704);
pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID = @as(i32, 15705);
pub const APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE = @as(i32, 15706);
pub const APPMODEL_ERROR_NO_MUTABLE_DIRECTORY = @as(i32, 15707);
pub const STORE_ERROR_UNLICENSED = @as(i32, 15861);
pub const STORE_ERROR_UNLICENSED_USER = @as(i32, 15862);
pub const STORE_ERROR_PENDING_COM_TRANSACTION = @as(i32, 15863);
pub const STORE_ERROR_LICENSE_REVOKED = @as(i32, 15864);
pub const SEVERITY_SUCCESS = @as(u32, 0);
pub const SEVERITY_ERROR = @as(u32, 1);
pub const NOERROR = @as(u32, 0);
pub const E_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418113));
pub const E_NOINTERFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467262));
pub const E_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467261));
pub const E_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147024890));
pub const E_ABORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467260));
pub const E_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147024891));
pub const E_BOUNDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483637));
pub const E_CHANGED_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483636));
pub const E_ILLEGAL_STATE_CHANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483635));
pub const E_ILLEGAL_METHOD_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483634));
pub const RO_E_METADATA_NAME_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483633));
pub const RO_E_METADATA_NAME_IS_NAMESPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483632));
pub const RO_E_METADATA_INVALID_TYPE_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483631));
pub const RO_E_INVALID_METADATA_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483630));
pub const RO_E_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483629));
pub const RO_E_EXCLUSIVE_WRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483628));
pub const RO_E_CHANGE_NOTIFICATION_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483627));
pub const RO_E_ERROR_STRING_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483626));
pub const E_STRING_NOT_NULL_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483625));
pub const E_ILLEGAL_DELEGATE_ASSIGNMENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483624));
pub const E_ASYNC_OPERATION_NOT_STARTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483623));
pub const E_APPLICATION_EXITING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483622));
pub const E_APPLICATION_VIEW_EXITING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483621));
pub const RO_E_MUST_BE_AGILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483620));
pub const RO_E_UNSUPPORTED_FROM_MTA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483619));
pub const RO_E_COMMITTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483618));
pub const RO_E_BLOCKED_CROSS_ASTA_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483617));
pub const RO_E_CANNOT_ACTIVATE_FULL_TRUST_SERVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483616));
pub const RO_E_CANNOT_ACTIVATE_UNIVERSAL_APPLICATION_SERVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147483615));
pub const CO_E_INIT_TLS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467258));
pub const CO_E_INIT_SHARED_ALLOCATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467257));
pub const CO_E_INIT_MEMORY_ALLOCATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467256));
pub const CO_E_INIT_CLASS_CACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467255));
pub const CO_E_INIT_RPC_CHANNEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467254));
pub const CO_E_INIT_TLS_SET_CHANNEL_CONTROL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467253));
pub const CO_E_INIT_TLS_CHANNEL_CONTROL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467252));
pub const CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467251));
pub const CO_E_INIT_SCM_MUTEX_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467250));
pub const CO_E_INIT_SCM_FILE_MAPPING_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467249));
pub const CO_E_INIT_SCM_MAP_VIEW_OF_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467248));
pub const CO_E_INIT_SCM_EXEC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467247));
pub const CO_E_INIT_ONLY_SINGLE_THREADED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467246));
pub const CO_E_CANT_REMOTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467245));
pub const CO_E_BAD_SERVER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467244));
pub const CO_E_WRONG_SERVER_IDENTITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467243));
pub const CO_E_OLE1DDE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467242));
pub const CO_E_RUNAS_SYNTAX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467241));
pub const CO_E_CREATEPROCESS_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467240));
pub const CO_E_RUNAS_CREATEPROCESS_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467239));
pub const CO_E_RUNAS_LOGON_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467238));
pub const CO_E_LAUNCH_PERMSSION_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467237));
pub const CO_E_START_SERVICE_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467236));
pub const CO_E_REMOTE_COMMUNICATION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467235));
pub const CO_E_SERVER_START_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467234));
pub const CO_E_CLSREG_INCONSISTENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467233));
pub const CO_E_IIDREG_INCONSISTENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467232));
pub const CO_E_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467231));
pub const CO_E_RELOAD_DLL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467230));
pub const CO_E_MSI_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467229));
pub const CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467228));
pub const CO_E_SERVER_PAUSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467227));
pub const CO_E_SERVER_NOT_PAUSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467226));
pub const CO_E_CLASS_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467225));
pub const CO_E_CLRNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467224));
pub const CO_E_ASYNC_WORK_REJECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467223));
pub const CO_E_SERVER_INIT_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467222));
pub const CO_E_NO_SECCTX_IN_ACTIVATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467221));
pub const CO_E_TRACKER_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467216));
pub const CO_E_THREADPOOL_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467215));
pub const CO_E_SXS_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467214));
pub const CO_E_MALFORMED_SPN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467213));
pub const CO_E_UNREVOKED_REGISTRATION_ON_APARTMENT_SHUTDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467212));
pub const CO_E_PREMATURE_STUB_RUNDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147467211));
pub const S_OK = @import("zig.zig").typedConst(HRESULT, @as(i32, 0));
pub const S_FALSE = @import("zig.zig").typedConst(HRESULT, @as(i32, 1));
pub const OLE_E_FIRST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221504));
pub const OLE_E_LAST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221249));
pub const OLE_S_FIRST = @import("zig.zig").typedConst(HRESULT, @as(i32, 262144));
pub const OLE_S_LAST = @import("zig.zig").typedConst(HRESULT, @as(i32, 262399));
pub const OLE_E_OLEVERB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221504));
pub const OLE_E_ADVF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221503));
pub const OLE_E_ENUM_NOMORE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221502));
pub const OLE_E_ADVISENOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221501));
pub const OLE_E_NOCONNECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221500));
pub const OLE_E_NOTRUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221499));
pub const OLE_E_NOCACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221498));
pub const OLE_E_BLANK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221497));
pub const OLE_E_CLASSDIFF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221496));
pub const OLE_E_CANT_GETMONIKER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221495));
pub const OLE_E_CANT_BINDTOSOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221494));
pub const OLE_E_STATIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221493));
pub const OLE_E_PROMPTSAVECANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221492));
pub const OLE_E_INVALIDRECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221491));
pub const OLE_E_WRONGCOMPOBJ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221490));
pub const OLE_E_INVALIDHWND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221489));
pub const OLE_E_NOT_INPLACEACTIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221488));
pub const OLE_E_CANTCONVERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221487));
pub const OLE_E_NOSTORAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221486));
pub const DV_E_FORMATETC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221404));
pub const DV_E_DVTARGETDEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221403));
pub const DV_E_STGMEDIUM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221402));
pub const DV_E_STATDATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221401));
pub const DV_E_LINDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221400));
pub const DV_E_TYMED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221399));
pub const DV_E_CLIPFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221398));
pub const DV_E_DVASPECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221397));
pub const DV_E_DVTARGETDEVICE_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221396));
pub const DV_E_NOIVIEWOBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221395));
pub const DRAGDROP_E_FIRST = @as(i32, -2147221248);
pub const DRAGDROP_E_LAST = @as(i32, -2147221233);
pub const DRAGDROP_S_FIRST = @as(i32, 262400);
pub const DRAGDROP_S_LAST = @as(i32, 262415);
pub const DRAGDROP_E_NOTREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221248));
pub const DRAGDROP_E_ALREADYREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221247));
pub const DRAGDROP_E_INVALIDHWND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221246));
pub const DRAGDROP_E_CONCURRENT_DRAG_ATTEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221245));
pub const CLASSFACTORY_E_FIRST = @as(i32, -2147221232);
pub const CLASSFACTORY_E_LAST = @as(i32, -2147221217);
pub const CLASSFACTORY_S_FIRST = @as(i32, 262416);
pub const CLASSFACTORY_S_LAST = @as(i32, 262431);
pub const CLASS_E_NOAGGREGATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221232));
pub const CLASS_E_CLASSNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221231));
pub const CLASS_E_NOTLICENSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221230));
pub const MARSHAL_E_FIRST = @as(i32, -2147221216);
pub const MARSHAL_E_LAST = @as(i32, -2147221201);
pub const MARSHAL_S_FIRST = @as(i32, 262432);
pub const MARSHAL_S_LAST = @as(i32, 262447);
pub const DATA_E_FIRST = @as(i32, -2147221200);
pub const DATA_E_LAST = @as(i32, -2147221185);
pub const DATA_S_FIRST = @as(i32, 262448);
pub const DATA_S_LAST = @as(i32, 262463);
pub const VIEW_E_FIRST = @as(i32, -2147221184);
pub const VIEW_E_LAST = @as(i32, -2147221169);
pub const VIEW_S_FIRST = @as(i32, 262464);
pub const VIEW_S_LAST = @as(i32, 262479);
pub const VIEW_E_DRAW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221184));
pub const REGDB_E_FIRST = @as(i32, -2147221168);
pub const REGDB_E_LAST = @as(i32, -2147221153);
pub const REGDB_S_FIRST = @as(i32, 262480);
pub const REGDB_S_LAST = @as(i32, 262495);
pub const REGDB_E_READREGDB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221168));
pub const REGDB_E_WRITEREGDB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221167));
pub const REGDB_E_KEYMISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221166));
pub const REGDB_E_INVALIDVALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221165));
pub const REGDB_E_CLASSNOTREG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221164));
pub const REGDB_E_IIDNOTREG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221163));
pub const REGDB_E_BADTHREADINGMODEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221162));
pub const REGDB_E_PACKAGEPOLICYVIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221161));
pub const CAT_E_FIRST = @as(i32, -2147221152);
pub const CAT_E_LAST = @as(i32, -2147221151);
pub const CAT_E_CATIDNOEXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221152));
pub const CAT_E_NODESCRIPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221151));
pub const CS_E_FIRST = @as(i32, -2147221148);
pub const CS_E_LAST = @as(i32, -2147221137);
pub const CS_E_PACKAGE_NOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221148));
pub const CS_E_NOT_DELETABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221147));
pub const CS_E_CLASS_NOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221146));
pub const CS_E_INVALID_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221145));
pub const CS_E_NO_CLASSSTORE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221144));
pub const CS_E_OBJECT_NOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221143));
pub const CS_E_OBJECT_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221142));
pub const CS_E_INVALID_PATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221141));
pub const CS_E_NETWORK_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221140));
pub const CS_E_ADMIN_LIMIT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221139));
pub const CS_E_SCHEMA_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221138));
pub const CS_E_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221137));
pub const CACHE_E_FIRST = @as(i32, -2147221136);
pub const CACHE_E_LAST = @as(i32, -2147221121);
pub const CACHE_S_FIRST = @as(i32, 262512);
pub const CACHE_S_LAST = @as(i32, 262527);
pub const CACHE_E_NOCACHE_UPDATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221136));
pub const OLEOBJ_E_FIRST = @as(i32, -2147221120);
pub const OLEOBJ_E_LAST = @as(i32, -2147221105);
pub const OLEOBJ_S_FIRST = @as(i32, 262528);
pub const OLEOBJ_S_LAST = @as(i32, 262543);
pub const OLEOBJ_E_NOVERBS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221120));
pub const OLEOBJ_E_INVALIDVERB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221119));
pub const CLIENTSITE_E_FIRST = @as(i32, -2147221104);
pub const CLIENTSITE_E_LAST = @as(i32, -2147221089);
pub const CLIENTSITE_S_FIRST = @as(i32, 262544);
pub const CLIENTSITE_S_LAST = @as(i32, 262559);
pub const INPLACE_E_NOTUNDOABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221088));
pub const INPLACE_E_NOTOOLSPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221087));
pub const INPLACE_E_FIRST = @as(i32, -2147221088);
pub const INPLACE_E_LAST = @as(i32, -2147221073);
pub const INPLACE_S_FIRST = @as(i32, 262560);
pub const INPLACE_S_LAST = @as(i32, 262575);
pub const ENUM_E_FIRST = @as(i32, -2147221072);
pub const ENUM_E_LAST = @as(i32, -2147221057);
pub const ENUM_S_FIRST = @as(i32, 262576);
pub const ENUM_S_LAST = @as(i32, 262591);
pub const CONVERT10_E_FIRST = @as(i32, -2147221056);
pub const CONVERT10_E_LAST = @as(i32, -2147221041);
pub const CONVERT10_S_FIRST = @as(i32, 262592);
pub const CONVERT10_S_LAST = @as(i32, 262607);
pub const CONVERT10_E_OLESTREAM_GET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221056));
pub const CONVERT10_E_OLESTREAM_PUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221055));
pub const CONVERT10_E_OLESTREAM_FMT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221054));
pub const CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221053));
pub const CONVERT10_E_STG_FMT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221052));
pub const CONVERT10_E_STG_NO_STD_STREAM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221051));
pub const CONVERT10_E_STG_DIB_TO_BITMAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221050));
pub const CLIPBRD_E_FIRST = @as(i32, -2147221040);
pub const CLIPBRD_E_LAST = @as(i32, -2147221025);
pub const CLIPBRD_S_FIRST = @as(i32, 262608);
pub const CLIPBRD_S_LAST = @as(i32, 262623);
pub const CLIPBRD_E_CANT_OPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221040));
pub const CLIPBRD_E_CANT_EMPTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221039));
pub const CLIPBRD_E_CANT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221038));
pub const CLIPBRD_E_BAD_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221037));
pub const CLIPBRD_E_CANT_CLOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221036));
pub const MK_E_FIRST = @as(i32, -2147221024);
pub const MK_E_LAST = @as(i32, -2147221009);
pub const MK_S_FIRST = @as(i32, 262624);
pub const MK_S_LAST = @as(i32, 262639);
pub const MK_E_CONNECTMANUALLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221024));
pub const MK_E_EXCEEDEDDEADLINE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221023));
pub const MK_E_NEEDGENERIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221022));
pub const MK_E_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221021));
pub const MK_E_SYNTAX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221020));
pub const MK_E_NOOBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221019));
pub const MK_E_INVALIDEXTENSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221018));
pub const MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221017));
pub const MK_E_NOTBINDABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221016));
pub const MK_E_NOTBOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221015));
pub const MK_E_CANTOPENFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221014));
pub const MK_E_MUSTBOTHERUSER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221013));
pub const MK_E_NOINVERSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221012));
pub const MK_E_NOSTORAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221011));
pub const MK_E_NOPREFIX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221010));
pub const MK_E_ENUMERATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221009));
pub const CO_E_FIRST = @as(i32, -2147221008);
pub const CO_E_LAST = @as(i32, -2147220993);
pub const CO_S_FIRST = @as(i32, 262640);
pub const CO_S_LAST = @as(i32, 262655);
pub const CO_E_NOTINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221008));
pub const CO_E_ALREADYINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221007));
pub const CO_E_CANTDETERMINECLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221006));
pub const CO_E_CLASSSTRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221005));
pub const CO_E_IIDSTRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221004));
pub const CO_E_APPNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221003));
pub const CO_E_APPSINGLEUSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221002));
pub const CO_E_ERRORINAPP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221001));
pub const CO_E_DLLNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147221000));
pub const CO_E_ERRORINDLL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220999));
pub const CO_E_WRONGOSFORAPP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220998));
pub const CO_E_OBJNOTREG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220997));
pub const CO_E_OBJISREG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220996));
pub const CO_E_OBJNOTCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220995));
pub const CO_E_APPDIDNTREG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220994));
pub const CO_E_RELEASED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220993));
pub const EVENT_E_FIRST = @as(i32, -2147220992);
pub const EVENT_E_LAST = @as(i32, -2147220961);
pub const EVENT_S_FIRST = @as(i32, 262656);
pub const EVENT_S_LAST = @as(i32, 262687);
pub const EVENT_S_SOME_SUBSCRIBERS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262656));
pub const EVENT_E_ALL_SUBSCRIBERS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220991));
pub const EVENT_S_NOSUBSCRIBERS = @import("zig.zig").typedConst(HRESULT, @as(i32, 262658));
pub const EVENT_E_QUERYSYNTAX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220989));
pub const EVENT_E_QUERYFIELD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220988));
pub const EVENT_E_INTERNALEXCEPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220987));
pub const EVENT_E_INTERNALERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220986));
pub const EVENT_E_INVALID_PER_USER_SID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220985));
pub const EVENT_E_USER_EXCEPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220984));
pub const EVENT_E_TOO_MANY_METHODS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220983));
pub const EVENT_E_MISSING_EVENTCLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220982));
pub const EVENT_E_NOT_ALL_REMOVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220981));
pub const EVENT_E_COMPLUS_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220980));
pub const EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220979));
pub const EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220978));
pub const EVENT_E_INVALID_EVENT_CLASS_PARTITION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220977));
pub const EVENT_E_PER_USER_SID_NOT_LOGGED_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220976));
pub const TPC_E_INVALID_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220927));
pub const TPC_E_NO_DEFAULT_TABLET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220974));
pub const TPC_E_UNKNOWN_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220965));
pub const TPC_E_INVALID_INPUT_RECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220967));
pub const TPC_E_INVALID_STROKE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220958));
pub const TPC_E_INITIALIZE_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220957));
pub const TPC_E_NOT_RELEVANT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220942));
pub const TPC_E_INVALID_PACKET_DESCRIPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220941));
pub const TPC_E_RECOGNIZER_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220939));
pub const TPC_E_INVALID_RIGHTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220938));
pub const TPC_E_OUT_OF_ORDER_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220937));
pub const TPC_E_QUEUE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220936));
pub const TPC_E_INVALID_CONFIGURATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220935));
pub const TPC_E_INVALID_DATA_FROM_RECOGNIZER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147220934));
pub const TPC_S_TRUNCATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262738));
pub const TPC_S_INTERRUPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262739));
pub const TPC_S_NO_DATA_TO_PROCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, 262740));
pub const XACT_E_FIRST = @as(u32, 2147799040);
pub const XACT_E_LAST = @as(u32, 2147799083);
pub const XACT_S_FIRST = @as(u32, 315392);
pub const XACT_S_LAST = @as(u32, 315408);
pub const XACT_E_ALREADYOTHERSINGLEPHASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168256));
pub const XACT_E_CANTRETAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168255));
pub const XACT_E_COMMITFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168254));
pub const XACT_E_COMMITPREVENTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168253));
pub const XACT_E_HEURISTICABORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168252));
pub const XACT_E_HEURISTICCOMMIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168251));
pub const XACT_E_HEURISTICDAMAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168250));
pub const XACT_E_HEURISTICDANGER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168249));
pub const XACT_E_ISOLATIONLEVEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168248));
pub const XACT_E_NOASYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168247));
pub const XACT_E_NOENLIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168246));
pub const XACT_E_NOISORETAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168245));
pub const XACT_E_NORESOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168244));
pub const XACT_E_NOTCURRENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168243));
pub const XACT_E_NOTRANSACTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168242));
pub const XACT_E_NOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168241));
pub const XACT_E_UNKNOWNRMGRID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168240));
pub const XACT_E_WRONGSTATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168239));
pub const XACT_E_WRONGUOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168238));
pub const XACT_E_XTIONEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168237));
pub const XACT_E_NOIMPORTOBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168236));
pub const XACT_E_INVALIDCOOKIE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168235));
pub const XACT_E_INDOUBT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168234));
pub const XACT_E_NOTIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168233));
pub const XACT_E_ALREADYINPROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168232));
pub const XACT_E_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168231));
pub const XACT_E_LOGFULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168230));
pub const XACT_E_TMNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168229));
pub const XACT_E_CONNECTION_DOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168228));
pub const XACT_E_CONNECTION_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168227));
pub const XACT_E_REENLISTTIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168226));
pub const XACT_E_TIP_CONNECT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168225));
pub const XACT_E_TIP_PROTOCOL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168224));
pub const XACT_E_TIP_PULL_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168223));
pub const XACT_E_DEST_TMNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168222));
pub const XACT_E_TIP_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168221));
pub const XACT_E_NETWORK_TX_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168220));
pub const XACT_E_PARTNER_NETWORK_TX_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168219));
pub const XACT_E_XA_TX_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168218));
pub const XACT_E_UNABLE_TO_READ_DTC_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168217));
pub const XACT_E_UNABLE_TO_LOAD_DTC_PROXY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168216));
pub const XACT_E_ABORTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168215));
pub const XACT_E_PUSH_COMM_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168214));
pub const XACT_E_PULL_COMM_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168213));
pub const XACT_E_LU_TX_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168212));
pub const XACT_E_CLERKNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168128));
pub const XACT_E_CLERKEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168127));
pub const XACT_E_RECOVERYINPROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168126));
pub const XACT_E_TRANSACTIONCLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168125));
pub const XACT_E_INVALIDLSN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168124));
pub const XACT_E_REPLAYREQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147168123));
pub const XACT_S_ASYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, 315392));
pub const XACT_S_DEFECT = @import("zig.zig").typedConst(HRESULT, @as(i32, 315393));
pub const XACT_S_READONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, 315394));
pub const XACT_S_SOMENORETAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, 315395));
pub const XACT_S_OKINFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, 315396));
pub const XACT_S_MADECHANGESCONTENT = @import("zig.zig").typedConst(HRESULT, @as(i32, 315397));
pub const XACT_S_MADECHANGESINFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, 315398));
pub const XACT_S_ALLNORETAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, 315399));
pub const XACT_S_ABORTING = @import("zig.zig").typedConst(HRESULT, @as(i32, 315400));
pub const XACT_S_SINGLEPHASE = @import("zig.zig").typedConst(HRESULT, @as(i32, 315401));
pub const XACT_S_LOCALLY_OK = @import("zig.zig").typedConst(HRESULT, @as(i32, 315402));
pub const XACT_S_LASTRESOURCEMANAGER = @import("zig.zig").typedConst(HRESULT, @as(i32, 315408));
pub const CONTEXT_E_FIRST = @as(i32, -2147164160);
pub const CONTEXT_E_LAST = @as(i32, -2147164113);
pub const CONTEXT_S_FIRST = @as(i32, 319488);
pub const CONTEXT_S_LAST = @as(i32, 319535);
pub const CONTEXT_E_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164158));
pub const CONTEXT_E_ABORTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164157));
pub const CONTEXT_E_NOCONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164156));
pub const CONTEXT_E_WOULD_DEADLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164155));
pub const CONTEXT_E_SYNCH_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164154));
pub const CONTEXT_E_OLDREF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164153));
pub const CONTEXT_E_ROLENOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164148));
pub const CONTEXT_E_TMNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164145));
pub const CO_E_ACTIVATIONFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164127));
pub const CO_E_ACTIVATIONFAILED_EVENTLOGGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164126));
pub const CO_E_ACTIVATIONFAILED_CATALOGERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164125));
pub const CO_E_ACTIVATIONFAILED_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164124));
pub const CO_E_INITIALIZATIONFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164123));
pub const CONTEXT_E_NOJIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164122));
pub const CONTEXT_E_NOTRANSACTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164121));
pub const CO_E_THREADINGMODEL_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164120));
pub const CO_E_NOIISINTRINSICS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164119));
pub const CO_E_NOCOOKIES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164118));
pub const CO_E_DBERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164117));
pub const CO_E_NOTPOOLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164116));
pub const CO_E_NOTCONSTRUCTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164115));
pub const CO_E_NOSYNCHRONIZATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164114));
pub const CO_E_ISOLEVELMISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164113));
pub const CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164112));
pub const CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147164111));
pub const OLE_S_USEREG = @import("zig.zig").typedConst(HRESULT, @as(i32, 262144));
pub const OLE_S_STATIC = @import("zig.zig").typedConst(HRESULT, @as(i32, 262145));
pub const OLE_S_MAC_CLIPFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, 262146));
pub const DRAGDROP_S_DROP = @import("zig.zig").typedConst(HRESULT, @as(i32, 262400));
pub const DRAGDROP_S_CANCEL = @import("zig.zig").typedConst(HRESULT, @as(i32, 262401));
pub const DRAGDROP_S_USEDEFAULTCURSORS = @import("zig.zig").typedConst(HRESULT, @as(i32, 262402));
pub const DATA_S_SAMEFORMATETC = @import("zig.zig").typedConst(HRESULT, @as(i32, 262448));
pub const VIEW_S_ALREADY_FROZEN = @import("zig.zig").typedConst(HRESULT, @as(i32, 262464));
pub const CACHE_S_FORMATETC_NOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262512));
pub const CACHE_S_SAMECACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, 262513));
pub const CACHE_S_SOMECACHES_NOTUPDATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262514));
pub const OLEOBJ_S_INVALIDVERB = @import("zig.zig").typedConst(HRESULT, @as(i32, 262528));
pub const OLEOBJ_S_CANNOT_DOVERB_NOW = @import("zig.zig").typedConst(HRESULT, @as(i32, 262529));
pub const OLEOBJ_S_INVALIDHWND = @import("zig.zig").typedConst(HRESULT, @as(i32, 262530));
pub const INPLACE_S_TRUNCATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262560));
pub const CONVERT10_S_NO_PRESENTATION = @import("zig.zig").typedConst(HRESULT, @as(i32, 262592));
pub const MK_S_REDUCED_TO_SELF = @import("zig.zig").typedConst(HRESULT, @as(i32, 262626));
pub const MK_S_ME = @import("zig.zig").typedConst(HRESULT, @as(i32, 262628));
pub const MK_S_HIM = @import("zig.zig").typedConst(HRESULT, @as(i32, 262629));
pub const MK_S_US = @import("zig.zig").typedConst(HRESULT, @as(i32, 262630));
pub const MK_S_MONIKERALREADYREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, 262631));
pub const SCHED_S_TASK_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, 267008));
pub const SCHED_S_TASK_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, 267009));
pub const SCHED_S_TASK_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, 267010));
pub const SCHED_S_TASK_HAS_NOT_RUN = @import("zig.zig").typedConst(HRESULT, @as(i32, 267011));
pub const SCHED_S_TASK_NO_MORE_RUNS = @import("zig.zig").typedConst(HRESULT, @as(i32, 267012));
pub const SCHED_S_TASK_NOT_SCHEDULED = @import("zig.zig").typedConst(HRESULT, @as(i32, 267013));
pub const SCHED_S_TASK_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 267014));
pub const SCHED_S_TASK_NO_VALID_TRIGGERS = @import("zig.zig").typedConst(HRESULT, @as(i32, 267015));
pub const SCHED_S_EVENT_TRIGGER = @import("zig.zig").typedConst(HRESULT, @as(i32, 267016));
pub const SCHED_E_TRIGGER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216631));
pub const SCHED_E_TASK_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216630));
pub const SCHED_E_TASK_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216629));
pub const SCHED_E_SERVICE_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216628));
pub const SCHED_E_CANNOT_OPEN_TASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216627));
pub const SCHED_E_INVALID_TASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216626));
pub const SCHED_E_ACCOUNT_INFORMATION_NOT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216625));
pub const SCHED_E_ACCOUNT_NAME_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216624));
pub const SCHED_E_ACCOUNT_DBASE_CORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216623));
pub const SCHED_E_NO_SECURITY_SERVICES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216622));
pub const SCHED_E_UNKNOWN_OBJECT_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216621));
pub const SCHED_E_UNSUPPORTED_ACCOUNT_OPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216620));
pub const SCHED_E_SERVICE_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216619));
pub const SCHED_E_UNEXPECTEDNODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216618));
pub const SCHED_E_NAMESPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216617));
pub const SCHED_E_INVALIDVALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216616));
pub const SCHED_E_MISSINGNODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216615));
pub const SCHED_E_MALFORMEDXML = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216614));
pub const SCHED_S_SOME_TRIGGERS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, 267035));
pub const SCHED_S_BATCH_LOGON_PROBLEM = @import("zig.zig").typedConst(HRESULT, @as(i32, 267036));
pub const SCHED_E_TOO_MANY_NODES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216611));
pub const SCHED_E_PAST_END_BOUNDARY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216610));
pub const SCHED_E_ALREADY_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216609));
pub const SCHED_E_USER_NOT_LOGGED_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216608));
pub const SCHED_E_INVALID_TASK_HASH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216607));
pub const SCHED_E_SERVICE_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216606));
pub const SCHED_E_SERVICE_TOO_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216605));
pub const SCHED_E_TASK_ATTEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216604));
pub const SCHED_S_TASK_QUEUED = @import("zig.zig").typedConst(HRESULT, @as(i32, 267045));
pub const SCHED_E_TASK_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216602));
pub const SCHED_E_TASK_NOT_V1_COMPAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216601));
pub const SCHED_E_START_ON_DEMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216600));
pub const SCHED_E_TASK_NOT_UBPM_COMPAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216599));
pub const SCHED_E_DEPRECATED_FEATURE_USED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147216592));
pub const CO_E_CLASS_CREATE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959359));
pub const CO_E_SCM_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959358));
pub const CO_E_SCM_RPC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959357));
pub const CO_E_BAD_PATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959356));
pub const CO_E_SERVER_EXEC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959355));
pub const CO_E_OBJSRV_RPC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959354));
pub const MK_E_NO_NORMALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959353));
pub const CO_E_SERVER_STOPPING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959352));
pub const MEM_E_INVALID_ROOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959351));
pub const MEM_E_INVALID_LINK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959344));
pub const MEM_E_INVALID_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959343));
pub const CO_S_NOTALLINTERFACES = @import("zig.zig").typedConst(HRESULT, @as(i32, 524306));
pub const CO_S_MACHINENAMENOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, 524307));
pub const CO_E_MISSING_DISPLAYNAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959339));
pub const CO_E_RUNAS_VALUE_MUST_BE_AAA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959338));
pub const CO_E_ELEVATION_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146959337));
pub const APPX_E_PACKAGING_INTERNAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958848));
pub const APPX_E_INTERLEAVING_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958847));
pub const APPX_E_RELATIONSHIPS_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958846));
pub const APPX_E_MISSING_REQUIRED_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958845));
pub const APPX_E_INVALID_MANIFEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958844));
pub const APPX_E_INVALID_BLOCKMAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958843));
pub const APPX_E_CORRUPT_CONTENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958842));
pub const APPX_E_BLOCK_HASH_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958841));
pub const APPX_E_REQUESTED_RANGE_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958840));
pub const APPX_E_INVALID_SIP_CLIENT_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958839));
pub const APPX_E_INVALID_KEY_INFO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958838));
pub const APPX_E_INVALID_CONTENTGROUPMAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958837));
pub const APPX_E_INVALID_APPINSTALLER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958836));
pub const APPX_E_DELTA_BASELINE_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958835));
pub const APPX_E_DELTA_PACKAGE_MISSING_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958834));
pub const APPX_E_INVALID_DELTA_PACKAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958833));
pub const APPX_E_DELTA_APPENDED_PACKAGE_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958832));
pub const APPX_E_INVALID_PACKAGING_LAYOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958831));
pub const APPX_E_INVALID_PACKAGESIGNCONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958830));
pub const APPX_E_RESOURCESPRI_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958829));
pub const APPX_E_FILE_COMPRESSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958828));
pub const APPX_E_INVALID_PAYLOAD_PACKAGE_EXTENSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958827));
pub const APPX_E_INVALID_ENCRYPTION_EXCLUSION_FILE_LIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958826));
pub const BT_E_SPURIOUS_ACTIVATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146958592));
pub const DISP_E_UNKNOWNINTERFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352575));
pub const DISP_E_MEMBERNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352573));
pub const DISP_E_PARAMNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352572));
pub const DISP_E_TYPEMISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352571));
pub const DISP_E_UNKNOWNNAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352570));
pub const DISP_E_NONAMEDARGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352569));
pub const DISP_E_BADVARTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352568));
pub const DISP_E_EXCEPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352567));
pub const DISP_E_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352566));
pub const DISP_E_BADINDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352565));
pub const DISP_E_UNKNOWNLCID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352564));
pub const DISP_E_ARRAYISLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352563));
pub const DISP_E_BADPARAMCOUNT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352562));
pub const DISP_E_PARAMNOTOPTIONAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352561));
pub const DISP_E_BADCALLEE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352560));
pub const DISP_E_NOTACOLLECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352559));
pub const DISP_E_DIVBYZERO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352558));
pub const DISP_E_BUFFERTOOSMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352557));
pub const TYPE_E_BUFFERTOOSMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319786));
pub const TYPE_E_FIELDNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319785));
pub const TYPE_E_INVDATAREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319784));
pub const TYPE_E_UNSUPFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319783));
pub const TYPE_E_REGISTRYACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319780));
pub const TYPE_E_LIBNOTREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319779));
pub const TYPE_E_UNDEFINEDTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319769));
pub const TYPE_E_QUALIFIEDNAMEDISALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319768));
pub const TYPE_E_INVALIDSTATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319767));
pub const TYPE_E_WRONGTYPEKIND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319766));
pub const TYPE_E_ELEMENTNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319765));
pub const TYPE_E_AMBIGUOUSNAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319764));
pub const TYPE_E_NAMECONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319763));
pub const TYPE_E_UNKNOWNLCID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319762));
pub const TYPE_E_DLLFUNCTIONNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147319761));
pub const TYPE_E_BADMODULEKIND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147317571));
pub const TYPE_E_SIZETOOBIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147317563));
pub const TYPE_E_DUPLICATEID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147317562));
pub const TYPE_E_INVALIDID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147317553));
pub const TYPE_E_TYPEMISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147316576));
pub const TYPE_E_OUTOFBOUNDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147316575));
pub const TYPE_E_IOERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147316574));
pub const TYPE_E_CANTCREATETMPFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147316573));
pub const TYPE_E_CANTLOADLIBRARY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147312566));
pub const TYPE_E_INCONSISTENTPROPFUNCS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147312509));
pub const TYPE_E_CIRCULARTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147312508));
pub const STG_E_INVALIDFUNCTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287039));
pub const STG_E_FILENOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287038));
pub const STG_E_PATHNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287037));
pub const STG_E_TOOMANYOPENFILES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287036));
pub const STG_E_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287035));
pub const STG_E_INVALIDHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287034));
pub const STG_E_INSUFFICIENTMEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287032));
pub const STG_E_INVALIDPOINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287031));
pub const STG_E_NOMOREFILES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287022));
pub const STG_E_DISKISWRITEPROTECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287021));
pub const STG_E_SEEKERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287015));
pub const STG_E_WRITEFAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287011));
pub const STG_E_READFAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287010));
pub const STG_E_SHAREVIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287008));
pub const STG_E_LOCKVIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147287007));
pub const STG_E_FILEALREADYEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286960));
pub const STG_E_INVALIDPARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286953));
pub const STG_E_MEDIUMFULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286928));
pub const STG_E_PROPSETMISMATCHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286800));
pub const STG_E_ABNORMALAPIEXIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286790));
pub const STG_E_INVALIDHEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286789));
pub const STG_E_INVALIDNAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286788));
pub const STG_E_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286787));
pub const STG_E_UNIMPLEMENTEDFUNCTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286786));
pub const STG_E_INVALIDFLAG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286785));
pub const STG_E_INUSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286784));
pub const STG_E_NOTCURRENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286783));
pub const STG_E_REVERTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286782));
pub const STG_E_CANTSAVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286781));
pub const STG_E_OLDFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286780));
pub const STG_E_OLDDLL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286779));
pub const STG_E_SHAREREQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286778));
pub const STG_E_NOTFILEBASEDSTORAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286777));
pub const STG_E_EXTANTMARSHALLINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286776));
pub const STG_E_DOCFILECORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286775));
pub const STG_E_BADBASEADDRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286768));
pub const STG_E_DOCFILETOOLARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286767));
pub const STG_E_NOTSIMPLEFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286766));
pub const STG_E_INCOMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286527));
pub const STG_E_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286526));
pub const STG_S_CONVERTED = @import("zig.zig").typedConst(HRESULT, @as(i32, 197120));
pub const STG_S_BLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, 197121));
pub const STG_S_RETRYNOW = @import("zig.zig").typedConst(HRESULT, @as(i32, 197122));
pub const STG_S_MONITORING = @import("zig.zig").typedConst(HRESULT, @as(i32, 197123));
pub const STG_S_MULTIPLEOPENS = @import("zig.zig").typedConst(HRESULT, @as(i32, 197124));
pub const STG_S_CONSOLIDATIONFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, 197125));
pub const STG_S_CANNOTCONSOLIDATE = @import("zig.zig").typedConst(HRESULT, @as(i32, 197126));
pub const STG_S_POWER_CYCLE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 197127));
pub const STG_E_FIRMWARE_SLOT_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286520));
pub const STG_E_FIRMWARE_IMAGE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286519));
pub const STG_E_DEVICE_UNRESPONSIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286518));
pub const STG_E_STATUS_COPY_PROTECTION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286267));
pub const STG_E_CSS_AUTHENTICATION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286266));
pub const STG_E_CSS_KEY_NOT_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286265));
pub const STG_E_CSS_KEY_NOT_ESTABLISHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286264));
pub const STG_E_CSS_SCRAMBLED_SECTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286263));
pub const STG_E_CSS_REGION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286262));
pub const STG_E_RESETS_EXHAUSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147286261));
pub const RPC_E_CALL_REJECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418111));
pub const RPC_E_CALL_CANCELED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418110));
pub const RPC_E_CANTPOST_INSENDCALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418109));
pub const RPC_E_CANTCALLOUT_INASYNCCALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418108));
pub const RPC_E_CANTCALLOUT_INEXTERNALCALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418107));
pub const RPC_E_CONNECTION_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418106));
pub const RPC_E_SERVER_DIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418105));
pub const RPC_E_CLIENT_DIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418104));
pub const RPC_E_INVALID_DATAPACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418103));
pub const RPC_E_CANTTRANSMIT_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418102));
pub const RPC_E_CLIENT_CANTMARSHAL_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418101));
pub const RPC_E_CLIENT_CANTUNMARSHAL_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418100));
pub const RPC_E_SERVER_CANTMARSHAL_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418099));
pub const RPC_E_SERVER_CANTUNMARSHAL_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418098));
pub const RPC_E_INVALID_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418097));
pub const RPC_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418096));
pub const RPC_E_CANTCALLOUT_AGAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418095));
pub const RPC_E_SERVER_DIED_DNE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147418094));
pub const RPC_E_SYS_CALL_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417856));
pub const RPC_E_OUT_OF_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417855));
pub const RPC_E_ATTEMPTED_MULTITHREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417854));
pub const RPC_E_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417853));
pub const RPC_E_FAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417852));
pub const RPC_E_SERVERFAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417851));
pub const RPC_E_CHANGED_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417850));
pub const RPC_E_INVALIDMETHOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417849));
pub const RPC_E_DISCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417848));
pub const RPC_E_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417847));
pub const RPC_E_SERVERCALL_RETRYLATER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417846));
pub const RPC_E_SERVERCALL_REJECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417845));
pub const RPC_E_INVALID_CALLDATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417844));
pub const RPC_E_CANTCALLOUT_ININPUTSYNCCALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417843));
pub const RPC_E_WRONG_THREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417842));
pub const RPC_E_THREAD_NOT_INIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417841));
pub const RPC_E_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417840));
pub const RPC_E_INVALID_HEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417839));
pub const RPC_E_INVALID_EXTENSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417838));
pub const RPC_E_INVALID_IPID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417837));
pub const RPC_E_INVALID_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417836));
pub const RPC_S_CALLPENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417835));
pub const RPC_S_WAITONTIMER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417834));
pub const RPC_E_CALL_COMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417833));
pub const RPC_E_UNSECURE_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417832));
pub const RPC_E_TOO_LATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417831));
pub const RPC_E_NO_GOOD_SECURITY_PACKAGES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417830));
pub const RPC_E_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417829));
pub const RPC_E_REMOTE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417828));
pub const RPC_E_INVALID_OBJREF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417827));
pub const RPC_E_NO_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417826));
pub const RPC_E_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417825));
pub const RPC_E_NO_SYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417824));
pub const RPC_E_FULLSIC_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417823));
pub const RPC_E_INVALID_STD_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417822));
pub const CO_E_FAILEDTOIMPERSONATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417821));
pub const CO_E_FAILEDTOGETSECCTX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417820));
pub const CO_E_FAILEDTOOPENTHREADTOKEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417819));
pub const CO_E_FAILEDTOGETTOKENINFO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417818));
pub const CO_E_TRUSTEEDOESNTMATCHCLIENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417817));
pub const CO_E_FAILEDTOQUERYCLIENTBLANKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417816));
pub const CO_E_FAILEDTOSETDACL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417815));
pub const CO_E_ACCESSCHECKFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417814));
pub const CO_E_NETACCESSAPIFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417813));
pub const CO_E_WRONGTRUSTEENAMESYNTAX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417812));
pub const CO_E_INVALIDSID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417811));
pub const CO_E_CONVERSIONFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417810));
pub const CO_E_NOMATCHINGSIDFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417809));
pub const CO_E_LOOKUPACCSIDFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417808));
pub const CO_E_NOMATCHINGNAMEFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417807));
pub const CO_E_LOOKUPACCNAMEFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417806));
pub const CO_E_SETSERLHNDLFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417805));
pub const CO_E_FAILEDTOGETWINDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417804));
pub const CO_E_PATHTOOLONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417803));
pub const CO_E_FAILEDTOGENUUID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417802));
pub const CO_E_FAILEDTOCREATEFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417801));
pub const CO_E_FAILEDTOCLOSEHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417800));
pub const CO_E_EXCEEDSYSACLLIMIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417799));
pub const CO_E_ACESINWRONGORDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417798));
pub const CO_E_INCOMPATIBLESTREAMVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417797));
pub const CO_E_FAILEDTOOPENPROCESSTOKEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417796));
pub const CO_E_DECODEFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417795));
pub const CO_E_ACNOTINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417793));
pub const CO_E_CANCEL_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147417792));
pub const RPC_E_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147352577));
pub const ERROR_AUDITING_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073151999));
pub const ERROR_ALL_SIDS_FILTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073151998));
pub const ERROR_BIZRULES_NOT_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1073151997));
pub const NTE_BAD_UID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893823));
pub const NTE_BAD_HASH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893822));
pub const NTE_BAD_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893821));
pub const NTE_BAD_LEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893820));
pub const NTE_BAD_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893819));
pub const NTE_BAD_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893818));
pub const NTE_BAD_VER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893817));
pub const NTE_BAD_ALGID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893816));
pub const NTE_BAD_FLAGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893815));
pub const NTE_BAD_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893814));
pub const NTE_BAD_KEY_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893813));
pub const NTE_BAD_HASH_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893812));
pub const NTE_NO_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893811));
pub const NTE_NO_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893810));
pub const NTE_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893809));
pub const NTE_PERM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893808));
pub const NTE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893807));
pub const NTE_DOUBLE_ENCRYPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893806));
pub const NTE_BAD_PROVIDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893805));
pub const NTE_BAD_PROV_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893804));
pub const NTE_BAD_PUBLIC_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893803));
pub const NTE_BAD_KEYSET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893802));
pub const NTE_PROV_TYPE_NOT_DEF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893801));
pub const NTE_PROV_TYPE_ENTRY_BAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893800));
pub const NTE_KEYSET_NOT_DEF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893799));
pub const NTE_KEYSET_ENTRY_BAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893798));
pub const NTE_PROV_TYPE_NO_MATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893797));
pub const NTE_SIGNATURE_FILE_BAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893796));
pub const NTE_PROVIDER_DLL_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893795));
pub const NTE_PROV_DLL_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893794));
pub const NTE_BAD_KEYSET_PARAM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893793));
pub const NTE_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893792));
pub const NTE_SYS_ERR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893791));
pub const NTE_SILENT_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893790));
pub const NTE_TOKEN_KEYSET_STORAGE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893789));
pub const NTE_TEMPORARY_PROFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893788));
pub const NTE_FIXEDPARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893787));
pub const NTE_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893786));
pub const NTE_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893785));
pub const NTE_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893784));
pub const NTE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893783));
pub const NTE_NO_MORE_ITEMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893782));
pub const NTE_BUFFERS_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893781));
pub const NTE_DECRYPTION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893780));
pub const NTE_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893779));
pub const NTE_UI_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893778));
pub const NTE_HMAC_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893777));
pub const NTE_DEVICE_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893776));
pub const NTE_AUTHENTICATION_IGNORED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893775));
pub const NTE_VALIDATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893774));
pub const NTE_INCORRECT_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893773));
pub const NTE_ENCRYPTION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893772));
pub const NTE_DEVICE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893771));
pub const NTE_USER_CANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893770));
pub const NTE_PASSWORD_CHANGE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893769));
pub const NTE_NOT_ACTIVE_CONSOLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893768));
pub const SEC_E_INSUFFICIENT_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893056));
pub const SEC_E_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893055));
pub const SEC_E_UNSUPPORTED_FUNCTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893054));
pub const SEC_E_TARGET_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893053));
pub const SEC_E_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893052));
pub const SEC_E_SECPKG_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893051));
pub const SEC_E_NOT_OWNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893050));
pub const SEC_E_CANNOT_INSTALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893049));
pub const SEC_E_INVALID_TOKEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893048));
pub const SEC_E_CANNOT_PACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893047));
pub const SEC_E_QOP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893046));
pub const SEC_E_NO_IMPERSONATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893045));
pub const SEC_E_LOGON_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893044));
pub const SEC_E_UNKNOWN_CREDENTIALS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893043));
pub const SEC_E_NO_CREDENTIALS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893042));
pub const SEC_E_MESSAGE_ALTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893041));
pub const SEC_E_OUT_OF_SEQUENCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893040));
pub const SEC_E_NO_AUTHENTICATING_AUTHORITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893039));
pub const SEC_I_CONTINUE_NEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, 590610));
pub const SEC_I_COMPLETE_NEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, 590611));
pub const SEC_I_COMPLETE_AND_CONTINUE = @import("zig.zig").typedConst(HRESULT, @as(i32, 590612));
pub const SEC_I_LOCAL_LOGON = @import("zig.zig").typedConst(HRESULT, @as(i32, 590613));
pub const SEC_I_GENERIC_EXTENSION_RECEIVED = @import("zig.zig").typedConst(HRESULT, @as(i32, 590614));
pub const SEC_E_BAD_PKGID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893034));
pub const SEC_E_CONTEXT_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893033));
pub const SEC_I_CONTEXT_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 590615));
pub const SEC_E_INCOMPLETE_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893032));
pub const SEC_E_INCOMPLETE_CREDENTIALS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893024));
pub const SEC_E_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893023));
pub const SEC_I_INCOMPLETE_CREDENTIALS = @import("zig.zig").typedConst(HRESULT, @as(i32, 590624));
pub const SEC_I_RENEGOTIATE = @import("zig.zig").typedConst(HRESULT, @as(i32, 590625));
pub const SEC_E_WRONG_PRINCIPAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893022));
pub const SEC_I_NO_LSA_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, 590627));
pub const SEC_E_TIME_SKEW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893020));
pub const SEC_E_UNTRUSTED_ROOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893019));
pub const SEC_E_ILLEGAL_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893018));
pub const SEC_E_CERT_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893017));
pub const SEC_E_CERT_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893016));
pub const SEC_E_ENCRYPT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893015));
pub const SEC_E_DECRYPT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893008));
pub const SEC_E_ALGORITHM_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893007));
pub const SEC_E_SECURITY_QOS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893006));
pub const SEC_E_UNFINISHED_CONTEXT_DELETED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893005));
pub const SEC_E_NO_TGT_REPLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893004));
pub const SEC_E_NO_IP_ADDRESSES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893003));
pub const SEC_E_WRONG_CREDENTIAL_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893002));
pub const SEC_E_CRYPTO_SYSTEM_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893001));
pub const SEC_E_MAX_REFERRALS_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146893000));
pub const SEC_E_MUST_BE_KDC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892999));
pub const SEC_E_STRONG_CRYPTO_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892998));
pub const SEC_E_TOO_MANY_PRINCIPALS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892997));
pub const SEC_E_NO_PA_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892996));
pub const SEC_E_PKINIT_NAME_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892995));
pub const SEC_E_SMARTCARD_LOGON_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892994));
pub const SEC_E_SHUTDOWN_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892993));
pub const SEC_E_KDC_INVALID_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892992));
pub const SEC_E_KDC_UNABLE_TO_REFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892991));
pub const SEC_E_KDC_UNKNOWN_ETYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892990));
pub const SEC_E_UNSUPPORTED_PREAUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892989));
pub const SEC_E_DELEGATION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892987));
pub const SEC_E_BAD_BINDINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892986));
pub const SEC_E_MULTIPLE_ACCOUNTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892985));
pub const SEC_E_NO_KERB_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892984));
pub const SEC_E_CERT_WRONG_USAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892983));
pub const SEC_E_DOWNGRADE_DETECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892976));
pub const SEC_E_SMARTCARD_CERT_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892975));
pub const SEC_E_ISSUING_CA_UNTRUSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892974));
pub const SEC_E_REVOCATION_OFFLINE_C = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892973));
pub const SEC_E_PKINIT_CLIENT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892972));
pub const SEC_E_SMARTCARD_CERT_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892971));
pub const SEC_E_NO_S4U_PROT_SUPPORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892970));
pub const SEC_E_CROSSREALM_DELEGATION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892969));
pub const SEC_E_REVOCATION_OFFLINE_KDC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892968));
pub const SEC_E_ISSUING_CA_UNTRUSTED_KDC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892967));
pub const SEC_E_KDC_CERT_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892966));
pub const SEC_E_KDC_CERT_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892965));
pub const SEC_I_SIGNATURE_NEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, 590684));
pub const SEC_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892963));
pub const SEC_E_DELEGATION_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892962));
pub const SEC_E_POLICY_NLTM_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892961));
pub const SEC_I_NO_RENEGOTIATION = @import("zig.zig").typedConst(HRESULT, @as(i32, 590688));
pub const SEC_E_NO_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892959));
pub const SEC_E_PKU2U_CERT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892958));
pub const SEC_E_MUTUAL_AUTH_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892957));
pub const SEC_I_MESSAGE_FRAGMENT = @import("zig.zig").typedConst(HRESULT, @as(i32, 590692));
pub const SEC_E_ONLY_HTTPS_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892955));
pub const SEC_I_CONTINUE_NEEDED_MESSAGE_OK = @import("zig.zig").typedConst(HRESULT, @as(i32, 590694));
pub const SEC_E_APPLICATION_PROTOCOL_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892953));
pub const SEC_I_ASYNC_CALL_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, 590696));
pub const SEC_E_INVALID_UPN_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892951));
pub const SEC_E_EXT_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892950));
pub const SEC_E_INSUFFICIENT_BUFFERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146892949));
pub const CRYPT_E_MSG_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889727));
pub const CRYPT_E_UNKNOWN_ALGO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889726));
pub const CRYPT_E_OID_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889725));
pub const CRYPT_E_INVALID_MSG_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889724));
pub const CRYPT_E_UNEXPECTED_ENCODING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889723));
pub const CRYPT_E_AUTH_ATTR_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889722));
pub const CRYPT_E_HASH_VALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889721));
pub const CRYPT_E_INVALID_INDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889720));
pub const CRYPT_E_ALREADY_DECRYPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889719));
pub const CRYPT_E_NOT_DECRYPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889718));
pub const CRYPT_E_RECIPIENT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889717));
pub const CRYPT_E_CONTROL_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889716));
pub const CRYPT_E_ISSUER_SERIALNUMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889715));
pub const CRYPT_E_SIGNER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889714));
pub const CRYPT_E_ATTRIBUTES_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889713));
pub const CRYPT_E_STREAM_MSG_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889712));
pub const CRYPT_E_STREAM_INSUFFICIENT_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146889711));
pub const CRYPT_I_NEW_PROTECTION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 593938));
pub const CRYPT_E_BAD_LEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885631));
pub const CRYPT_E_BAD_ENCODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885630));
pub const CRYPT_E_FILE_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885629));
pub const CRYPT_E_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885628));
pub const CRYPT_E_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885627));
pub const CRYPT_E_NO_PROVIDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885626));
pub const CRYPT_E_SELF_SIGNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885625));
pub const CRYPT_E_DELETED_PREV = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885624));
pub const CRYPT_E_NO_MATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885623));
pub const CRYPT_E_UNEXPECTED_MSG_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885622));
pub const CRYPT_E_NO_KEY_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885621));
pub const CRYPT_E_NO_DECRYPT_CERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885620));
pub const CRYPT_E_BAD_MSG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885619));
pub const CRYPT_E_NO_SIGNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885618));
pub const CRYPT_E_PENDING_CLOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885617));
pub const CRYPT_E_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885616));
pub const CRYPT_E_NO_REVOCATION_DLL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885615));
pub const CRYPT_E_NO_REVOCATION_CHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885614));
pub const CRYPT_E_REVOCATION_OFFLINE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885613));
pub const CRYPT_E_NOT_IN_REVOCATION_DATABASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885612));
pub const CRYPT_E_INVALID_NUMERIC_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885600));
pub const CRYPT_E_INVALID_PRINTABLE_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885599));
pub const CRYPT_E_INVALID_IA5_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885598));
pub const CRYPT_E_INVALID_X500_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885597));
pub const CRYPT_E_NOT_CHAR_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885596));
pub const CRYPT_E_FILERESIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885595));
pub const CRYPT_E_SECURITY_SETTINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885594));
pub const CRYPT_E_NO_VERIFY_USAGE_DLL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885593));
pub const CRYPT_E_NO_VERIFY_USAGE_CHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885592));
pub const CRYPT_E_VERIFY_USAGE_OFFLINE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885591));
pub const CRYPT_E_NOT_IN_CTL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885590));
pub const CRYPT_E_NO_TRUSTED_SIGNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885589));
pub const CRYPT_E_MISSING_PUBKEY_PARA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885588));
pub const CRYPT_E_OBJECT_LOCATOR_OBJECT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146885587));
pub const CRYPT_E_OSS_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881536));
pub const OSS_MORE_BUF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881535));
pub const OSS_NEGATIVE_UINTEGER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881534));
pub const OSS_PDU_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881533));
pub const OSS_MORE_INPUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881532));
pub const OSS_DATA_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881531));
pub const OSS_BAD_ARG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881530));
pub const OSS_BAD_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881529));
pub const OSS_OUT_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881528));
pub const OSS_PDU_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881527));
pub const OSS_LIMITED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881526));
pub const OSS_BAD_PTR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881525));
pub const OSS_BAD_TIME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881524));
pub const OSS_INDEFINITE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881523));
pub const OSS_MEM_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881522));
pub const OSS_BAD_TABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881521));
pub const OSS_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881520));
pub const OSS_CONSTRAINT_VIOLATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881519));
pub const OSS_FATAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881518));
pub const OSS_ACCESS_SERIALIZATION_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881517));
pub const OSS_NULL_TBL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881516));
pub const OSS_NULL_FCN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881515));
pub const OSS_BAD_ENCRULES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881514));
pub const OSS_UNAVAIL_ENCRULES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881513));
pub const OSS_CANT_OPEN_TRACE_WINDOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881512));
pub const OSS_UNIMPLEMENTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881511));
pub const OSS_OID_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881510));
pub const OSS_CANT_OPEN_TRACE_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881509));
pub const OSS_TRACE_FILE_ALREADY_OPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881508));
pub const OSS_TABLE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881507));
pub const OSS_TYPE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881506));
pub const OSS_REAL_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881505));
pub const OSS_REAL_CODE_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881504));
pub const OSS_OUT_OF_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881503));
pub const OSS_COPIER_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881502));
pub const OSS_CONSTRAINT_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881501));
pub const OSS_COMPARATOR_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881500));
pub const OSS_COMPARATOR_CODE_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881499));
pub const OSS_MEM_MGR_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881498));
pub const OSS_PDV_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881497));
pub const OSS_PDV_CODE_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881496));
pub const OSS_API_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881495));
pub const OSS_BERDER_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881494));
pub const OSS_PER_DLL_NOT_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881493));
pub const OSS_OPEN_TYPE_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881492));
pub const OSS_MUTEX_NOT_CREATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881491));
pub const OSS_CANT_CLOSE_TRACE_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881490));
pub const CRYPT_E_ASN1_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881280));
pub const CRYPT_E_ASN1_INTERNAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881279));
pub const CRYPT_E_ASN1_EOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881278));
pub const CRYPT_E_ASN1_CORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881277));
pub const CRYPT_E_ASN1_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881276));
pub const CRYPT_E_ASN1_CONSTRAINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881275));
pub const CRYPT_E_ASN1_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881274));
pub const CRYPT_E_ASN1_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881273));
pub const CRYPT_E_ASN1_BADPDU = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881272));
pub const CRYPT_E_ASN1_BADARGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881271));
pub const CRYPT_E_ASN1_BADREAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881270));
pub const CRYPT_E_ASN1_BADTAG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881269));
pub const CRYPT_E_ASN1_CHOICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881268));
pub const CRYPT_E_ASN1_RULE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881267));
pub const CRYPT_E_ASN1_UTF8 = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881266));
pub const CRYPT_E_ASN1_PDU_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881229));
pub const CRYPT_E_ASN1_NYI = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881228));
pub const CRYPT_E_ASN1_EXTENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881023));
pub const CRYPT_E_ASN1_NOEOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146881022));
pub const CERTSRV_E_BAD_REQUESTSUBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877439));
pub const CERTSRV_E_NO_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877438));
pub const CERTSRV_E_BAD_REQUESTSTATUS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877437));
pub const CERTSRV_E_PROPERTY_EMPTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877436));
pub const CERTSRV_E_INVALID_CA_CERTIFICATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877435));
pub const CERTSRV_E_SERVER_SUSPENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877434));
pub const CERTSRV_E_ENCODING_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877433));
pub const CERTSRV_E_ROLECONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877432));
pub const CERTSRV_E_RESTRICTEDOFFICER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877431));
pub const CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877430));
pub const CERTSRV_E_NO_VALID_KRA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877429));
pub const CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877428));
pub const CERTSRV_E_NO_CAADMIN_DEFINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877427));
pub const CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877426));
pub const CERTSRV_E_NO_DB_SESSIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877425));
pub const CERTSRV_E_ALIGNMENT_FAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877424));
pub const CERTSRV_E_ENROLL_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877423));
pub const CERTSRV_E_TEMPLATE_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877422));
pub const CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877421));
pub const CERTSRV_E_ADMIN_DENIED_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877420));
pub const CERTSRV_E_NO_POLICY_SERVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877419));
pub const CERTSRV_E_WEAK_SIGNATURE_OR_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877418));
pub const CERTSRV_E_KEY_ATTESTATION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877417));
pub const CERTSRV_E_ENCRYPTION_CERT_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146877416));
pub const CERTSRV_E_UNSUPPORTED_CERT_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875392));
pub const CERTSRV_E_NO_CERT_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875391));
pub const CERTSRV_E_TEMPLATE_CONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875390));
pub const CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875389));
pub const CERTSRV_E_ARCHIVED_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875388));
pub const CERTSRV_E_SMIME_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875387));
pub const CERTSRV_E_BAD_RENEWAL_SUBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875386));
pub const CERTSRV_E_BAD_TEMPLATE_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875385));
pub const CERTSRV_E_TEMPLATE_POLICY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875384));
pub const CERTSRV_E_SIGNATURE_POLICY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875383));
pub const CERTSRV_E_SIGNATURE_COUNT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875382));
pub const CERTSRV_E_SIGNATURE_REJECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875381));
pub const CERTSRV_E_ISSUANCE_POLICY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875380));
pub const CERTSRV_E_SUBJECT_UPN_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875379));
pub const CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875378));
pub const CERTSRV_E_SUBJECT_DNS_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875377));
pub const CERTSRV_E_ARCHIVED_KEY_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875376));
pub const CERTSRV_E_KEY_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875375));
pub const CERTSRV_E_SUBJECT_EMAIL_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875374));
pub const CERTSRV_E_UNKNOWN_CERT_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875373));
pub const CERTSRV_E_CERT_TYPE_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875372));
pub const CERTSRV_E_TOO_MANY_SIGNATURES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875371));
pub const CERTSRV_E_RENEWAL_BAD_PUBLIC_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875370));
pub const CERTSRV_E_INVALID_EK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875369));
pub const CERTSRV_E_INVALID_IDBINDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875368));
pub const CERTSRV_E_INVALID_ATTESTATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875367));
pub const CERTSRV_E_KEY_ATTESTATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875366));
pub const CERTSRV_E_CORRUPT_KEY_ATTESTATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875365));
pub const CERTSRV_E_EXPIRED_CHALLENGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875364));
pub const CERTSRV_E_INVALID_RESPONSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875363));
pub const CERTSRV_E_INVALID_REQUESTID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875362));
pub const CERTSRV_E_REQUEST_PRECERTIFICATE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875361));
pub const CERTSRV_E_PENDING_CLIENT_RESPONSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146875360));
pub const XENROLL_E_KEY_NOT_EXPORTABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873344));
pub const XENROLL_E_CANNOT_ADD_ROOT_CERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873343));
pub const XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873342));
pub const XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873341));
pub const XENROLL_E_RESPONSE_KA_HASH_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873340));
pub const XENROLL_E_KEYSPEC_SMIME_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146873339));
pub const TRUST_E_SYSTEM_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869247));
pub const TRUST_E_NO_SIGNER_CERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869246));
pub const TRUST_E_COUNTER_SIGNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869245));
pub const TRUST_E_CERT_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869244));
pub const TRUST_E_TIME_STAMP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869243));
pub const TRUST_E_BAD_DIGEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869232));
pub const TRUST_E_MALFORMED_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869231));
pub const TRUST_E_BASIC_CONSTRAINTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869223));
pub const TRUST_E_FINANCIAL_CRITERIA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146869218));
pub const MSSIPOTF_E_OUTOFMEMRANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865151));
pub const MSSIPOTF_E_CANTGETOBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865150));
pub const MSSIPOTF_E_NOHEADTABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865149));
pub const MSSIPOTF_E_BAD_MAGICNUMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865148));
pub const MSSIPOTF_E_BAD_OFFSET_TABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865147));
pub const MSSIPOTF_E_TABLE_TAGORDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865146));
pub const MSSIPOTF_E_TABLE_LONGWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865145));
pub const MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865144));
pub const MSSIPOTF_E_TABLES_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865143));
pub const MSSIPOTF_E_TABLE_PADBYTES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865142));
pub const MSSIPOTF_E_FILETOOSMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865141));
pub const MSSIPOTF_E_TABLE_CHECKSUM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865140));
pub const MSSIPOTF_E_FILE_CHECKSUM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865139));
pub const MSSIPOTF_E_FAILED_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865136));
pub const MSSIPOTF_E_FAILED_HINTS_CHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865135));
pub const MSSIPOTF_E_NOT_OPENTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865134));
pub const MSSIPOTF_E_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865133));
pub const MSSIPOTF_E_CRYPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865132));
pub const MSSIPOTF_E_BADVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865131));
pub const MSSIPOTF_E_DSIG_STRUCTURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865130));
pub const MSSIPOTF_E_PCONST_CHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865129));
pub const MSSIPOTF_E_STRUCTURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865128));
pub const ERROR_CRED_REQUIRES_CONFIRMATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146865127));
pub const NTE_OP_OK = @as(u32, 0);
pub const TRUST_E_PROVIDER_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762751));
pub const TRUST_E_ACTION_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762750));
pub const TRUST_E_SUBJECT_FORM_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762749));
pub const TRUST_E_SUBJECT_NOT_TRUSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762748));
pub const DIGSIG_E_ENCODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762747));
pub const DIGSIG_E_DECODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762746));
pub const DIGSIG_E_EXTENSIBILITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762745));
pub const DIGSIG_E_CRYPTO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762744));
pub const PERSIST_E_SIZEDEFINITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762743));
pub const PERSIST_E_SIZEINDEFINITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762742));
pub const PERSIST_E_NOTSELFSIZING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762741));
pub const TRUST_E_NOSIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762496));
pub const CERT_E_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762495));
pub const CERT_E_VALIDITYPERIODNESTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762494));
pub const CERT_E_ROLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762493));
pub const CERT_E_PATHLENCONST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762492));
pub const CERT_E_CRITICAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762491));
pub const CERT_E_PURPOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762490));
pub const CERT_E_ISSUERCHAINING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762489));
pub const CERT_E_MALFORMED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762488));
pub const CERT_E_UNTRUSTEDROOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762487));
pub const CERT_E_CHAINING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762486));
pub const TRUST_E_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762485));
pub const CERT_E_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762484));
pub const CERT_E_UNTRUSTEDTESTROOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762483));
pub const CERT_E_REVOCATION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762482));
pub const CERT_E_CN_NO_MATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762481));
pub const CERT_E_WRONG_USAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762480));
pub const TRUST_E_EXPLICIT_DISTRUST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762479));
pub const CERT_E_UNTRUSTEDCA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762478));
pub const CERT_E_INVALID_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762477));
pub const CERT_E_INVALID_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146762476));
pub const SPAPI_E_EXPECTED_SECTION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500608));
pub const SPAPI_E_BAD_SECTION_NAME_LINE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500607));
pub const SPAPI_E_SECTION_NAME_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500606));
pub const SPAPI_E_GENERAL_SYNTAX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500605));
pub const SPAPI_E_WRONG_INF_STYLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500352));
pub const SPAPI_E_SECTION_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500351));
pub const SPAPI_E_LINE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500350));
pub const SPAPI_E_NO_BACKUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500349));
pub const SPAPI_E_NO_ASSOCIATED_CLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500096));
pub const SPAPI_E_CLASS_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500095));
pub const SPAPI_E_DUPLICATE_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500094));
pub const SPAPI_E_NO_DRIVER_SELECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500093));
pub const SPAPI_E_KEY_DOES_NOT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500092));
pub const SPAPI_E_INVALID_DEVINST_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500091));
pub const SPAPI_E_INVALID_CLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500090));
pub const SPAPI_E_DEVINST_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500089));
pub const SPAPI_E_DEVINFO_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500088));
pub const SPAPI_E_INVALID_REG_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500087));
pub const SPAPI_E_NO_INF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500086));
pub const SPAPI_E_NO_SUCH_DEVINST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500085));
pub const SPAPI_E_CANT_LOAD_CLASS_ICON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500084));
pub const SPAPI_E_INVALID_CLASS_INSTALLER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500083));
pub const SPAPI_E_DI_DO_DEFAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500082));
pub const SPAPI_E_DI_NOFILECOPY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500081));
pub const SPAPI_E_INVALID_HWPROFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500080));
pub const SPAPI_E_NO_DEVICE_SELECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500079));
pub const SPAPI_E_DEVINFO_LIST_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500078));
pub const SPAPI_E_DEVINFO_DATA_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500077));
pub const SPAPI_E_DI_BAD_PATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500076));
pub const SPAPI_E_NO_CLASSINSTALL_PARAMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500075));
pub const SPAPI_E_FILEQUEUE_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500074));
pub const SPAPI_E_BAD_SERVICE_INSTALLSECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500073));
pub const SPAPI_E_NO_CLASS_DRIVER_LIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500072));
pub const SPAPI_E_NO_ASSOCIATED_SERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500071));
pub const SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500070));
pub const SPAPI_E_DEVICE_INTERFACE_ACTIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500069));
pub const SPAPI_E_DEVICE_INTERFACE_REMOVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500068));
pub const SPAPI_E_BAD_INTERFACE_INSTALLSECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500067));
pub const SPAPI_E_NO_SUCH_INTERFACE_CLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500066));
pub const SPAPI_E_INVALID_REFERENCE_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500065));
pub const SPAPI_E_INVALID_MACHINENAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500064));
pub const SPAPI_E_REMOTE_COMM_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500063));
pub const SPAPI_E_MACHINE_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500062));
pub const SPAPI_E_NO_CONFIGMGR_SERVICES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500061));
pub const SPAPI_E_INVALID_PROPPAGE_PROVIDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500060));
pub const SPAPI_E_NO_SUCH_DEVICE_INTERFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500059));
pub const SPAPI_E_DI_POSTPROCESSING_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500058));
pub const SPAPI_E_INVALID_COINSTALLER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500057));
pub const SPAPI_E_NO_COMPAT_DRIVERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500056));
pub const SPAPI_E_NO_DEVICE_ICON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500055));
pub const SPAPI_E_INVALID_INF_LOGCONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500054));
pub const SPAPI_E_DI_DONT_INSTALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500053));
pub const SPAPI_E_INVALID_FILTER_DRIVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500052));
pub const SPAPI_E_NON_WINDOWS_NT_DRIVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500051));
pub const SPAPI_E_NON_WINDOWS_DRIVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500050));
pub const SPAPI_E_NO_CATALOG_FOR_OEM_INF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500049));
pub const SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500048));
pub const SPAPI_E_NOT_DISABLEABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500047));
pub const SPAPI_E_CANT_REMOVE_DEVINST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500046));
pub const SPAPI_E_INVALID_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500045));
pub const SPAPI_E_DRIVER_NONNATIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500044));
pub const SPAPI_E_IN_WOW64 = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500043));
pub const SPAPI_E_SET_SYSTEM_RESTORE_POINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500042));
pub const SPAPI_E_INCORRECTLY_COPIED_INF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500041));
pub const SPAPI_E_SCE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500040));
pub const SPAPI_E_UNKNOWN_EXCEPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500039));
pub const SPAPI_E_PNP_REGISTRY_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500038));
pub const SPAPI_E_REMOTE_REQUEST_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500037));
pub const SPAPI_E_NOT_AN_INSTALLED_OEM_INF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500036));
pub const SPAPI_E_INF_IN_USE_BY_DEVICES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500035));
pub const SPAPI_E_DI_FUNCTION_OBSOLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500034));
pub const SPAPI_E_NO_AUTHENTICODE_CATALOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500033));
pub const SPAPI_E_AUTHENTICODE_DISALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500032));
pub const SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500031));
pub const SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500030));
pub const SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500029));
pub const SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500028));
pub const SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500027));
pub const SPAPI_E_DEVICE_INSTALLER_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500026));
pub const SPAPI_E_DRIVER_STORE_ADD_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500025));
pub const SPAPI_E_DEVICE_INSTALL_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500024));
pub const SPAPI_E_DRIVER_INSTALL_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500023));
pub const SPAPI_E_WRONG_INF_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500022));
pub const SPAPI_E_FILE_HASH_NOT_IN_CATALOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500021));
pub const SPAPI_E_DRIVER_STORE_DELETE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146500020));
pub const SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146499840));
pub const SPAPI_E_ERROR_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146496512));
pub const SCARD_F_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435071));
pub const SCARD_E_CANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435070));
pub const SCARD_E_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435069));
pub const SCARD_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435068));
pub const SCARD_E_INVALID_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435067));
pub const SCARD_E_NO_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435066));
pub const SCARD_F_WAITED_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435065));
pub const SCARD_E_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435064));
pub const SCARD_E_UNKNOWN_READER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435063));
pub const SCARD_E_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435062));
pub const SCARD_E_SHARING_VIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435061));
pub const SCARD_E_NO_SMARTCARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435060));
pub const SCARD_E_UNKNOWN_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435059));
pub const SCARD_E_CANT_DISPOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435058));
pub const SCARD_E_PROTO_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435057));
pub const SCARD_E_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435056));
pub const SCARD_E_INVALID_VALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435055));
pub const SCARD_E_SYSTEM_CANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435054));
pub const SCARD_F_COMM_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435053));
pub const SCARD_F_UNKNOWN_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435052));
pub const SCARD_E_INVALID_ATR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435051));
pub const SCARD_E_NOT_TRANSACTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435050));
pub const SCARD_E_READER_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435049));
pub const SCARD_P_SHUTDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435048));
pub const SCARD_E_PCI_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435047));
pub const SCARD_E_READER_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435046));
pub const SCARD_E_DUPLICATE_READER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435045));
pub const SCARD_E_CARD_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435044));
pub const SCARD_E_NO_SERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435043));
pub const SCARD_E_SERVICE_STOPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435042));
pub const SCARD_E_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435041));
pub const SCARD_E_ICC_INSTALLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435040));
pub const SCARD_E_ICC_CREATEORDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435039));
pub const SCARD_E_UNSUPPORTED_FEATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435038));
pub const SCARD_E_DIR_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435037));
pub const SCARD_E_FILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435036));
pub const SCARD_E_NO_DIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435035));
pub const SCARD_E_NO_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435034));
pub const SCARD_E_NO_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435033));
pub const SCARD_E_WRITE_TOO_MANY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435032));
pub const SCARD_E_BAD_SEEK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435031));
pub const SCARD_E_INVALID_CHV = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435030));
pub const SCARD_E_UNKNOWN_RES_MNG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435029));
pub const SCARD_E_NO_SUCH_CERTIFICATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435028));
pub const SCARD_E_CERTIFICATE_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435027));
pub const SCARD_E_NO_READERS_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435026));
pub const SCARD_E_COMM_DATA_LOST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435025));
pub const SCARD_E_NO_KEY_CONTAINER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435024));
pub const SCARD_E_SERVER_TOO_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435023));
pub const SCARD_E_PIN_CACHE_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435022));
pub const SCARD_E_NO_PIN_CACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435021));
pub const SCARD_E_READ_ONLY_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146435020));
pub const SCARD_W_UNSUPPORTED_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434971));
pub const SCARD_W_UNRESPONSIVE_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434970));
pub const SCARD_W_UNPOWERED_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434969));
pub const SCARD_W_RESET_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434968));
pub const SCARD_W_REMOVED_CARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434967));
pub const SCARD_W_SECURITY_VIOLATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434966));
pub const SCARD_W_WRONG_CHV = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434965));
pub const SCARD_W_CHV_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434964));
pub const SCARD_W_EOF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434963));
pub const SCARD_W_CANCELLED_BY_USER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434962));
pub const SCARD_W_CARD_NOT_AUTHENTICATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434961));
pub const SCARD_W_CACHE_ITEM_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434960));
pub const SCARD_W_CACHE_ITEM_STALE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434959));
pub const SCARD_W_CACHE_ITEM_TOO_BIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146434958));
pub const COMADMIN_E_OBJECTERRORS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368511));
pub const COMADMIN_E_OBJECTINVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368510));
pub const COMADMIN_E_KEYMISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368509));
pub const COMADMIN_E_ALREADYINSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368508));
pub const COMADMIN_E_APP_FILE_WRITEFAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368505));
pub const COMADMIN_E_APP_FILE_READFAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368504));
pub const COMADMIN_E_APP_FILE_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368503));
pub const COMADMIN_E_BADPATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368502));
pub const COMADMIN_E_APPLICATIONEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368501));
pub const COMADMIN_E_ROLEEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368500));
pub const COMADMIN_E_CANTCOPYFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368499));
pub const COMADMIN_E_NOUSER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368497));
pub const COMADMIN_E_INVALIDUSERIDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368496));
pub const COMADMIN_E_NOREGISTRYCLSID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368495));
pub const COMADMIN_E_BADREGISTRYPROGID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368494));
pub const COMADMIN_E_AUTHENTICATIONLEVEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368493));
pub const COMADMIN_E_USERPASSWDNOTVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368492));
pub const COMADMIN_E_CLSIDORIIDMISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368488));
pub const COMADMIN_E_REMOTEINTERFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368487));
pub const COMADMIN_E_DLLREGISTERSERVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368486));
pub const COMADMIN_E_NOSERVERSHARE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368485));
pub const COMADMIN_E_DLLLOADFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368483));
pub const COMADMIN_E_BADREGISTRYLIBID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368482));
pub const COMADMIN_E_APPDIRNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368481));
pub const COMADMIN_E_REGISTRARFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368477));
pub const COMADMIN_E_COMPFILE_DOESNOTEXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368476));
pub const COMADMIN_E_COMPFILE_LOADDLLFAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368475));
pub const COMADMIN_E_COMPFILE_GETCLASSOBJ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368474));
pub const COMADMIN_E_COMPFILE_CLASSNOTAVAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368473));
pub const COMADMIN_E_COMPFILE_BADTLB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368472));
pub const COMADMIN_E_COMPFILE_NOTINSTALLABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368471));
pub const COMADMIN_E_NOTCHANGEABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368470));
pub const COMADMIN_E_NOTDELETEABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368469));
pub const COMADMIN_E_SESSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368468));
pub const COMADMIN_E_COMP_MOVE_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368467));
pub const COMADMIN_E_COMP_MOVE_BAD_DEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368466));
pub const COMADMIN_E_REGISTERTLB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368464));
pub const COMADMIN_E_SYSTEMAPP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368461));
pub const COMADMIN_E_COMPFILE_NOREGISTRAR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368460));
pub const COMADMIN_E_COREQCOMPINSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368459));
pub const COMADMIN_E_SERVICENOTINSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368458));
pub const COMADMIN_E_PROPERTYSAVEFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368457));
pub const COMADMIN_E_OBJECTEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368456));
pub const COMADMIN_E_COMPONENTEXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368455));
pub const COMADMIN_E_REGFILE_CORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368453));
pub const COMADMIN_E_PROPERTY_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368452));
pub const COMADMIN_E_NOTINREGISTRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368450));
pub const COMADMIN_E_OBJECTNOTPOOLABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368449));
pub const COMADMIN_E_APPLID_MATCHES_CLSID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368442));
pub const COMADMIN_E_ROLE_DOES_NOT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368441));
pub const COMADMIN_E_START_APP_NEEDS_COMPONENTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368440));
pub const COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368439));
pub const COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368438));
pub const COMADMIN_E_CAN_NOT_START_APP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368437));
pub const COMADMIN_E_CAN_NOT_EXPORT_SYS_APP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368436));
pub const COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368435));
pub const COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368434));
pub const COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368433));
pub const COMADMIN_E_BASE_PARTITION_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368432));
pub const COMADMIN_E_START_APP_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368431));
pub const COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368425));
pub const COMADMIN_E_CAT_INVALID_PARTITION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368424));
pub const COMADMIN_E_CAT_PARTITION_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368423));
pub const COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368422));
pub const COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368421));
pub const COMADMIN_E_AMBIGUOUS_APPLICATION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368420));
pub const COMADMIN_E_AMBIGUOUS_PARTITION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368419));
pub const COMADMIN_E_REGDB_NOTINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368398));
pub const COMADMIN_E_REGDB_NOTOPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368397));
pub const COMADMIN_E_REGDB_SYSTEMERR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368396));
pub const COMADMIN_E_REGDB_ALREADYRUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368395));
pub const COMADMIN_E_MIG_VERSIONNOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368384));
pub const COMADMIN_E_MIG_SCHEMANOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368383));
pub const COMADMIN_E_CAT_BITNESSMISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368382));
pub const COMADMIN_E_CAT_UNACCEPTABLEBITNESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368381));
pub const COMADMIN_E_CAT_WRONGAPPBITNESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368380));
pub const COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368379));
pub const COMADMIN_E_CAT_SERVERFAULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368378));
pub const COMQC_E_APPLICATION_NOT_QUEUED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146368000));
pub const COMQC_E_NO_QUEUEABLE_INTERFACES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367999));
pub const COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367998));
pub const COMQC_E_NO_IPERSISTSTREAM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367997));
pub const COMQC_E_BAD_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367996));
pub const COMQC_E_UNAUTHENTICATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367995));
pub const COMQC_E_UNTRUSTED_ENQUEUER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367994));
pub const MSDTC_E_DUPLICATE_RESOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367743));
pub const COMADMIN_E_OBJECT_PARENT_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367480));
pub const COMADMIN_E_OBJECT_DOES_NOT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367479));
pub const COMADMIN_E_APP_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367478));
pub const COMADMIN_E_INVALID_PARTITION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367477));
pub const COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367475));
pub const COMADMIN_E_USER_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367474));
pub const COMADMIN_E_CANTRECYCLELIBRARYAPPS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367473));
pub const COMADMIN_E_CANTRECYCLESERVICEAPPS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367471));
pub const COMADMIN_E_PROCESSALREADYRECYCLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367470));
pub const COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367469));
pub const COMADMIN_E_CANTMAKEINPROCSERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367468));
pub const COMADMIN_E_PROGIDINUSEBYCLSID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367467));
pub const COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367466));
pub const COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367465));
pub const COMADMIN_E_PARTITION_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367464));
pub const COMADMIN_E_PARTITION_MSI_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367463));
pub const COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367462));
pub const COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367461));
pub const COMADMIN_E_COMP_MOVE_SOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367460));
pub const COMADMIN_E_COMP_MOVE_DEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367459));
pub const COMADMIN_E_COMP_MOVE_PRIVATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367458));
pub const COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367457));
pub const COMADMIN_E_CANNOT_ALIAS_EVENTCLASS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367456));
pub const COMADMIN_E_PRIVATE_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367455));
pub const COMADMIN_E_SAFERINVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367454));
pub const COMADMIN_E_REGISTRY_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367453));
pub const COMADMIN_E_PARTITIONS_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2146367452));
pub const WER_S_REPORT_DEBUG = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769472));
pub const WER_S_REPORT_UPLOADED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769473));
pub const WER_S_REPORT_QUEUED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769474));
pub const WER_S_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769475));
pub const WER_S_SUSPENDED_UPLOAD = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769476));
pub const WER_S_DISABLED_QUEUE = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769477));
pub const WER_S_DISABLED_ARCHIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769478));
pub const WER_S_REPORT_ASYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769479));
pub const WER_S_IGNORE_ASSERT_INSTANCE = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769480));
pub const WER_S_IGNORE_ALL_ASSERTS = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769481));
pub const WER_S_ASSERT_CONTINUE = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769482));
pub const WER_S_THROTTLED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769483));
pub const WER_S_REPORT_UPLOADED_CAB = @import("zig.zig").typedConst(HRESULT, @as(i32, 1769484));
pub const WER_E_CRASH_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681408));
pub const WER_E_CANCELED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681407));
pub const WER_E_NETWORK_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681406));
pub const WER_E_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681405));
pub const WER_E_ALREADY_REPORTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681404));
pub const WER_E_DUMP_THROTTLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681403));
pub const WER_E_INSUFFICIENT_CONSENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681402));
pub const WER_E_TOO_HEAVY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145681401));
pub const ERROR_FLT_IO_COMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, 2031617));
pub const ERROR_FLT_NO_HANDLER_DEFINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452031));
pub const ERROR_FLT_CONTEXT_ALREADY_DEFINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452030));
pub const ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452029));
pub const ERROR_FLT_DISALLOW_FAST_IO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452028));
pub const ERROR_FLT_INVALID_NAME_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452027));
pub const ERROR_FLT_NOT_SAFE_TO_POST_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452026));
pub const ERROR_FLT_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452025));
pub const ERROR_FLT_FILTER_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452024));
pub const ERROR_FLT_POST_OPERATION_CLEANUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452023));
pub const ERROR_FLT_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452022));
pub const ERROR_FLT_DELETING_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452021));
pub const ERROR_FLT_MUST_BE_NONPAGED_POOL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452020));
pub const ERROR_FLT_DUPLICATE_ENTRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452019));
pub const ERROR_FLT_CBDQ_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452018));
pub const ERROR_FLT_DO_NOT_ATTACH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452017));
pub const ERROR_FLT_DO_NOT_DETACH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452016));
pub const ERROR_FLT_INSTANCE_ALTITUDE_COLLISION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452015));
pub const ERROR_FLT_INSTANCE_NAME_COLLISION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452014));
pub const ERROR_FLT_FILTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452013));
pub const ERROR_FLT_VOLUME_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452012));
pub const ERROR_FLT_INSTANCE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452011));
pub const ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452010));
pub const ERROR_FLT_INVALID_CONTEXT_REGISTRATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452009));
pub const ERROR_FLT_NAME_CACHE_MISS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452008));
pub const ERROR_FLT_NO_DEVICE_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452007));
pub const ERROR_FLT_VOLUME_ALREADY_MOUNTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452006));
pub const ERROR_FLT_ALREADY_ENLISTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452005));
pub const ERROR_FLT_CONTEXT_ALREADY_LINKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452004));
pub const ERROR_FLT_NO_WAITER_FOR_REPLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145452000));
pub const ERROR_FLT_REGISTRATION_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145451997));
pub const ERROR_HUNG_DISPLAY_DRIVER_THREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144993279));
pub const DWM_E_COMPOSITIONDISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980991));
pub const DWM_E_REMOTING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980990));
pub const DWM_E_NO_REDIRECTION_SURFACE_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980989));
pub const DWM_E_NOT_QUEUING_PRESENTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980988));
pub const DWM_E_ADAPTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980987));
pub const DWM_S_GDI_REDIRECTION_SURFACE = @import("zig.zig").typedConst(HRESULT, @as(i32, 2502661));
pub const DWM_E_TEXTURE_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144980985));
pub const DWM_S_GDI_REDIRECTION_SURFACE_BLT_VIA_GDI = @import("zig.zig").typedConst(HRESULT, @as(i32, 2502664));
pub const ERROR_MONITOR_NO_DESCRIPTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, 2494465));
pub const ERROR_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, 2494466));
pub const ERROR_MONITOR_INVALID_DESCRIPTOR_CHECKSUM = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247357));
pub const ERROR_MONITOR_INVALID_STANDARD_TIMING_BLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247356));
pub const ERROR_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247355));
pub const ERROR_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247354));
pub const ERROR_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247353));
pub const ERROR_MONITOR_NO_MORE_DESCRIPTOR_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247352));
pub const ERROR_MONITOR_INVALID_DETAILED_TIMING_BLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247351));
pub const ERROR_MONITOR_INVALID_MANUFACTURE_DATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071247350));
pub const ERROR_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243264));
pub const ERROR_GRAPHICS_INSUFFICIENT_DMA_BUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243263));
pub const ERROR_GRAPHICS_INVALID_DISPLAY_ADAPTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243262));
pub const ERROR_GRAPHICS_ADAPTER_WAS_RESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243261));
pub const ERROR_GRAPHICS_INVALID_DRIVER_MODEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243260));
pub const ERROR_GRAPHICS_PRESENT_MODE_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243259));
pub const ERROR_GRAPHICS_PRESENT_OCCLUDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243258));
pub const ERROR_GRAPHICS_PRESENT_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243257));
pub const ERROR_GRAPHICS_CANNOTCOLORCONVERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243256));
pub const ERROR_GRAPHICS_DRIVER_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243255));
pub const ERROR_GRAPHICS_PARTIAL_DATA_POPULATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076240394));
pub const ERROR_GRAPHICS_PRESENT_REDIRECTION_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243253));
pub const ERROR_GRAPHICS_PRESENT_UNOCCLUDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243252));
pub const ERROR_GRAPHICS_WINDOWDC_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243251));
pub const ERROR_GRAPHICS_WINDOWLESS_PRESENT_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243250));
pub const ERROR_GRAPHICS_PRESENT_INVALID_WINDOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243249));
pub const ERROR_GRAPHICS_PRESENT_BUFFER_NOT_BOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243248));
pub const ERROR_GRAPHICS_VAIL_STATE_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243247));
pub const ERROR_GRAPHICS_INDIRECT_DISPLAY_ABANDON_SWAPCHAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243246));
pub const ERROR_GRAPHICS_INDIRECT_DISPLAY_DEVICE_STOPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243245));
pub const ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_CREATE_SUPERWETINK_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243244));
pub const ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_DESTROY_SUPERWETINK_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243243));
pub const ERROR_GRAPHICS_NO_VIDEO_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243008));
pub const ERROR_GRAPHICS_CANT_LOCK_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243007));
pub const ERROR_GRAPHICS_ALLOCATION_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243006));
pub const ERROR_GRAPHICS_TOO_MANY_REFERENCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243005));
pub const ERROR_GRAPHICS_TRY_AGAIN_LATER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243004));
pub const ERROR_GRAPHICS_TRY_AGAIN_NOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243003));
pub const ERROR_GRAPHICS_ALLOCATION_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243002));
pub const ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243001));
pub const ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071243000));
pub const ERROR_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242999));
pub const ERROR_GRAPHICS_INVALID_ALLOCATION_USAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242992));
pub const ERROR_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242991));
pub const ERROR_GRAPHICS_ALLOCATION_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242990));
pub const ERROR_GRAPHICS_INVALID_ALLOCATION_INSTANCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242989));
pub const ERROR_GRAPHICS_INVALID_ALLOCATION_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242988));
pub const ERROR_GRAPHICS_WRONG_ALLOCATION_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242987));
pub const ERROR_GRAPHICS_ALLOCATION_CONTENT_LOST = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242986));
pub const ERROR_GRAPHICS_GPU_EXCEPTION_ON_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242752));
pub const ERROR_GRAPHICS_SKIP_ALLOCATION_PREPARATION = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076240897));
pub const ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242496));
pub const ERROR_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242495));
pub const ERROR_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242494));
pub const ERROR_GRAPHICS_INVALID_VIDPN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242493));
pub const ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242492));
pub const ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242491));
pub const ERROR_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242490));
pub const ERROR_GRAPHICS_MODE_NOT_PINNED = @import("zig.zig").typedConst(HRESULT, @as(i32, 2499335));
pub const ERROR_GRAPHICS_INVALID_VIDPN_SOURCEMODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242488));
pub const ERROR_GRAPHICS_INVALID_VIDPN_TARGETMODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242487));
pub const ERROR_GRAPHICS_INVALID_FREQUENCY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242486));
pub const ERROR_GRAPHICS_INVALID_ACTIVE_REGION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242485));
pub const ERROR_GRAPHICS_INVALID_TOTAL_REGION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242484));
pub const ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242480));
pub const ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242479));
pub const ERROR_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242478));
pub const ERROR_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242477));
pub const ERROR_GRAPHICS_MODE_ALREADY_IN_MODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242476));
pub const ERROR_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242475));
pub const ERROR_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242474));
pub const ERROR_GRAPHICS_SOURCE_ALREADY_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242473));
pub const ERROR_GRAPHICS_TARGET_ALREADY_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242472));
pub const ERROR_GRAPHICS_INVALID_VIDPN_PRESENT_PATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242471));
pub const ERROR_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242470));
pub const ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242469));
pub const ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242468));
pub const ERROR_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242467));
pub const ERROR_GRAPHICS_NO_PREFERRED_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, 2499358));
pub const ERROR_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242465));
pub const ERROR_GRAPHICS_STALE_MODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242464));
pub const ERROR_GRAPHICS_INVALID_MONITOR_SOURCEMODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242463));
pub const ERROR_GRAPHICS_INVALID_MONITOR_SOURCE_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242462));
pub const ERROR_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242461));
pub const ERROR_GRAPHICS_MODE_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242460));
pub const ERROR_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242459));
pub const ERROR_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242458));
pub const ERROR_GRAPHICS_PATH_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242457));
pub const ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242456));
pub const ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242455));
pub const ERROR_GRAPHICS_INVALID_MONITORDESCRIPTORSET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242454));
pub const ERROR_GRAPHICS_INVALID_MONITORDESCRIPTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242453));
pub const ERROR_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242452));
pub const ERROR_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242451));
pub const ERROR_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242450));
pub const ERROR_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242449));
pub const ERROR_GRAPHICS_RESOURCES_NOT_RELATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242448));
pub const ERROR_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242447));
pub const ERROR_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242446));
pub const ERROR_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242445));
pub const ERROR_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242444));
pub const ERROR_GRAPHICS_NO_VIDPNMGR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242443));
pub const ERROR_GRAPHICS_NO_ACTIVE_VIDPN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242442));
pub const ERROR_GRAPHICS_STALE_VIDPN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242441));
pub const ERROR_GRAPHICS_MONITOR_NOT_CONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242440));
pub const ERROR_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242439));
pub const ERROR_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242438));
pub const ERROR_GRAPHICS_INVALID_VISIBLEREGION_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242437));
pub const ERROR_GRAPHICS_INVALID_STRIDE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242436));
pub const ERROR_GRAPHICS_INVALID_PIXELFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242435));
pub const ERROR_GRAPHICS_INVALID_COLORBASIS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242434));
pub const ERROR_GRAPHICS_INVALID_PIXELVALUEACCESSMODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242433));
pub const ERROR_GRAPHICS_TARGET_NOT_IN_TOPOLOGY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242432));
pub const ERROR_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242431));
pub const ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242430));
pub const ERROR_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242429));
pub const ERROR_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242428));
pub const ERROR_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242427));
pub const ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242426));
pub const ERROR_GRAPHICS_INVALID_GAMMA_RAMP = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242425));
pub const ERROR_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242424));
pub const ERROR_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242423));
pub const ERROR_GRAPHICS_MODE_NOT_IN_MODESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242422));
pub const ERROR_GRAPHICS_DATASET_IS_EMPTY = @import("zig.zig").typedConst(HRESULT, @as(i32, 2499403));
pub const ERROR_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET = @import("zig.zig").typedConst(HRESULT, @as(i32, 2499404));
pub const ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242419));
pub const ERROR_GRAPHICS_INVALID_PATH_CONTENT_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242418));
pub const ERROR_GRAPHICS_INVALID_COPYPROTECTION_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242417));
pub const ERROR_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242416));
pub const ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED = @import("zig.zig").typedConst(HRESULT, @as(i32, 2499409));
pub const ERROR_GRAPHICS_INVALID_SCANLINE_ORDERING = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242414));
pub const ERROR_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242413));
pub const ERROR_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242412));
pub const ERROR_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242411));
pub const ERROR_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242410));
pub const ERROR_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242409));
pub const ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242408));
pub const ERROR_GRAPHICS_MAX_NUM_PATHS_REACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242407));
pub const ERROR_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242406));
pub const ERROR_GRAPHICS_INVALID_CLIENT_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242405));
pub const ERROR_GRAPHICS_CLIENTVIDPN_NOT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242404));
pub const ERROR_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242240));
pub const ERROR_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242239));
pub const ERROR_GRAPHICS_UNKNOWN_CHILD_STATUS = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076241455));
pub const ERROR_GRAPHICS_NOT_A_LINKED_ADAPTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242192));
pub const ERROR_GRAPHICS_LEADLINK_NOT_ENUMERATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242191));
pub const ERROR_GRAPHICS_CHAINLINKS_NOT_ENUMERATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242190));
pub const ERROR_GRAPHICS_ADAPTER_CHAIN_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242189));
pub const ERROR_GRAPHICS_CHAINLINKS_NOT_STARTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242188));
pub const ERROR_GRAPHICS_CHAINLINKS_NOT_POWERED_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242187));
pub const ERROR_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242186));
pub const ERROR_GRAPHICS_LEADLINK_START_DEFERRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076241463));
pub const ERROR_GRAPHICS_NOT_POST_DEVICE_DRIVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242184));
pub const ERROR_GRAPHICS_POLLING_TOO_FREQUENTLY = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076241465));
pub const ERROR_GRAPHICS_START_DEFERRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076241466));
pub const ERROR_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071242181));
pub const ERROR_GRAPHICS_DEPENDABLE_CHILD_STATUS = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076241468));
pub const ERROR_GRAPHICS_OPM_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241984));
pub const ERROR_GRAPHICS_COPP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241983));
pub const ERROR_GRAPHICS_UAB_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241982));
pub const ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241981));
pub const ERROR_GRAPHICS_OPM_NO_VIDEO_OUTPUTS_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241979));
pub const ERROR_GRAPHICS_OPM_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241973));
pub const ERROR_GRAPHICS_OPM_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241972));
pub const ERROR_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241970));
pub const ERROR_GRAPHICS_OPM_SPANNING_MODE_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241969));
pub const ERROR_GRAPHICS_OPM_THEATER_MODE_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241968));
pub const ERROR_GRAPHICS_PVP_HFS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241967));
pub const ERROR_GRAPHICS_OPM_INVALID_SRM = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241966));
pub const ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241965));
pub const ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241964));
pub const ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241963));
pub const ERROR_GRAPHICS_OPM_HDCP_SRM_NEVER_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241962));
pub const ERROR_GRAPHICS_OPM_RESOLUTION_TOO_HIGH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241961));
pub const ERROR_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241960));
pub const ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_NO_LONGER_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241958));
pub const ERROR_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241957));
pub const ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241956));
pub const ERROR_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241955));
pub const ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241954));
pub const ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241953));
pub const ERROR_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241952));
pub const ERROR_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241951));
pub const ERROR_GRAPHICS_I2C_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241856));
pub const ERROR_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241855));
pub const ERROR_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241854));
pub const ERROR_GRAPHICS_I2C_ERROR_RECEIVING_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241853));
pub const ERROR_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241852));
pub const ERROR_GRAPHICS_DDCCI_INVALID_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241851));
pub const ERROR_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241850));
pub const ERROR_GRAPHICS_MCA_INVALID_CAPABILITIES_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241849));
pub const ERROR_GRAPHICS_MCA_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241848));
pub const ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241847));
pub const ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241846));
pub const ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241845));
pub const ERROR_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241844));
pub const ERROR_GRAPHICS_MONITOR_NO_LONGER_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241843));
pub const ERROR_GRAPHICS_DDCCI_CURRENT_CURRENT_VALUE_GREATER_THAN_MAXIMUM_VALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241768));
pub const ERROR_GRAPHICS_MCA_INVALID_VCP_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241767));
pub const ERROR_GRAPHICS_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241766));
pub const ERROR_GRAPHICS_MCA_MCCS_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241765));
pub const ERROR_GRAPHICS_MCA_UNSUPPORTED_MCCS_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241764));
pub const ERROR_GRAPHICS_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241762));
pub const ERROR_GRAPHICS_MCA_UNSUPPORTED_COLOR_TEMPERATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241761));
pub const ERROR_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241760));
pub const ERROR_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241759));
pub const ERROR_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241758));
pub const ERROR_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241757));
pub const ERROR_GRAPHICS_INVALID_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241756));
pub const ERROR_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241755));
pub const ERROR_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241754));
pub const ERROR_GRAPHICS_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071241753));
pub const ERROR_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -1071249944));
pub const NAP_E_INVALID_PACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927743));
pub const NAP_E_MISSING_SOH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927742));
pub const NAP_E_CONFLICTING_ID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927741));
pub const NAP_E_NO_CACHED_SOH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927740));
pub const NAP_E_STILL_BOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927739));
pub const NAP_E_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927738));
pub const NAP_E_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927737));
pub const NAP_E_MISMATCHED_ID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927736));
pub const NAP_E_NOT_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927735));
pub const NAP_E_ID_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927734));
pub const NAP_E_MAXSIZE_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927733));
pub const NAP_E_SERVICE_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927732));
pub const NAP_S_CERT_ALREADY_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, 2555917));
pub const NAP_E_ENTITY_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927730));
pub const NAP_E_NETSH_GROUPPOLICY_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927729));
pub const NAP_E_TOO_MANY_CALLS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927728));
pub const NAP_E_SHV_CONFIG_EXISTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927727));
pub const NAP_E_SHV_CONFIG_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927726));
pub const NAP_E_SHV_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927725));
pub const TPM_E_ERROR_MASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862208));
pub const TPM_E_AUTHFAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862207));
pub const TPM_E_BADINDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862206));
pub const TPM_E_BAD_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862205));
pub const TPM_E_AUDITFAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862204));
pub const TPM_E_CLEAR_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862203));
pub const TPM_E_DEACTIVATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862202));
pub const TPM_E_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862201));
pub const TPM_E_DISABLED_CMD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862200));
pub const TPM_E_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862199));
pub const TPM_E_BAD_ORDINAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862198));
pub const TPM_E_INSTALL_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862197));
pub const TPM_E_INVALID_KEYHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862196));
pub const TPM_E_KEYNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862195));
pub const TPM_E_INAPPROPRIATE_ENC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862194));
pub const TPM_E_MIGRATEFAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862193));
pub const TPM_E_INVALID_PCR_INFO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862192));
pub const TPM_E_NOSPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862191));
pub const TPM_E_NOSRK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862190));
pub const TPM_E_NOTSEALED_BLOB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862189));
pub const TPM_E_OWNER_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862188));
pub const TPM_E_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862187));
pub const TPM_E_SHORTRANDOM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862186));
pub const TPM_E_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862185));
pub const TPM_E_WRONGPCRVAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862184));
pub const TPM_E_BAD_PARAM_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862183));
pub const TPM_E_SHA_THREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862182));
pub const TPM_E_SHA_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862181));
pub const TPM_E_FAILEDSELFTEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862180));
pub const TPM_E_AUTH2FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862179));
pub const TPM_E_BADTAG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862178));
pub const TPM_E_IOERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862177));
pub const TPM_E_ENCRYPT_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862176));
pub const TPM_E_DECRYPT_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862175));
pub const TPM_E_INVALID_AUTHHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862174));
pub const TPM_E_NO_ENDORSEMENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862173));
pub const TPM_E_INVALID_KEYUSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862172));
pub const TPM_E_WRONG_ENTITYTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862171));
pub const TPM_E_INVALID_POSTINIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862170));
pub const TPM_E_INAPPROPRIATE_SIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862169));
pub const TPM_E_BAD_KEY_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862168));
pub const TPM_E_BAD_MIGRATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862167));
pub const TPM_E_BAD_SCHEME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862166));
pub const TPM_E_BAD_DATASIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862165));
pub const TPM_E_BAD_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862164));
pub const TPM_E_BAD_PRESENCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862163));
pub const TPM_E_BAD_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862162));
pub const TPM_E_NO_WRAP_TRANSPORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862161));
pub const TPM_E_AUDITFAIL_UNSUCCESSFUL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862160));
pub const TPM_E_AUDITFAIL_SUCCESSFUL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862159));
pub const TPM_E_NOTRESETABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862158));
pub const TPM_E_NOTLOCAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862157));
pub const TPM_E_BAD_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862156));
pub const TPM_E_INVALID_RESOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862155));
pub const TPM_E_NOTFIPS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862154));
pub const TPM_E_INVALID_FAMILY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862153));
pub const TPM_E_NO_NV_PERMISSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862152));
pub const TPM_E_REQUIRES_SIGN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862151));
pub const TPM_E_KEY_NOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862150));
pub const TPM_E_AUTH_CONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862149));
pub const TPM_E_AREA_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862148));
pub const TPM_E_BAD_LOCALITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862147));
pub const TPM_E_READ_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862146));
pub const TPM_E_PER_NOWRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862145));
pub const TPM_E_FAMILYCOUNT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862144));
pub const TPM_E_WRITE_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862143));
pub const TPM_E_BAD_ATTRIBUTES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862142));
pub const TPM_E_INVALID_STRUCTURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862141));
pub const TPM_E_KEY_OWNER_CONTROL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862140));
pub const TPM_E_BAD_COUNTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862139));
pub const TPM_E_NOT_FULLWRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862138));
pub const TPM_E_CONTEXT_GAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862137));
pub const TPM_E_MAXNVWRITES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862136));
pub const TPM_E_NOOPERATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862135));
pub const TPM_E_RESOURCEMISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862134));
pub const TPM_E_DELEGATE_LOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862133));
pub const TPM_E_DELEGATE_FAMILY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862132));
pub const TPM_E_DELEGATE_ADMIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862131));
pub const TPM_E_TRANSPORT_NOTEXCLUSIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862130));
pub const TPM_E_OWNER_CONTROL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862129));
pub const TPM_E_DAA_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862128));
pub const TPM_E_DAA_INPUT_DATA0 = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862127));
pub const TPM_E_DAA_INPUT_DATA1 = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862126));
pub const TPM_E_DAA_ISSUER_SETTINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862125));
pub const TPM_E_DAA_TPM_SETTINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862124));
pub const TPM_E_DAA_STAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862123));
pub const TPM_E_DAA_ISSUER_VALIDITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862122));
pub const TPM_E_DAA_WRONG_W = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862121));
pub const TPM_E_BAD_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862120));
pub const TPM_E_BAD_DELEGATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862119));
pub const TPM_E_BADCONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862118));
pub const TPM_E_TOOMANYCONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862117));
pub const TPM_E_MA_TICKET_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862116));
pub const TPM_E_MA_DESTINATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862115));
pub const TPM_E_MA_SOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862114));
pub const TPM_E_MA_AUTHORITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862113));
pub const TPM_E_PERMANENTEK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862111));
pub const TPM_E_BAD_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862110));
pub const TPM_E_NOCONTEXTSPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862109));
pub const TPM_20_E_ASYMMETRIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862079));
pub const TPM_20_E_ATTRIBUTES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862078));
pub const TPM_20_E_HASH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862077));
pub const TPM_20_E_VALUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862076));
pub const TPM_20_E_HIERARCHY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862075));
pub const TPM_20_E_KEY_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862073));
pub const TPM_20_E_MGF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862072));
pub const TPM_20_E_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862071));
pub const TPM_20_E_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862070));
pub const TPM_20_E_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862069));
pub const TPM_20_E_KDF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862068));
pub const TPM_20_E_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862067));
pub const TPM_20_E_AUTH_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862066));
pub const TPM_20_E_NONCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862065));
pub const TPM_20_E_PP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862064));
pub const TPM_20_E_SCHEME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862062));
pub const TPM_20_E_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862059));
pub const TPM_20_E_SYMMETRIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862058));
pub const TPM_20_E_TAG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862057));
pub const TPM_20_E_SELECTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862056));
pub const TPM_20_E_INSUFFICIENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862054));
pub const TPM_20_E_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862053));
pub const TPM_20_E_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862052));
pub const TPM_20_E_POLICY_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862051));
pub const TPM_20_E_INTEGRITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862049));
pub const TPM_20_E_TICKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862048));
pub const TPM_20_E_RESERVED_BITS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862047));
pub const TPM_20_E_BAD_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862046));
pub const TPM_20_E_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862045));
pub const TPM_20_E_POLICY_CC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862044));
pub const TPM_20_E_BINDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862043));
pub const TPM_20_E_CURVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862042));
pub const TPM_20_E_ECC_POINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144862041));
pub const TPM_20_E_INITIALIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861952));
pub const TPM_20_E_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861951));
pub const TPM_20_E_SEQUENCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861949));
pub const TPM_20_E_PRIVATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861941));
pub const TPM_20_E_HMAC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861927));
pub const TPM_20_E_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861920));
pub const TPM_20_E_EXCLUSIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861919));
pub const TPM_20_E_ECC_CURVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861917));
pub const TPM_20_E_AUTH_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861916));
pub const TPM_20_E_AUTH_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861915));
pub const TPM_20_E_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861914));
pub const TPM_20_E_PCR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861913));
pub const TPM_20_E_PCR_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861912));
pub const TPM_20_E_UPGRADE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861907));
pub const TPM_20_E_TOO_MANY_CONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861906));
pub const TPM_20_E_AUTH_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861905));
pub const TPM_20_E_REBOOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861904));
pub const TPM_20_E_UNBALANCED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861903));
pub const TPM_20_E_COMMAND_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861886));
pub const TPM_20_E_COMMAND_CODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861885));
pub const TPM_20_E_AUTHSIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861884));
pub const TPM_20_E_AUTH_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861883));
pub const TPM_20_E_NV_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861882));
pub const TPM_20_E_NV_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861881));
pub const TPM_20_E_NV_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861880));
pub const TPM_20_E_NV_AUTHORIZATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861879));
pub const TPM_20_E_NV_UNINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861878));
pub const TPM_20_E_NV_SPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861877));
pub const TPM_20_E_NV_DEFINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861876));
pub const TPM_20_E_BAD_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861872));
pub const TPM_20_E_CPHASH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861871));
pub const TPM_20_E_PARENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861870));
pub const TPM_20_E_NEEDS_TEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861869));
pub const TPM_20_E_NO_RESULT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861868));
pub const TPM_20_E_SENSITIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861867));
pub const TPM_E_COMMAND_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861184));
pub const TPM_E_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861183));
pub const TPM_E_DUPLICATE_VHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861182));
pub const TPM_E_EMBEDDED_COMMAND_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861181));
pub const TPM_E_EMBEDDED_COMMAND_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144861180));
pub const TPM_E_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144860160));
pub const TPM_E_NEEDS_SELFTEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144860159));
pub const TPM_E_DOING_SELFTEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144860158));
pub const TPM_E_DEFEND_LOCK_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144860157));
pub const TPM_20_E_CONTEXT_GAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859903));
pub const TPM_20_E_OBJECT_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859902));
pub const TPM_20_E_SESSION_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859901));
pub const TPM_20_E_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859900));
pub const TPM_20_E_SESSION_HANDLES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859899));
pub const TPM_20_E_OBJECT_HANDLES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859898));
pub const TPM_20_E_LOCALITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859897));
pub const TPM_20_E_YIELDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859896));
pub const TPM_20_E_CANCELED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859895));
pub const TPM_20_E_TESTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859894));
pub const TPM_20_E_NV_RATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859872));
pub const TPM_20_E_LOCKOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859871));
pub const TPM_20_E_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859870));
pub const TPM_20_E_NV_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144859869));
pub const TBS_E_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845823));
pub const TBS_E_BAD_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845822));
pub const TBS_E_INVALID_OUTPUT_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845821));
pub const TBS_E_INVALID_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845820));
pub const TBS_E_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845819));
pub const TBS_E_IOERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845818));
pub const TBS_E_INVALID_CONTEXT_PARAM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845817));
pub const TBS_E_SERVICE_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845816));
pub const TBS_E_TOO_MANY_TBS_CONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845815));
pub const TBS_E_TOO_MANY_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845814));
pub const TBS_E_SERVICE_START_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845813));
pub const TBS_E_PPI_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845812));
pub const TBS_E_COMMAND_CANCELED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845811));
pub const TBS_E_BUFFER_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845810));
pub const TBS_E_TPM_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845809));
pub const TBS_E_SERVICE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845808));
pub const TBS_E_NO_EVENT_LOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845807));
pub const TBS_E_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845806));
pub const TBS_E_PROVISIONING_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845805));
pub const TBS_E_PPI_FUNCTION_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845804));
pub const TBS_E_OWNERAUTH_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845803));
pub const TBS_E_PROVISIONING_INCOMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144845802));
pub const TPMAPI_E_INVALID_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796416));
pub const TPMAPI_E_NOT_ENOUGH_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796415));
pub const TPMAPI_E_TOO_MUCH_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796414));
pub const TPMAPI_E_INVALID_OUTPUT_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796413));
pub const TPMAPI_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796412));
pub const TPMAPI_E_OUT_OF_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796411));
pub const TPMAPI_E_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796410));
pub const TPMAPI_E_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796409));
pub const TPMAPI_E_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796408));
pub const TPMAPI_E_AUTHORIZATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796407));
pub const TPMAPI_E_INVALID_CONTEXT_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796406));
pub const TPMAPI_E_TBS_COMMUNICATION_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796405));
pub const TPMAPI_E_TPM_COMMAND_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796404));
pub const TPMAPI_E_MESSAGE_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796403));
pub const TPMAPI_E_INVALID_ENCODING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796402));
pub const TPMAPI_E_INVALID_KEY_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796401));
pub const TPMAPI_E_ENCRYPTION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796400));
pub const TPMAPI_E_INVALID_KEY_PARAMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796399));
pub const TPMAPI_E_INVALID_MIGRATION_AUTHORIZATION_BLOB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796398));
pub const TPMAPI_E_INVALID_PCR_INDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796397));
pub const TPMAPI_E_INVALID_DELEGATE_BLOB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796396));
pub const TPMAPI_E_INVALID_CONTEXT_PARAMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796395));
pub const TPMAPI_E_INVALID_KEY_BLOB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796394));
pub const TPMAPI_E_INVALID_PCR_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796393));
pub const TPMAPI_E_INVALID_OWNER_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796392));
pub const TPMAPI_E_FIPS_RNG_CHECK_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796391));
pub const TPMAPI_E_EMPTY_TCG_LOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796390));
pub const TPMAPI_E_INVALID_TCG_LOG_ENTRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796389));
pub const TPMAPI_E_TCG_SEPARATOR_ABSENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796388));
pub const TPMAPI_E_TCG_INVALID_DIGEST_ENTRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796387));
pub const TPMAPI_E_POLICY_DENIES_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796386));
pub const TPMAPI_E_NV_BITS_NOT_DEFINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796385));
pub const TPMAPI_E_NV_BITS_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796384));
pub const TPMAPI_E_SEALING_KEY_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796383));
pub const TPMAPI_E_NO_AUTHORIZATION_CHAIN_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796382));
pub const TPMAPI_E_SVN_COUNTER_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796381));
pub const TPMAPI_E_OWNER_AUTH_NOT_NULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796380));
pub const TPMAPI_E_ENDORSEMENT_AUTH_NOT_NULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796379));
pub const TPMAPI_E_AUTHORIZATION_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796378));
pub const TPMAPI_E_MALFORMED_AUTHORIZATION_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796377));
pub const TPMAPI_E_AUTHORIZING_KEY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796376));
pub const TPMAPI_E_INVALID_AUTHORIZATION_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796375));
pub const TPMAPI_E_MALFORMED_AUTHORIZATION_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796374));
pub const TPMAPI_E_MALFORMED_AUTHORIZATION_OTHER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796373));
pub const TPMAPI_E_SEALING_KEY_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796372));
pub const TPMAPI_E_INVALID_TPM_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796371));
pub const TPMAPI_E_INVALID_POLICYAUTH_BLOB_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796370));
pub const TBSIMP_E_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796160));
pub const TBSIMP_E_CLEANUP_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796159));
pub const TBSIMP_E_INVALID_CONTEXT_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796158));
pub const TBSIMP_E_INVALID_CONTEXT_PARAM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796157));
pub const TBSIMP_E_TPM_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796156));
pub const TBSIMP_E_HASH_BAD_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796155));
pub const TBSIMP_E_DUPLICATE_VHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796154));
pub const TBSIMP_E_INVALID_OUTPUT_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796153));
pub const TBSIMP_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796152));
pub const TBSIMP_E_RPC_INIT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796151));
pub const TBSIMP_E_SCHEDULER_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796150));
pub const TBSIMP_E_COMMAND_CANCELED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796149));
pub const TBSIMP_E_OUT_OF_MEMORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796148));
pub const TBSIMP_E_LIST_NO_MORE_ITEMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796147));
pub const TBSIMP_E_LIST_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796146));
pub const TBSIMP_E_NOT_ENOUGH_SPACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796145));
pub const TBSIMP_E_NOT_ENOUGH_TPM_CONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796144));
pub const TBSIMP_E_COMMAND_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796143));
pub const TBSIMP_E_UNKNOWN_ORDINAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796142));
pub const TBSIMP_E_RESOURCE_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796141));
pub const TBSIMP_E_INVALID_RESOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796140));
pub const TBSIMP_E_NOTHING_TO_UNLOAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796139));
pub const TBSIMP_E_HASH_TABLE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796138));
pub const TBSIMP_E_TOO_MANY_TBS_CONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796137));
pub const TBSIMP_E_TOO_MANY_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796136));
pub const TBSIMP_E_PPI_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796135));
pub const TBSIMP_E_TPM_INCOMPATIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796134));
pub const TBSIMP_E_NO_EVENT_LOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144796133));
pub const TPM_E_PPI_ACPI_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795904));
pub const TPM_E_PPI_USER_ABORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795903));
pub const TPM_E_PPI_BIOS_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795902));
pub const TPM_E_PPI_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795901));
pub const TPM_E_PPI_BLOCKED_IN_BIOS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795900));
pub const TPM_E_PCP_ERROR_MASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795648));
pub const TPM_E_PCP_DEVICE_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795647));
pub const TPM_E_PCP_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795646));
pub const TPM_E_PCP_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795645));
pub const TPM_E_PCP_FLAG_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795644));
pub const TPM_E_PCP_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795643));
pub const TPM_E_PCP_BUFFER_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795642));
pub const TPM_E_PCP_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795641));
pub const TPM_E_PCP_AUTHENTICATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795640));
pub const TPM_E_PCP_AUTHENTICATION_IGNORED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795639));
pub const TPM_E_PCP_POLICY_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795638));
pub const TPM_E_PCP_PROFILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795637));
pub const TPM_E_PCP_VALIDATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795636));
pub const TPM_E_PCP_WRONG_PARENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795634));
pub const TPM_E_KEY_NOT_LOADED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795633));
pub const TPM_E_NO_KEY_CERTIFICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795632));
pub const TPM_E_KEY_NOT_FINALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795631));
pub const TPM_E_ATTESTATION_CHALLENGE_NOT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795630));
pub const TPM_E_NOT_PCR_BOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795629));
pub const TPM_E_KEY_ALREADY_FINALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795628));
pub const TPM_E_KEY_USAGE_POLICY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795627));
pub const TPM_E_KEY_USAGE_POLICY_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795626));
pub const TPM_E_SOFT_KEY_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795625));
pub const TPM_E_KEY_NOT_AUTHENTICATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795624));
pub const TPM_E_PCP_KEY_NOT_AIK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795623));
pub const TPM_E_KEY_NOT_SIGNING_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795622));
pub const TPM_E_LOCKED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795621));
pub const TPM_E_CLAIM_TYPE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795620));
pub const TPM_E_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795619));
pub const TPM_E_BUFFER_LENGTH_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795618));
pub const TPM_E_PCP_IFX_RSA_KEY_CREATION_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795617));
pub const TPM_E_PCP_TICKET_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795616));
pub const TPM_E_PCP_RAW_POLICY_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795615));
pub const TPM_E_PCP_KEY_HANDLE_INVALIDATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795614));
pub const TPM_E_PCP_UNSUPPORTED_PSS_SALT = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076429859));
pub const TPM_E_PCP_PLATFORM_CLAIM_MAY_BE_OUTDATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076429860));
pub const TPM_E_PCP_PLATFORM_CLAIM_OUTDATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076429861));
pub const TPM_E_PCP_PLATFORM_CLAIM_REBOOT = @import("zig.zig").typedConst(HRESULT, @as(i32, 1076429862));
pub const TPM_E_ZERO_EXHAUST_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795392));
pub const TPM_E_PROVISIONING_INCOMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795136));
pub const TPM_E_INVALID_OWNER_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795135));
pub const TPM_E_TOO_MUCH_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144795134));
pub const PLA_E_DCS_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337918));
pub const PLA_E_DCS_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337750));
pub const PLA_E_TOO_MANY_FOLDERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337851));
pub const PLA_E_NO_MIN_DISK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337808));
pub const PLA_E_DCS_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337737));
pub const PLA_S_PROPERTY_IGNORED = @import("zig.zig").typedConst(HRESULT, @as(i32, 3145984));
pub const PLA_E_PROPERTY_CONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337663));
pub const PLA_E_DCS_SINGLETON_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337662));
pub const PLA_E_CREDENTIALS_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337661));
pub const PLA_E_DCS_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337660));
pub const PLA_E_CONFLICT_INCL_EXCL_API = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337659));
pub const PLA_E_NETWORK_EXE_NOT_VALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337658));
pub const PLA_E_EXE_ALREADY_CONFIGURED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337657));
pub const PLA_E_EXE_PATH_NOT_VALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337656));
pub const PLA_E_DC_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337655));
pub const PLA_E_DCS_START_WAIT_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337654));
pub const PLA_E_DC_START_WAIT_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337653));
pub const PLA_E_REPORT_WAIT_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337652));
pub const PLA_E_NO_DUPLICATES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337651));
pub const PLA_E_EXE_FULL_PATH_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337650));
pub const PLA_E_INVALID_SESSION_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337649));
pub const PLA_E_PLA_CHANNEL_NOT_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337648));
pub const PLA_E_TASKSCHED_CHANNEL_NOT_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337647));
pub const PLA_E_RULES_MANAGER_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337646));
pub const PLA_E_CABAPI_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144337645));
pub const FVE_E_LOCKED_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272384));
pub const FVE_E_NOT_ENCRYPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272383));
pub const FVE_E_NO_TPM_BIOS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272382));
pub const FVE_E_NO_MBR_METRIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272381));
pub const FVE_E_NO_BOOTSECTOR_METRIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272380));
pub const FVE_E_NO_BOOTMGR_METRIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272379));
pub const FVE_E_WRONG_BOOTMGR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272378));
pub const FVE_E_SECURE_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272377));
pub const FVE_E_NOT_ACTIVATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272376));
pub const FVE_E_ACTION_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272375));
pub const FVE_E_AD_SCHEMA_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272374));
pub const FVE_E_AD_INVALID_DATATYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272373));
pub const FVE_E_AD_INVALID_DATASIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272372));
pub const FVE_E_AD_NO_VALUES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272371));
pub const FVE_E_AD_ATTR_NOT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272370));
pub const FVE_E_AD_GUID_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272369));
pub const FVE_E_BAD_INFORMATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272368));
pub const FVE_E_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272367));
pub const FVE_E_SYSTEM_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272366));
pub const FVE_E_FAILED_WRONG_FS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272365));
pub const FVE_E_BAD_PARTITION_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272364));
pub const FVE_E_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272363));
pub const FVE_E_BAD_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272362));
pub const FVE_E_VOLUME_NOT_BOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272361));
pub const FVE_E_TPM_NOT_OWNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272360));
pub const FVE_E_NOT_DATA_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272359));
pub const FVE_E_AD_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272358));
pub const FVE_E_CONV_READ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272357));
pub const FVE_E_CONV_WRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272356));
pub const FVE_E_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272355));
pub const FVE_E_CLUSTERING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272354));
pub const FVE_E_VOLUME_BOUND_ALREADY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272353));
pub const FVE_E_OS_NOT_PROTECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272352));
pub const FVE_E_PROTECTION_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272351));
pub const FVE_E_RECOVERY_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272350));
pub const FVE_E_FOREIGN_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272349));
pub const FVE_E_OVERLAPPED_UPDATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272348));
pub const FVE_E_TPM_SRK_AUTH_NOT_ZERO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272347));
pub const FVE_E_FAILED_SECTOR_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272346));
pub const FVE_E_FAILED_AUTHENTICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272345));
pub const FVE_E_NOT_OS_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272344));
pub const FVE_E_AUTOUNLOCK_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272343));
pub const FVE_E_WRONG_BOOTSECTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272342));
pub const FVE_E_WRONG_SYSTEM_FS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272341));
pub const FVE_E_POLICY_PASSWORD_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272340));
pub const FVE_E_CANNOT_SET_FVEK_ENCRYPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272339));
pub const FVE_E_CANNOT_ENCRYPT_NO_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272338));
pub const FVE_E_BOOTABLE_CDDVD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272336));
pub const FVE_E_PROTECTOR_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272335));
pub const FVE_E_RELATIVE_PATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272334));
pub const FVE_E_PROTECTOR_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272333));
pub const FVE_E_INVALID_KEY_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272332));
pub const FVE_E_INVALID_PASSWORD_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272331));
pub const FVE_E_FIPS_RNG_CHECK_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272330));
pub const FVE_E_FIPS_PREVENTS_RECOVERY_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272329));
pub const FVE_E_FIPS_PREVENTS_EXTERNAL_KEY_EXPORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272328));
pub const FVE_E_NOT_DECRYPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272327));
pub const FVE_E_INVALID_PROTECTOR_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272326));
pub const FVE_E_NO_PROTECTORS_TO_TEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272325));
pub const FVE_E_KEYFILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272324));
pub const FVE_E_KEYFILE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272323));
pub const FVE_E_KEYFILE_NO_VMK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272322));
pub const FVE_E_TPM_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272321));
pub const FVE_E_NOT_ALLOWED_IN_SAFE_MODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272320));
pub const FVE_E_TPM_INVALID_PCR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272319));
pub const FVE_E_TPM_NO_VMK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272318));
pub const FVE_E_PIN_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272317));
pub const FVE_E_AUTH_INVALID_APPLICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272316));
pub const FVE_E_AUTH_INVALID_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272315));
pub const FVE_E_FIPS_DISABLE_PROTECTION_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272314));
pub const FVE_E_FS_NOT_EXTENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272313));
pub const FVE_E_FIRMWARE_TYPE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272312));
pub const FVE_E_NO_LICENSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272311));
pub const FVE_E_NOT_ON_STACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272310));
pub const FVE_E_FS_MOUNTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272309));
pub const FVE_E_TOKEN_NOT_IMPERSONATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272308));
pub const FVE_E_DRY_RUN_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272307));
pub const FVE_E_REBOOT_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272306));
pub const FVE_E_DEBUGGER_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272305));
pub const FVE_E_RAW_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272304));
pub const FVE_E_RAW_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272303));
pub const FVE_E_BCD_APPLICATIONS_PATH_INCORRECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272302));
pub const FVE_E_NOT_ALLOWED_IN_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272301));
pub const FVE_E_NO_AUTOUNLOCK_MASTER_KEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272300));
pub const FVE_E_MOR_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272299));
pub const FVE_E_HIDDEN_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272298));
pub const FVE_E_TRANSIENT_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272297));
pub const FVE_E_PUBKEY_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272296));
pub const FVE_E_VOLUME_HANDLE_OPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272295));
pub const FVE_E_NO_FEATURE_LICENSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272294));
pub const FVE_E_INVALID_STARTUP_OPTIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272293));
pub const FVE_E_POLICY_RECOVERY_PASSWORD_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272292));
pub const FVE_E_POLICY_RECOVERY_PASSWORD_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272291));
pub const FVE_E_POLICY_RECOVERY_KEY_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272290));
pub const FVE_E_POLICY_RECOVERY_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272289));
pub const FVE_E_POLICY_STARTUP_PIN_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272288));
pub const FVE_E_POLICY_STARTUP_PIN_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272287));
pub const FVE_E_POLICY_STARTUP_KEY_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272286));
pub const FVE_E_POLICY_STARTUP_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272285));
pub const FVE_E_POLICY_STARTUP_PIN_KEY_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272284));
pub const FVE_E_POLICY_STARTUP_PIN_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272283));
pub const FVE_E_POLICY_STARTUP_TPM_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272282));
pub const FVE_E_POLICY_STARTUP_TPM_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272281));
pub const FVE_E_POLICY_INVALID_PIN_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272280));
pub const FVE_E_KEY_PROTECTOR_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272279));
pub const FVE_E_POLICY_PASSPHRASE_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272278));
pub const FVE_E_POLICY_PASSPHRASE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272277));
pub const FVE_E_FIPS_PREVENTS_PASSPHRASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272276));
pub const FVE_E_OS_VOLUME_PASSPHRASE_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272275));
pub const FVE_E_INVALID_BITLOCKER_OID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272274));
pub const FVE_E_VOLUME_TOO_SMALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272273));
pub const FVE_E_DV_NOT_SUPPORTED_ON_FS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272272));
pub const FVE_E_DV_NOT_ALLOWED_BY_GP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272271));
pub const FVE_E_POLICY_USER_CERTIFICATE_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272270));
pub const FVE_E_POLICY_USER_CERTIFICATE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272269));
pub const FVE_E_POLICY_USER_CERT_MUST_BE_HW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272268));
pub const FVE_E_POLICY_USER_CONFIGURE_FDV_AUTOUNLOCK_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272267));
pub const FVE_E_POLICY_USER_CONFIGURE_RDV_AUTOUNLOCK_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272266));
pub const FVE_E_POLICY_USER_CONFIGURE_RDV_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272265));
pub const FVE_E_POLICY_USER_ENABLE_RDV_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272264));
pub const FVE_E_POLICY_USER_DISABLE_RDV_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272263));
pub const FVE_E_POLICY_INVALID_PASSPHRASE_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272256));
pub const FVE_E_POLICY_PASSPHRASE_TOO_SIMPLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272255));
pub const FVE_E_RECOVERY_PARTITION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272254));
pub const FVE_E_POLICY_CONFLICT_FDV_RK_OFF_AUK_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272253));
pub const FVE_E_POLICY_CONFLICT_RDV_RK_OFF_AUK_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272252));
pub const FVE_E_NON_BITLOCKER_OID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272251));
pub const FVE_E_POLICY_PROHIBITS_SELFSIGNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272250));
pub const FVE_E_POLICY_CONFLICT_RO_AND_STARTUP_KEY_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272249));
pub const FVE_E_CONV_RECOVERY_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272248));
pub const FVE_E_VIRTUALIZED_SPACE_TOO_BIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272247));
pub const FVE_E_POLICY_CONFLICT_OSV_RP_OFF_ADB_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272240));
pub const FVE_E_POLICY_CONFLICT_FDV_RP_OFF_ADB_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272239));
pub const FVE_E_POLICY_CONFLICT_RDV_RP_OFF_ADB_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272238));
pub const FVE_E_NON_BITLOCKER_KU = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272237));
pub const FVE_E_PRIVATEKEY_AUTH_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272236));
pub const FVE_E_REMOVAL_OF_DRA_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272235));
pub const FVE_E_OPERATION_NOT_SUPPORTED_ON_VISTA_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272234));
pub const FVE_E_CANT_LOCK_AUTOUNLOCK_ENABLED_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272233));
pub const FVE_E_FIPS_HASH_KDF_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272232));
pub const FVE_E_ENH_PIN_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272231));
pub const FVE_E_INVALID_PIN_CHARS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272230));
pub const FVE_E_INVALID_DATUM_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272229));
pub const FVE_E_EFI_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272228));
pub const FVE_E_MULTIPLE_NKP_CERTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272227));
pub const FVE_E_REMOVAL_OF_NKP_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272226));
pub const FVE_E_INVALID_NKP_CERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272225));
pub const FVE_E_NO_EXISTING_PIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272224));
pub const FVE_E_PROTECTOR_CHANGE_PIN_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272223));
pub const FVE_E_PIN_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272222));
pub const FVE_E_PROTECTOR_CHANGE_MAX_PIN_CHANGE_ATTEMPTS_REACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272221));
pub const FVE_E_POLICY_PASSPHRASE_REQUIRES_ASCII = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272220));
pub const FVE_E_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272219));
pub const FVE_E_WIPE_NOT_ALLOWED_ON_TP_STORAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272218));
pub const FVE_E_KEY_LENGTH_NOT_SUPPORTED_BY_EDRIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272217));
pub const FVE_E_NO_EXISTING_PASSPHRASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272216));
pub const FVE_E_PROTECTOR_CHANGE_PASSPHRASE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272215));
pub const FVE_E_PASSPHRASE_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272214));
pub const FVE_E_NO_PASSPHRASE_WITH_TPM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272213));
pub const FVE_E_NO_TPM_WITH_PASSPHRASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272212));
pub const FVE_E_NOT_ALLOWED_ON_CSV_STACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272211));
pub const FVE_E_NOT_ALLOWED_ON_CLUSTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272210));
pub const FVE_E_EDRIVE_NO_FAILOVER_TO_SW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272209));
pub const FVE_E_EDRIVE_BAND_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272208));
pub const FVE_E_EDRIVE_DISALLOWED_BY_GP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272207));
pub const FVE_E_EDRIVE_INCOMPATIBLE_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272206));
pub const FVE_E_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272205));
pub const FVE_E_EDRIVE_DV_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272204));
pub const FVE_E_NO_PREBOOT_KEYBOARD_DETECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272203));
pub const FVE_E_NO_PREBOOT_KEYBOARD_OR_WINRE_DETECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272202));
pub const FVE_E_POLICY_REQUIRES_STARTUP_PIN_ON_TOUCH_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272201));
pub const FVE_E_POLICY_REQUIRES_RECOVERY_PASSWORD_ON_TOUCH_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272200));
pub const FVE_E_WIPE_CANCEL_NOT_APPLICABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272199));
pub const FVE_E_SECUREBOOT_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272198));
pub const FVE_E_SECUREBOOT_CONFIGURATION_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272197));
pub const FVE_E_EDRIVE_DRY_RUN_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272196));
pub const FVE_E_SHADOW_COPY_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272195));
pub const FVE_E_POLICY_INVALID_ENHANCED_BCD_SETTINGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272194));
pub const FVE_E_EDRIVE_INCOMPATIBLE_FIRMWARE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272193));
pub const FVE_E_PROTECTOR_CHANGE_MAX_PASSPHRASE_CHANGE_ATTEMPTS_REACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272192));
pub const FVE_E_PASSPHRASE_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272191));
pub const FVE_E_LIVEID_ACCOUNT_SUSPENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272190));
pub const FVE_E_LIVEID_ACCOUNT_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272189));
pub const FVE_E_NOT_PROVISIONED_ON_ALL_VOLUMES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272188));
pub const FVE_E_DE_FIXED_DATA_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272187));
pub const FVE_E_DE_HARDWARE_NOT_COMPLIANT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272186));
pub const FVE_E_DE_WINRE_NOT_CONFIGURED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272185));
pub const FVE_E_DE_PROTECTION_SUSPENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272184));
pub const FVE_E_DE_OS_VOLUME_NOT_PROTECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272183));
pub const FVE_E_DE_DEVICE_LOCKEDOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272182));
pub const FVE_E_DE_PROTECTION_NOT_YET_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272181));
pub const FVE_E_INVALID_PIN_CHARS_DETAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272180));
pub const FVE_E_DEVICE_LOCKOUT_COUNTER_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272179));
pub const FVE_E_DEVICELOCKOUT_COUNTER_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272178));
pub const FVE_E_BUFFER_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272177));
pub const FVE_E_NO_SUCH_CAPABILITY_ON_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272176));
pub const FVE_E_DE_PREVENTED_FOR_OS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272175));
pub const FVE_E_DE_VOLUME_OPTED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272174));
pub const FVE_E_DE_VOLUME_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272173));
pub const FVE_E_EOW_NOT_SUPPORTED_IN_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272172));
pub const FVE_E_ADBACKUP_NOT_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272171));
pub const FVE_E_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272170));
pub const FVE_E_NOT_DE_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272169));
pub const FVE_E_PROTECTION_CANNOT_BE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272168));
pub const FVE_E_OSV_KSR_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272167));
pub const FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_OS_DRIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272166));
pub const FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_FIXED_DRIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272165));
pub const FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_REMOVABLE_DRIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272164));
pub const FVE_E_KEY_ROTATION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272163));
pub const FVE_E_EXECUTE_REQUEST_SENT_TOO_SOON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272162));
pub const FVE_E_KEY_ROTATION_NOT_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272161));
pub const FVE_E_DEVICE_NOT_JOINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272160));
pub const FVE_E_AAD_ENDPOINT_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144272159));
pub const FWP_E_CALLOUT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206847));
pub const FWP_E_CONDITION_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206846));
pub const FWP_E_FILTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206845));
pub const FWP_E_LAYER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206844));
pub const FWP_E_PROVIDER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206843));
pub const FWP_E_PROVIDER_CONTEXT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206842));
pub const FWP_E_SUBLAYER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206841));
pub const FWP_E_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206840));
pub const FWP_E_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206839));
pub const FWP_E_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206838));
pub const FWP_E_DYNAMIC_SESSION_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206837));
pub const FWP_E_WRONG_SESSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206836));
pub const FWP_E_NO_TXN_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206835));
pub const FWP_E_TXN_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206834));
pub const FWP_E_TXN_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206833));
pub const FWP_E_SESSION_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206832));
pub const FWP_E_INCOMPATIBLE_TXN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206831));
pub const FWP_E_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206830));
pub const FWP_E_NET_EVENTS_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206829));
pub const FWP_E_INCOMPATIBLE_LAYER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206828));
pub const FWP_E_KM_CLIENTS_ONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206827));
pub const FWP_E_LIFETIME_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206826));
pub const FWP_E_BUILTIN_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206825));
pub const FWP_E_TOO_MANY_CALLOUTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206824));
pub const FWP_E_NOTIFICATION_DROPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206823));
pub const FWP_E_TRAFFIC_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206822));
pub const FWP_E_INCOMPATIBLE_SA_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206821));
pub const FWP_E_NULL_POINTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206820));
pub const FWP_E_INVALID_ENUMERATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206819));
pub const FWP_E_INVALID_FLAGS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206818));
pub const FWP_E_INVALID_NET_MASK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206817));
pub const FWP_E_INVALID_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206816));
pub const FWP_E_INVALID_INTERVAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206815));
pub const FWP_E_ZERO_LENGTH_ARRAY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206814));
pub const FWP_E_NULL_DISPLAY_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206813));
pub const FWP_E_INVALID_ACTION_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206812));
pub const FWP_E_INVALID_WEIGHT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206811));
pub const FWP_E_MATCH_TYPE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206810));
pub const FWP_E_TYPE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206809));
pub const FWP_E_OUT_OF_BOUNDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206808));
pub const FWP_E_RESERVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206807));
pub const FWP_E_DUPLICATE_CONDITION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206806));
pub const FWP_E_DUPLICATE_KEYMOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206805));
pub const FWP_E_ACTION_INCOMPATIBLE_WITH_LAYER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206804));
pub const FWP_E_ACTION_INCOMPATIBLE_WITH_SUBLAYER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206803));
pub const FWP_E_CONTEXT_INCOMPATIBLE_WITH_LAYER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206802));
pub const FWP_E_CONTEXT_INCOMPATIBLE_WITH_CALLOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206801));
pub const FWP_E_INCOMPATIBLE_AUTH_METHOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206800));
pub const FWP_E_INCOMPATIBLE_DH_GROUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206799));
pub const FWP_E_EM_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206798));
pub const FWP_E_NEVER_MATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206797));
pub const FWP_E_PROVIDER_CONTEXT_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206796));
pub const FWP_E_INVALID_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206795));
pub const FWP_E_TOO_MANY_SUBLAYERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206794));
pub const FWP_E_CALLOUT_NOTIFICATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206793));
pub const FWP_E_INVALID_AUTH_TRANSFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206792));
pub const FWP_E_INVALID_CIPHER_TRANSFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206791));
pub const FWP_E_INCOMPATIBLE_CIPHER_TRANSFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206790));
pub const FWP_E_INVALID_TRANSFORM_COMBINATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206789));
pub const FWP_E_DUPLICATE_AUTH_METHOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206788));
pub const FWP_E_INVALID_TUNNEL_ENDPOINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206787));
pub const FWP_E_L2_DRIVER_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206786));
pub const FWP_E_KEY_DICTATOR_ALREADY_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206785));
pub const FWP_E_KEY_DICTATION_INVALID_KEYING_MATERIAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206784));
pub const FWP_E_CONNECTIONS_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206783));
pub const FWP_E_INVALID_DNS_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206782));
pub const FWP_E_STILL_ON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206781));
pub const FWP_E_IKEEXT_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206780));
pub const FWP_E_DROP_NOICMP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144206588));
pub const WS_S_ASYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, 3997696));
pub const WS_S_END = @import("zig.zig").typedConst(HRESULT, @as(i32, 3997697));
pub const WS_E_INVALID_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485952));
pub const WS_E_OBJECT_FAULTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485951));
pub const WS_E_NUMERIC_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485950));
pub const WS_E_INVALID_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485949));
pub const WS_E_OPERATION_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485948));
pub const WS_E_ENDPOINT_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485947));
pub const WS_E_OPERATION_TIMED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485946));
pub const WS_E_OPERATION_ABANDONED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485945));
pub const WS_E_QUOTA_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485944));
pub const WS_E_NO_TRANSLATION_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485943));
pub const WS_E_SECURITY_VERIFICATION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485942));
pub const WS_E_ADDRESS_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485941));
pub const WS_E_ADDRESS_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485940));
pub const WS_E_ENDPOINT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485939));
pub const WS_E_ENDPOINT_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485938));
pub const WS_E_ENDPOINT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485937));
pub const WS_E_ENDPOINT_UNREACHABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485936));
pub const WS_E_ENDPOINT_ACTION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485935));
pub const WS_E_ENDPOINT_TOO_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485934));
pub const WS_E_ENDPOINT_FAULT_RECEIVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485933));
pub const WS_E_ENDPOINT_DISCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485932));
pub const WS_E_PROXY_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485931));
pub const WS_E_PROXY_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485930));
pub const WS_E_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485929));
pub const WS_E_PROXY_REQUIRES_BASIC_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485928));
pub const WS_E_PROXY_REQUIRES_DIGEST_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485927));
pub const WS_E_PROXY_REQUIRES_NTLM_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485926));
pub const WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485925));
pub const WS_E_SERVER_REQUIRES_BASIC_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485924));
pub const WS_E_SERVER_REQUIRES_DIGEST_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485923));
pub const WS_E_SERVER_REQUIRES_NTLM_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485922));
pub const WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485921));
pub const WS_E_INVALID_ENDPOINT_URL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485920));
pub const WS_E_OTHER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485919));
pub const WS_E_SECURITY_TOKEN_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485918));
pub const WS_E_SECURITY_SYSTEM_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143485917));
pub const HCS_E_TERMINATED_DURING_START = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878912));
pub const HCS_E_IMAGE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878911));
pub const HCS_E_HYPERV_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878910));
pub const HCS_E_INVALID_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878907));
pub const HCS_E_UNEXPECTED_EXIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878906));
pub const HCS_E_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878905));
pub const HCS_E_CONNECT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878904));
pub const HCS_E_CONNECTION_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878903));
pub const HCS_E_CONNECTION_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878902));
pub const HCS_E_UNKNOWN_MESSAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878901));
pub const HCS_E_UNSUPPORTED_PROTOCOL_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878900));
pub const HCS_E_INVALID_JSON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878899));
pub const HCS_E_SYSTEM_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878898));
pub const HCS_E_SYSTEM_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878897));
pub const HCS_E_SYSTEM_ALREADY_STOPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878896));
pub const HCS_E_PROTOCOL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878895));
pub const HCS_E_INVALID_LAYER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878894));
pub const HCS_E_WINDOWS_INSIDER_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878893));
pub const HCS_E_SERVICE_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878892));
pub const HCS_E_OPERATION_NOT_STARTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878891));
pub const HCS_E_OPERATION_ALREADY_STARTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878890));
pub const HCS_E_OPERATION_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878889));
pub const HCS_E_OPERATION_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878888));
pub const HCS_E_OPERATION_SYSTEM_CALLBACK_ALREADY_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878887));
pub const HCS_E_OPERATION_RESULT_ALLOCATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878886));
pub const HCS_E_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878885));
pub const HCS_E_GUEST_CRITICAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878884));
pub const HCS_E_PROCESS_INFO_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878883));
pub const HCS_E_SERVICE_DISCONNECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878882));
pub const HCS_E_PROCESS_ALREADY_STOPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878881));
pub const WHV_E_UNKNOWN_CAPABILITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878400));
pub const WHV_E_INSUFFICIENT_BUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878399));
pub const WHV_E_UNKNOWN_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878398));
pub const WHV_E_UNSUPPORTED_HYPERVISOR_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878397));
pub const WHV_E_INVALID_PARTITION_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878396));
pub const WHV_E_GPA_RANGE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878395));
pub const WHV_E_VP_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878394));
pub const WHV_E_VP_DOES_NOT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878393));
pub const WHV_E_INVALID_VP_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878392));
pub const WHV_E_INVALID_VP_REGISTER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878391));
pub const WHV_E_UNSUPPORTED_PROCESSOR_CONFIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143878384));
pub const VM_SAVED_STATE_DUMP_E_PARTITION_STATE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136064));
pub const VM_SAVED_STATE_DUMP_E_GUEST_MEMORY_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136063));
pub const VM_SAVED_STATE_DUMP_E_NO_VP_FOUND_IN_PARTITION_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136062));
pub const VM_SAVED_STATE_DUMP_E_NESTED_VIRTUALIZATION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136061));
pub const VM_SAVED_STATE_DUMP_E_WINDOWS_KERNEL_IMAGE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136060));
pub const VM_SAVED_STATE_DUMP_E_PXE_NOT_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136059));
pub const VM_SAVED_STATE_DUMP_E_PDPTE_NOT_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136058));
pub const VM_SAVED_STATE_DUMP_E_PDE_NOT_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136057));
pub const VM_SAVED_STATE_DUMP_E_PTE_NOT_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1070136056));
pub const HCN_E_NETWORK_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617023));
pub const HCN_E_ENDPOINT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617022));
pub const HCN_E_LAYER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617021));
pub const HCN_E_SWITCH_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617020));
pub const HCN_E_SUBNET_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617019));
pub const HCN_E_ADAPTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617018));
pub const HCN_E_PORT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617017));
pub const HCN_E_POLICY_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617016));
pub const HCN_E_VFP_PORTSETTING_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617015));
pub const HCN_E_INVALID_NETWORK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617014));
pub const HCN_E_INVALID_NETWORK_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617013));
pub const HCN_E_INVALID_ENDPOINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617012));
pub const HCN_E_INVALID_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617011));
pub const HCN_E_INVALID_POLICY_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617010));
pub const HCN_E_INVALID_REMOTE_ENDPOINT_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617009));
pub const HCN_E_NETWORK_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617008));
pub const HCN_E_LAYER_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617007));
pub const HCN_E_POLICY_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617006));
pub const HCN_E_PORT_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617005));
pub const HCN_E_ENDPOINT_ALREADY_ATTACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617004));
pub const HCN_E_REQUEST_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617003));
pub const HCN_E_MAPPING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617002));
pub const HCN_E_DEGRADED_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617001));
pub const HCN_E_SHARED_SWITCH_MODIFICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143617000));
pub const HCN_E_GUID_CONVERSION_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616999));
pub const HCN_E_REGKEY_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616998));
pub const HCN_E_INVALID_JSON = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616997));
pub const HCN_E_INVALID_JSON_REFERENCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616996));
pub const HCN_E_ENDPOINT_SHARING_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616995));
pub const HCN_E_INVALID_IP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616994));
pub const HCN_E_SWITCH_EXTENSION_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616993));
pub const HCN_E_MANAGER_STOPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616992));
pub const GCN_E_MODULE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616991));
pub const GCN_E_NO_REQUEST_HANDLERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616990));
pub const GCN_E_REQUEST_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616989));
pub const GCN_E_RUNTIMEKEYS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616988));
pub const GCN_E_NETADAPTER_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616987));
pub const GCN_E_NETADAPTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616986));
pub const GCN_E_NETCOMPARTMENT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616985));
pub const GCN_E_NETINTERFACE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616984));
pub const GCN_E_DEFAULTNAMESPACE_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616983));
pub const HCN_E_ICS_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616982));
pub const HCN_E_ENDPOINT_NAMESPACE_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616981));
pub const HCN_E_ENTITY_HAS_REFERENCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616980));
pub const HCN_E_INVALID_INTERNAL_PORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616979));
pub const HCN_E_NAMESPACE_ATTACH_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616978));
pub const HCN_E_ADDR_INVALID_OR_RESERVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616977));
pub const HCN_E_INVALID_PREFIX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616976));
pub const HCN_E_OBJECT_USED_AFTER_UNLOAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616975));
pub const HCN_E_INVALID_SUBNET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616974));
pub const HCN_E_INVALID_IP_SUBNET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616973));
pub const HCN_E_ENDPOINT_NOT_ATTACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616972));
pub const HCN_E_ENDPOINT_NOT_LOCAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616971));
pub const HCN_INTERFACEPARAMETERS_ALREADY_APPLIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143616970));
pub const SDIAG_E_CANCELLED = @as(i32, -2143551232);
pub const SDIAG_E_SCRIPT = @as(i32, -2143551231);
pub const SDIAG_E_POWERSHELL = @as(i32, -2143551230);
pub const SDIAG_E_MANAGEDHOST = @as(i32, -2143551229);
pub const SDIAG_E_NOVERIFIER = @as(i32, -2143551228);
pub const SDIAG_S_CANNOTRUN = @as(i32, 3932421);
pub const SDIAG_E_DISABLED = @as(i32, -2143551226);
pub const SDIAG_E_TRUST = @as(i32, -2143551225);
pub const SDIAG_E_CANNOTRUN = @as(i32, -2143551224);
pub const SDIAG_E_VERSION = @as(i32, -2143551223);
pub const SDIAG_E_RESOURCE = @as(i32, -2143551222);
pub const SDIAG_E_ROOTCAUSE = @as(i32, -2143551221);
pub const WPN_E_CHANNEL_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420160));
pub const WPN_E_CHANNEL_REQUEST_NOT_COMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420159));
pub const WPN_E_INVALID_APP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420158));
pub const WPN_E_OUTSTANDING_CHANNEL_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420157));
pub const WPN_E_DUPLICATE_CHANNEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420156));
pub const WPN_E_PLATFORM_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420155));
pub const WPN_E_NOTIFICATION_POSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420154));
pub const WPN_E_NOTIFICATION_HIDDEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420153));
pub const WPN_E_NOTIFICATION_NOT_POSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420152));
pub const WPN_E_CLOUD_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420151));
pub const WPN_E_CLOUD_INCAPABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420144));
pub const WPN_E_CLOUD_AUTH_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420134));
pub const WPN_E_CLOUD_SERVICE_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420133));
pub const WPN_E_FAILED_LOCK_SCREEN_UPDATE_INTIALIZATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420132));
pub const WPN_E_NOTIFICATION_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420143));
pub const WPN_E_NOTIFICATION_INCAPABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420142));
pub const WPN_E_INTERNET_INCAPABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420141));
pub const WPN_E_NOTIFICATION_TYPE_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420140));
pub const WPN_E_NOTIFICATION_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420139));
pub const WPN_E_TAG_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420138));
pub const WPN_E_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420137));
pub const WPN_E_DUPLICATE_REGISTRATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420136));
pub const WPN_E_PUSH_NOTIFICATION_INCAPABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420135));
pub const WPN_E_DEV_ID_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420128));
pub const WPN_E_TAG_ALPHANUMERIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420118));
pub const WPN_E_INVALID_HTTP_STATUS_CODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143420117));
pub const WPN_E_OUT_OF_SESSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419904));
pub const WPN_E_POWER_SAVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419903));
pub const WPN_E_IMAGE_NOT_FOUND_IN_CACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419902));
pub const WPN_E_ALL_URL_NOT_COMPLETED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419901));
pub const WPN_E_INVALID_CLOUD_IMAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419900));
pub const WPN_E_NOTIFICATION_ID_MATCHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419899));
pub const WPN_E_CALLBACK_ALREADY_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419898));
pub const WPN_E_TOAST_NOTIFICATION_DROPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419897));
pub const WPN_E_STORAGE_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419896));
pub const WPN_E_GROUP_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419895));
pub const WPN_E_GROUP_ALPHANUMERIC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419894));
pub const WPN_E_CLOUD_DISABLED_FOR_APP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143419893));
pub const E_MBN_CONTEXT_NOT_ACTIVATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945343));
pub const E_MBN_BAD_SIM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945342));
pub const E_MBN_DATA_CLASS_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945341));
pub const E_MBN_INVALID_ACCESS_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945340));
pub const E_MBN_MAX_ACTIVATED_CONTEXTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945339));
pub const E_MBN_PACKET_SVC_DETACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945338));
pub const E_MBN_PROVIDER_NOT_VISIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945337));
pub const E_MBN_RADIO_POWER_OFF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945336));
pub const E_MBN_SERVICE_NOT_ACTIVATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945335));
pub const E_MBN_SIM_NOT_INSERTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945334));
pub const E_MBN_VOICE_CALL_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945333));
pub const E_MBN_INVALID_CACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945332));
pub const E_MBN_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945331));
pub const E_MBN_PROVIDERS_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945330));
pub const E_MBN_PIN_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945329));
pub const E_MBN_PIN_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945328));
pub const E_MBN_PIN_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945327));
pub const E_MBN_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945326));
pub const E_MBN_INVALID_PROFILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945320));
pub const E_MBN_DEFAULT_PROFILE_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945319));
pub const E_MBN_SMS_ENCODING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945312));
pub const E_MBN_SMS_FILTER_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945311));
pub const E_MBN_SMS_INVALID_MEMORY_INDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945310));
pub const E_MBN_SMS_LANG_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945309));
pub const E_MBN_SMS_MEMORY_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945308));
pub const E_MBN_SMS_NETWORK_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945307));
pub const E_MBN_SMS_UNKNOWN_SMSC_ADDRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945306));
pub const E_MBN_SMS_FORMAT_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945305));
pub const E_MBN_SMS_OPERATION_NOT_ALLOWED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945304));
pub const E_MBN_SMS_MEMORY_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141945303));
pub const PEER_E_IPV6_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995583));
pub const PEER_E_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995582));
pub const PEER_E_CANNOT_START_SERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995581));
pub const PEER_E_NOT_LICENSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995580));
pub const PEER_E_INVALID_GRAPH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995568));
pub const PEER_E_DBNAME_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995567));
pub const PEER_E_DUPLICATE_GRAPH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995566));
pub const PEER_E_GRAPH_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995565));
pub const PEER_E_GRAPH_SHUTTING_DOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995564));
pub const PEER_E_GRAPH_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995563));
pub const PEER_E_INVALID_DATABASE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995562));
pub const PEER_E_TOO_MANY_ATTRIBUTES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995561));
pub const PEER_E_CONNECTION_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995325));
pub const PEER_E_CONNECT_SELF = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995322));
pub const PEER_E_ALREADY_LISTENING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995321));
pub const PEER_E_NODE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995320));
pub const PEER_E_CONNECTION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995319));
pub const PEER_E_CONNECTION_NOT_AUTHENTICATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995318));
pub const PEER_E_CONNECTION_REFUSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995317));
pub const PEER_E_CLASSIFIER_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995071));
pub const PEER_E_TOO_MANY_IDENTITIES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995070));
pub const PEER_E_NO_KEY_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995069));
pub const PEER_E_GROUPS_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140995068));
pub const PEER_E_RECORD_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994815));
pub const PEER_E_DATABASE_ACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994814));
pub const PEER_E_DBINITIALIZATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994813));
pub const PEER_E_MAX_RECORD_SIZE_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994812));
pub const PEER_E_DATABASE_ALREADY_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994811));
pub const PEER_E_DATABASE_NOT_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994810));
pub const PEER_E_IDENTITY_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994559));
pub const PEER_E_EVENT_HANDLE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994303));
pub const PEER_E_INVALID_SEARCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994047));
pub const PEER_E_INVALID_ATTRIBUTES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140994046));
pub const PEER_E_INVITATION_NOT_TRUSTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140993791));
pub const PEER_E_CHAIN_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140993789));
pub const PEER_E_INVALID_TIME_PERIOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140993787));
pub const PEER_E_CIRCULAR_CHAIN_DETECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140993786));
pub const PEER_E_CERT_STORE_CORRUPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140993535));
pub const PEER_E_NO_CLOUD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140991487));
pub const PEER_E_CLOUD_NAME_AMBIGUOUS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140991483));
pub const PEER_E_INVALID_RECORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987376));
pub const PEER_E_NOT_AUTHORIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987360));
pub const PEER_E_PASSWORD_DOES_NOT_MEET_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987359));
pub const PEER_E_DEFERRED_VALIDATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987344));
pub const PEER_E_INVALID_GROUP_PROPERTIES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987328));
pub const PEER_E_INVALID_PEER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987312));
pub const PEER_E_INVALID_CLASSIFIER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987296));
pub const PEER_E_INVALID_FRIENDLY_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987280));
pub const PEER_E_INVALID_ROLE_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987279));
pub const PEER_E_INVALID_CLASSIFIER_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987278));
pub const PEER_E_INVALID_RECORD_EXPIRATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987264));
pub const PEER_E_INVALID_CREDENTIAL_INFO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987263));
pub const PEER_E_INVALID_CREDENTIAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987262));
pub const PEER_E_INVALID_RECORD_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987261));
pub const PEER_E_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987248));
pub const PEER_E_GROUP_NOT_READY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987247));
pub const PEER_E_GROUP_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987246));
pub const PEER_E_INVALID_GROUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987245));
pub const PEER_E_NO_MEMBERS_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987244));
pub const PEER_E_NO_MEMBER_CONNECTIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987243));
pub const PEER_E_UNABLE_TO_LISTEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987242));
pub const PEER_E_IDENTITY_DELETED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987232));
pub const PEER_E_SERVICE_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140987231));
pub const PEER_E_CONTACT_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140971007));
pub const PEER_S_GRAPH_DATA_CREATED = @import("zig.zig").typedConst(HRESULT, @as(i32, 6488065));
pub const PEER_S_NO_EVENT_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, 6488066));
pub const PEER_S_ALREADY_CONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, 6496256));
pub const PEER_S_SUBSCRIPTION_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, 6512640));
pub const PEER_S_NO_CONNECTIVITY = @import("zig.zig").typedConst(HRESULT, @as(i32, 6488069));
pub const PEER_S_ALREADY_A_MEMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, 6488070));
pub const PEER_E_CANNOT_CONVERT_PEER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140979199));
pub const PEER_E_INVALID_PEER_HOST_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140979198));
pub const PEER_E_NO_MORE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140979197));
pub const PEER_E_PNRP_DUPLICATE_PEER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140979195));
pub const PEER_E_INVITE_CANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966912));
pub const PEER_E_INVITE_RESPONSE_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966911));
pub const PEER_E_NOT_SIGNED_IN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966909));
pub const PEER_E_PRIVACY_DECLINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966908));
pub const PEER_E_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966907));
pub const PEER_E_INVALID_ADDRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966905));
pub const PEER_E_FW_EXCEPTION_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966904));
pub const PEER_E_FW_BLOCKED_BY_POLICY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966903));
pub const PEER_E_FW_BLOCKED_BY_SHIELDS_UP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966902));
pub const PEER_E_FW_DECLINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140966901));
pub const UI_E_CREATE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731135));
pub const UI_E_SHUTDOWN_CALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731134));
pub const UI_E_ILLEGAL_REENTRANCY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731133));
pub const UI_E_OBJECT_SEALED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731132));
pub const UI_E_VALUE_NOT_SET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731131));
pub const UI_E_VALUE_NOT_DETERMINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731130));
pub const UI_E_INVALID_OUTPUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731129));
pub const UI_E_BOOLEAN_EXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731128));
pub const UI_E_DIFFERENT_OWNER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731127));
pub const UI_E_AMBIGUOUS_MATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731126));
pub const UI_E_FP_OVERFLOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731125));
pub const UI_E_WRONG_THREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144731124));
pub const UI_E_STORYBOARD_ACTIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730879));
pub const UI_E_STORYBOARD_NOT_PLAYING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730878));
pub const UI_E_START_KEYFRAME_AFTER_END = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730877));
pub const UI_E_END_KEYFRAME_NOT_DETERMINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730876));
pub const UI_E_LOOPS_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730875));
pub const UI_E_TRANSITION_ALREADY_USED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730874));
pub const UI_E_TRANSITION_NOT_IN_STORYBOARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730873));
pub const UI_E_TRANSITION_ECLIPSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730872));
pub const UI_E_TIME_BEFORE_LAST_UPDATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730871));
pub const UI_E_TIMER_CLIENT_ALREADY_CONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730870));
pub const UI_E_INVALID_DIMENSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730869));
pub const UI_E_PRIMITIVE_OUT_OF_BOUNDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730868));
pub const UI_E_WINDOW_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144730623));
pub const E_BLUETOOTH_ATT_INVALID_HANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864511));
pub const E_BLUETOOTH_ATT_READ_NOT_PERMITTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864510));
pub const E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864509));
pub const E_BLUETOOTH_ATT_INVALID_PDU = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864508));
pub const E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864507));
pub const E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864506));
pub const E_BLUETOOTH_ATT_INVALID_OFFSET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864505));
pub const E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864504));
pub const E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864503));
pub const E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864502));
pub const E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864501));
pub const E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864500));
pub const E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864499));
pub const E_BLUETOOTH_ATT_UNLIKELY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864498));
pub const E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864497));
pub const E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864496));
pub const E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140864495));
pub const E_BLUETOOTH_ATT_UNKNOWN_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140860416));
pub const E_AUDIO_ENGINE_NODE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140798975));
pub const E_HDAUDIO_EMPTY_CONNECTION_LIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140798974));
pub const E_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140798973));
pub const E_HDAUDIO_NO_LOGICAL_DEVICES_CREATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140798972));
pub const E_HDAUDIO_NULL_LINKED_LIST_ENTRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140798971));
pub const STATEREPOSITORY_E_CONCURRENCY_LOCKING_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733439));
pub const STATEREPOSITORY_E_STATEMENT_INPROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733438));
pub const STATEREPOSITORY_E_CONFIGURATION_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733437));
pub const STATEREPOSITORY_E_UNKNOWN_SCHEMA_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733436));
pub const STATEREPOSITORY_ERROR_DICTIONARY_CORRUPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733435));
pub const STATEREPOSITORY_E_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733434));
pub const STATEREPOSITORY_E_BUSY_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733433));
pub const STATEREPOSITORY_E_BUSY_RECOVERY_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733432));
pub const STATEREPOSITORY_E_LOCKED_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733431));
pub const STATEREPOSITORY_E_LOCKED_SHAREDCACHE_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733430));
pub const STATEREPOSITORY_E_TRANSACTION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733429));
pub const STATEREPOSITORY_E_BUSY_TIMEOUT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733428));
pub const STATEREPOSITORY_E_BUSY_RECOVERY_TIMEOUT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733427));
pub const STATEREPOSITORY_E_LOCKED_TIMEOUT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733426));
pub const STATEREPOSITORY_E_LOCKED_SHAREDCACHE_TIMEOUT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733425));
pub const STATEREPOSITORY_E_SERVICE_STOP_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733424));
pub const STATEREPOSTORY_E_NESTED_TRANSACTION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733423));
pub const STATEREPOSITORY_ERROR_CACHE_CORRUPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2140733422));
pub const STATEREPOSITORY_TRANSACTION_CALLER_ID_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, 6750227));
pub const STATEREPOSITORY_TRANSACTION_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, 6750228));
pub const ERROR_SPACES_POOL_WAS_DELETED = @import("zig.zig").typedConst(HRESULT, @as(i32, 15138817));
pub const ERROR_SPACES_FAULT_DOMAIN_TYPE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344831));
pub const ERROR_SPACES_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344830));
pub const ERROR_SPACES_RESILIENCY_TYPE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344829));
pub const ERROR_SPACES_DRIVE_SECTOR_SIZE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344828));
pub const ERROR_SPACES_DRIVE_REDUNDANCY_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344826));
pub const ERROR_SPACES_NUMBER_OF_DATA_COPIES_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344825));
pub const ERROR_SPACES_PARITY_LAYOUT_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344824));
pub const ERROR_SPACES_INTERLEAVE_LENGTH_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344823));
pub const ERROR_SPACES_NUMBER_OF_COLUMNS_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344822));
pub const ERROR_SPACES_NOT_ENOUGH_DRIVES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344821));
pub const ERROR_SPACES_EXTENDED_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344820));
pub const ERROR_SPACES_PROVISIONING_TYPE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344819));
pub const ERROR_SPACES_ALLOCATION_SIZE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344818));
pub const ERROR_SPACES_ENCLOSURE_AWARE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344817));
pub const ERROR_SPACES_WRITE_CACHE_SIZE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344816));
pub const ERROR_SPACES_NUMBER_OF_GROUPS_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344815));
pub const ERROR_SPACES_DRIVE_OPERATIONAL_STATE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344814));
pub const ERROR_SPACES_ENTRY_INCOMPLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344813));
pub const ERROR_SPACES_ENTRY_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2132344812));
pub const ERROR_VOLSNAP_BOOTFILE_NOT_VALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138963967));
pub const ERROR_VOLSNAP_ACTIVATION_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138963966));
pub const ERROR_TIERING_NOT_SUPPORTED_ON_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898431));
pub const ERROR_TIERING_VOLUME_DISMOUNT_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898430));
pub const ERROR_TIERING_STORAGE_TIER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898429));
pub const ERROR_TIERING_INVALID_FILE_ID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898428));
pub const ERROR_TIERING_WRONG_CLUSTER_NODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898427));
pub const ERROR_TIERING_ALREADY_PROCESSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898426));
pub const ERROR_TIERING_CANNOT_PIN_OBJECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898425));
pub const ERROR_TIERING_FILE_IS_NOT_PINNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898424));
pub const ERROR_NOT_A_TIERED_VOLUME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898423));
pub const ERROR_ATTRIBUTE_NOT_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138898422));
pub const ERROR_SECCORE_INVALID_COMMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058537472));
pub const ERROR_NO_APPLICABLE_APP_LICENSES_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406399));
pub const ERROR_CLIP_LICENSE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406398));
pub const ERROR_CLIP_DEVICE_LICENSE_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406397));
pub const ERROR_CLIP_LICENSE_INVALID_SIGNATURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406396));
pub const ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406395));
pub const ERROR_CLIP_LICENSE_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406394));
pub const ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406393));
pub const ERROR_CLIP_LICENSE_NOT_SIGNED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406392));
pub const ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406391));
pub const ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1058406390));
pub const DXGI_STATUS_OCCLUDED = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213121));
pub const DXGI_STATUS_CLIPPED = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213122));
pub const DXGI_STATUS_NO_REDIRECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213124));
pub const DXGI_STATUS_NO_DESKTOP_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213125));
pub const DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213126));
pub const DXGI_STATUS_MODE_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213127));
pub const DXGI_STATUS_MODE_CHANGE_IN_PROGRESS = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213128));
pub const DXCORE_ERROR_EVENT_NOT_UNREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2004877311));
pub const DXGI_STATUS_UNOCCLUDED = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213129));
pub const DXGI_STATUS_DDA_WAS_STILL_DRAWING = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213130));
pub const DXGI_STATUS_PRESENT_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, 142213167));
pub const DXGI_DDI_ERR_WASSTILLDRAWING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005204991));
pub const DXGI_DDI_ERR_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005204990));
pub const DXGI_DDI_ERR_NONEXCLUSIVE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005204989));
pub const D3D10_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005336063));
pub const D3D10_ERROR_FILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005336062));
pub const D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005139455));
pub const D3D11_ERROR_FILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005139454));
pub const D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005139453));
pub const D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005139452));
pub const D3D12_ERROR_ADAPTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005008383));
pub const D3D12_ERROR_DRIVER_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2005008382));
pub const D2DERR_WRONG_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238911));
pub const D2DERR_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238910));
pub const D2DERR_UNSUPPORTED_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238909));
pub const D2DERR_SCANNER_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238908));
pub const D2DERR_SCREEN_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238907));
pub const D2DERR_DISPLAY_STATE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238906));
pub const D2DERR_ZERO_VECTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238905));
pub const D2DERR_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238904));
pub const D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238903));
pub const D2DERR_INVALID_CALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238902));
pub const D2DERR_NO_HARDWARE_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238901));
pub const D2DERR_RECREATE_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238900));
pub const D2DERR_TOO_MANY_SHADER_ELEMENTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238899));
pub const D2DERR_SHADER_COMPILE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238898));
pub const D2DERR_MAX_TEXTURE_SIZE_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238897));
pub const D2DERR_UNSUPPORTED_VERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238896));
pub const D2DERR_BAD_NUMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238895));
pub const D2DERR_WRONG_FACTORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238894));
pub const D2DERR_LAYER_ALREADY_IN_USE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238893));
pub const D2DERR_POP_CALL_DID_NOT_MATCH_PUSH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238892));
pub const D2DERR_WRONG_RESOURCE_DOMAIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238891));
pub const D2DERR_PUSH_POP_UNBALANCED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238890));
pub const D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238889));
pub const D2DERR_INCOMPATIBLE_BRUSH_TYPES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238888));
pub const D2DERR_WIN32_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238887));
pub const D2DERR_TARGET_NOT_GDI_COMPATIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238886));
pub const D2DERR_TEXT_EFFECT_IS_WRONG_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238885));
pub const D2DERR_TEXT_RENDERER_NOT_RELEASED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238884));
pub const D2DERR_EXCEEDS_MAX_BITMAP_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238883));
pub const D2DERR_INVALID_GRAPH_CONFIGURATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238882));
pub const D2DERR_INVALID_INTERNAL_GRAPH_CONFIGURATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238881));
pub const D2DERR_CYCLIC_GRAPH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238880));
pub const D2DERR_BITMAP_CANNOT_DRAW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238879));
pub const D2DERR_OUTSTANDING_BITMAP_REFERENCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238878));
pub const D2DERR_ORIGINAL_TARGET_NOT_BOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238877));
pub const D2DERR_INVALID_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238876));
pub const D2DERR_BITMAP_BOUND_AS_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238875));
pub const D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238874));
pub const D2DERR_INTERMEDIATE_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238873));
pub const D2DERR_EFFECT_IS_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238872));
pub const D2DERR_INVALID_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238871));
pub const D2DERR_NO_SUBPROPERTIES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238870));
pub const D2DERR_PRINT_JOB_CLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238869));
pub const D2DERR_PRINT_FORMAT_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238868));
pub const D2DERR_TOO_MANY_TRANSFORM_INPUTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238867));
pub const D2DERR_INVALID_GLYPH_IMAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003238866));
pub const DWRITE_E_FILEFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283968));
pub const DWRITE_E_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283967));
pub const DWRITE_E_NOFONT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283966));
pub const DWRITE_E_FILENOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283965));
pub const DWRITE_E_FILEACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283964));
pub const DWRITE_E_FONTCOLLECTIONOBSOLETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283963));
pub const DWRITE_E_ALREADYREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283962));
pub const DWRITE_E_CACHEFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283961));
pub const DWRITE_E_CACHEVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283960));
pub const DWRITE_E_UNSUPPORTEDOPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283959));
pub const DWRITE_E_TEXTRENDERERINCOMPATIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283958));
pub const DWRITE_E_FLOWDIRECTIONCONFLICTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283957));
pub const DWRITE_E_NOCOLOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003283956));
pub const WINCODEC_ERR_WRONGSTATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292412));
pub const WINCODEC_ERR_VALUEOUTOFRANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292411));
pub const WINCODEC_ERR_UNKNOWNIMAGEFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292409));
pub const WINCODEC_ERR_UNSUPPORTEDVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292405));
pub const WINCODEC_ERR_NOTINITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292404));
pub const WINCODEC_ERR_ALREADYLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292403));
pub const WINCODEC_ERR_PROPERTYNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292352));
pub const WINCODEC_ERR_PROPERTYNOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292351));
pub const WINCODEC_ERR_PROPERTYSIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292350));
pub const WINCODEC_ERR_CODECPRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292349));
pub const WINCODEC_ERR_CODECNOTHUMBNAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292348));
pub const WINCODEC_ERR_PALETTEUNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292347));
pub const WINCODEC_ERR_CODECTOOMANYSCANLINES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292346));
pub const WINCODEC_ERR_INTERNALERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292344));
pub const WINCODEC_ERR_SOURCERECTDOESNOTMATCHDIMENSIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292343));
pub const WINCODEC_ERR_COMPONENTNOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292336));
pub const WINCODEC_ERR_IMAGESIZEOUTOFRANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292335));
pub const WINCODEC_ERR_TOOMUCHMETADATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292334));
pub const WINCODEC_ERR_BADIMAGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292320));
pub const WINCODEC_ERR_BADHEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292319));
pub const WINCODEC_ERR_FRAMEMISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292318));
pub const WINCODEC_ERR_BADMETADATAHEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292317));
pub const WINCODEC_ERR_BADSTREAMDATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292304));
pub const WINCODEC_ERR_STREAMWRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292303));
pub const WINCODEC_ERR_STREAMREAD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292302));
pub const WINCODEC_ERR_STREAMNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292301));
pub const WINCODEC_ERR_UNSUPPORTEDPIXELFORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292288));
pub const WINCODEC_ERR_UNSUPPORTEDOPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292287));
pub const WINCODEC_ERR_INVALIDREGISTRATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292278));
pub const WINCODEC_ERR_COMPONENTINITIALIZEFAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292277));
pub const WINCODEC_ERR_INSUFFICIENTBUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292276));
pub const WINCODEC_ERR_DUPLICATEMETADATAPRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292275));
pub const WINCODEC_ERR_PROPERTYUNEXPECTEDTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292274));
pub const WINCODEC_ERR_UNEXPECTEDSIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292273));
pub const WINCODEC_ERR_INVALIDQUERYREQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292272));
pub const WINCODEC_ERR_UNEXPECTEDMETADATATYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292271));
pub const WINCODEC_ERR_REQUESTONLYVALIDATMETADATAROOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292270));
pub const WINCODEC_ERR_INVALIDQUERYCHARACTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292269));
pub const WINCODEC_ERR_WIN32ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292268));
pub const WINCODEC_ERR_INVALIDPROGRESSIVELEVEL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292267));
pub const WINCODEC_ERR_INVALIDJPEGSCANINDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003292266));
pub const MILERR_OBJECTBUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304447));
pub const MILERR_INSUFFICIENTBUFFER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304446));
pub const MILERR_WIN32ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304445));
pub const MILERR_SCANNER_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304444));
pub const MILERR_SCREENACCESSDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304443));
pub const MILERR_DISPLAYSTATEINVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304442));
pub const MILERR_NONINVERTIBLEMATRIX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304441));
pub const MILERR_ZEROVECTOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304440));
pub const MILERR_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304439));
pub const MILERR_BADNUMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304438));
pub const MILERR_INTERNALERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304320));
pub const MILERR_DISPLAYFORMATNOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304316));
pub const MILERR_INVALIDCALL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304315));
pub const MILERR_ALREADYLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304314));
pub const MILERR_NOTLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304313));
pub const MILERR_DEVICECANNOTRENDERTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304312));
pub const MILERR_GLYPHBITMAPMISSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304311));
pub const MILERR_MALFORMEDGLYPHCACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304310));
pub const MILERR_GENERIC_IGNORE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304309));
pub const MILERR_MALFORMED_GUIDELINE_DATA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304308));
pub const MILERR_NO_HARDWARE_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304307));
pub const MILERR_NEED_RECREATE_AND_PRESENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304306));
pub const MILERR_ALREADY_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304305));
pub const MILERR_MISMATCHED_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304304));
pub const MILERR_NO_REDIRECTION_SURFACE_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304303));
pub const MILERR_REMOTING_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304302));
pub const MILERR_QUEUED_PRESENT_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304301));
pub const MILERR_NOT_QUEUING_PRESENTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304300));
pub const MILERR_NO_REDIRECTION_SURFACE_RETRY_LATER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304299));
pub const MILERR_TOOMANYSHADERELEMNTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304298));
pub const MILERR_MROW_READLOCK_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304297));
pub const MILERR_MROW_UPDATE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304296));
pub const MILERR_SHADER_COMPILE_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304295));
pub const MILERR_MAX_TEXTURE_SIZE_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304294));
pub const MILERR_QPC_TIME_WENT_BACKWARD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304293));
pub const MILERR_DXGI_ENUMERATION_OUT_OF_SYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304291));
pub const MILERR_ADAPTER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304290));
pub const MILERR_COLORSPACE_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304289));
pub const MILERR_PREFILTER_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304288));
pub const MILERR_DISPLAYID_ACCESS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003304287));
pub const UCEERR_INVALIDPACKETHEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303424));
pub const UCEERR_UNKNOWNPACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303423));
pub const UCEERR_ILLEGALPACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303422));
pub const UCEERR_MALFORMEDPACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303421));
pub const UCEERR_ILLEGALHANDLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303420));
pub const UCEERR_HANDLELOOKUPFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303419));
pub const UCEERR_RENDERTHREADFAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303418));
pub const UCEERR_CTXSTACKFRSTTARGETNULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303417));
pub const UCEERR_CONNECTIONIDLOOKUPFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303416));
pub const UCEERR_BLOCKSFULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303415));
pub const UCEERR_MEMORYFAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303414));
pub const UCEERR_PACKETRECORDOUTOFRANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303413));
pub const UCEERR_ILLEGALRECORDTYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303412));
pub const UCEERR_OUTOFHANDLES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303411));
pub const UCEERR_UNCHANGABLE_UPDATE_ATTEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303410));
pub const UCEERR_NO_MULTIPLE_WORKER_THREADS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303409));
pub const UCEERR_REMOTINGNOTSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303408));
pub const UCEERR_MISSINGENDCOMMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303407));
pub const UCEERR_MISSINGBEGINCOMMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303406));
pub const UCEERR_CHANNELSYNCTIMEDOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303405));
pub const UCEERR_CHANNELSYNCABANDONED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303404));
pub const UCEERR_UNSUPPORTEDTRANSPORTVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303403));
pub const UCEERR_TRANSPORTUNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303402));
pub const UCEERR_FEEDBACK_UNSUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303401));
pub const UCEERR_COMMANDTRANSPORTDENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303400));
pub const UCEERR_GRAPHICSSTREAMUNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303399));
pub const UCEERR_GRAPHICSSTREAMALREADYOPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303392));
pub const UCEERR_TRANSPORTDISCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303391));
pub const UCEERR_TRANSPORTOVERLOADED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303390));
pub const UCEERR_PARTITION_ZOMBIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303389));
pub const MILAVERR_NOCLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303168));
pub const MILAVERR_NOMEDIATYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303167));
pub const MILAVERR_NOVIDEOMIXER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303166));
pub const MILAVERR_NOVIDEOPRESENTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303165));
pub const MILAVERR_NOREADYFRAMES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303164));
pub const MILAVERR_MODULENOTLOADED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303163));
pub const MILAVERR_WMPFACTORYNOTREGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303162));
pub const MILAVERR_INVALIDWMPVERSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303161));
pub const MILAVERR_INSUFFICIENTVIDEORESOURCES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303160));
pub const MILAVERR_VIDEOACCELERATIONNOTAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303159));
pub const MILAVERR_REQUESTEDTEXTURETOOBIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303158));
pub const MILAVERR_SEEKFAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303157));
pub const MILAVERR_UNEXPECTEDWMPFAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303156));
pub const MILAVERR_MEDIAPLAYERCLOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303155));
pub const MILAVERR_UNKNOWNHARDWAREERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003303154));
pub const MILEFFECTSERR_UNKNOWNPROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302898));
pub const MILEFFECTSERR_EFFECTNOTPARTOFGROUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302897));
pub const MILEFFECTSERR_NOINPUTSOURCEATTACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302896));
pub const MILEFFECTSERR_CONNECTORNOTCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302895));
pub const MILEFFECTSERR_CONNECTORNOTASSOCIATEDWITHEFFECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302894));
pub const MILEFFECTSERR_RESERVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302893));
pub const MILEFFECTSERR_CYCLEDETECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302892));
pub const MILEFFECTSERR_EFFECTINMORETHANONEGRAPH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302891));
pub const MILEFFECTSERR_EFFECTALREADYINAGRAPH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302890));
pub const MILEFFECTSERR_EFFECTHASNOCHILDREN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302889));
pub const MILEFFECTSERR_ALREADYATTACHEDTOLISTENER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302888));
pub const MILEFFECTSERR_NOTAFFINETRANSFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302887));
pub const MILEFFECTSERR_EMPTYBOUNDS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302886));
pub const MILEFFECTSERR_OUTPUTSIZETOOLARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302885));
pub const DWMERR_STATE_TRANSITION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302656));
pub const DWMERR_THEME_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302655));
pub const DWMERR_CATASTROPHIC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302654));
pub const DCOMPOSITION_ERROR_WINDOW_ALREADY_COMPOSED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302400));
pub const DCOMPOSITION_ERROR_SURFACE_BEING_RENDERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302399));
pub const DCOMPOSITION_ERROR_SURFACE_NOT_BEING_RENDERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003302398));
pub const ONL_E_INVALID_AUTHENTICATION_TARGET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701823));
pub const ONL_E_ACCESS_DENIED_BY_TOU = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701822));
pub const ONL_E_INVALID_APPLICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701821));
pub const ONL_E_PASSWORD_UPDATE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701820));
pub const ONL_E_ACCOUNT_UPDATE_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701819));
pub const ONL_E_FORCESIGNIN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701818));
pub const ONL_E_ACCOUNT_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701817));
pub const ONL_E_PARENTAL_CONSENT_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701816));
pub const ONL_E_EMAIL_VERIFICATION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701815));
pub const ONL_E_ACCOUNT_SUSPENDED_COMPROIMISE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701814));
pub const ONL_E_ACCOUNT_SUSPENDED_ABUSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701813));
pub const ONL_E_ACTION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701812));
pub const ONL_CONNECTION_COUNT_LIMIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701811));
pub const ONL_E_CONNECTED_ACCOUNT_CAN_NOT_SIGNOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701810));
pub const ONL_E_USER_AUTHENTICATION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701809));
pub const ONL_E_REQUEST_THROTTLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2138701808));
pub const FA_E_MAX_PERSISTED_ITEMS_REACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927200));
pub const FA_E_HOMEGROUP_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927198));
pub const E_MONITOR_RESOLUTION_TOO_LOW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927152));
pub const E_ELEVATED_ACTIVATION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927151));
pub const E_UAC_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927150));
pub const E_FULL_ADMIN_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927149));
pub const E_APPLICATION_NOT_REGISTERED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927148));
pub const E_MULTIPLE_EXTENSIONS_FOR_APPLICATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927147));
pub const E_MULTIPLE_PACKAGES_FOR_FAMILY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927146));
pub const E_APPLICATION_MANAGER_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927145));
pub const S_STORE_LAUNCHED_FOR_REMEDIATION = @import("zig.zig").typedConst(HRESULT, @as(i32, 2556504));
pub const S_APPLICATION_ACTIVATION_ERROR_HANDLED_BY_DIALOG = @import("zig.zig").typedConst(HRESULT, @as(i32, 2556505));
pub const E_APPLICATION_ACTIVATION_TIMED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927142));
pub const E_APPLICATION_ACTIVATION_EXEC_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927141));
pub const E_APPLICATION_TEMPORARY_LICENSE_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927140));
pub const E_APPLICATION_TRIAL_LICENSE_EXPIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927139));
pub const E_SKYDRIVE_ROOT_TARGET_FILE_SYSTEM_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927136));
pub const E_SKYDRIVE_ROOT_TARGET_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927135));
pub const E_SKYDRIVE_ROOT_TARGET_CANNOT_INDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927134));
pub const E_SKYDRIVE_FILE_NOT_UPLOADED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927133));
pub const E_SKYDRIVE_UPDATE_AVAILABILITY_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927132));
pub const E_SKYDRIVE_ROOT_TARGET_VOLUME_ROOT_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2144927131));
pub const E_SYNCENGINE_FILE_SIZE_OVER_LIMIT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089791));
pub const E_SYNCENGINE_FILE_SIZE_EXCEEDS_REMAINING_QUOTA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089790));
pub const E_SYNCENGINE_UNSUPPORTED_FILE_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089789));
pub const E_SYNCENGINE_FOLDER_ITEM_COUNT_LIMIT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089788));
pub const E_SYNCENGINE_FILE_SYNC_PARTNER_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089787));
pub const E_SYNCENGINE_SYNC_PAUSED_BY_SERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013089786));
pub const E_SYNCENGINE_FILE_IDENTIFIER_UNKNOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085694));
pub const E_SYNCENGINE_SERVICE_AUTHENTICATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085693));
pub const E_SYNCENGINE_UNKNOWN_SERVICE_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085692));
pub const E_SYNCENGINE_SERVICE_RETURNED_UNEXPECTED_SIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085691));
pub const E_SYNCENGINE_REQUEST_BLOCKED_BY_SERVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085690));
pub const E_SYNCENGINE_REQUEST_BLOCKED_DUE_TO_CLIENT_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013085689));
pub const E_SYNCENGINE_FOLDER_INACCESSIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081599));
pub const E_SYNCENGINE_UNSUPPORTED_FOLDER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081598));
pub const E_SYNCENGINE_UNSUPPORTED_MARKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081597));
pub const E_SYNCENGINE_PATH_LENGTH_LIMIT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081596));
pub const E_SYNCENGINE_REMOTE_PATH_LENGTH_LIMIT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081595));
pub const E_SYNCENGINE_CLIENT_UPDATE_NEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081594));
pub const E_SYNCENGINE_PROXY_AUTHENTICATION_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081593));
pub const E_SYNCENGINE_STORAGE_SERVICE_PROVISIONING_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081592));
pub const E_SYNCENGINE_UNSUPPORTED_REPARSE_POINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081591));
pub const E_SYNCENGINE_STORAGE_SERVICE_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081590));
pub const E_SYNCENGINE_FOLDER_IN_REDIRECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013081589));
pub const EAS_E_POLICY_NOT_MANAGED_BY_OS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913087));
pub const EAS_E_POLICY_COMPLIANT_WITH_ACTIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913086));
pub const EAS_E_REQUESTED_POLICY_NOT_ENFORCEABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913085));
pub const EAS_E_CURRENT_USER_HAS_BLANK_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913084));
pub const EAS_E_REQUESTED_POLICY_PASSWORD_EXPIRATION_INCOMPATIBLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913083));
pub const EAS_E_USER_CANNOT_CHANGE_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913082));
pub const EAS_E_ADMINS_HAVE_BLANK_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913081));
pub const EAS_E_ADMINS_CANNOT_CHANGE_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913080));
pub const EAS_E_LOCAL_CONTROLLED_USERS_CANNOT_CHANGE_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913079));
pub const EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CONNECTED_ADMINS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913078));
pub const EAS_E_CONNECTED_ADMINS_NEED_TO_CHANGE_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913077));
pub const EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CURRENT_CONNECTED_USER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913076));
pub const EAS_E_CURRENT_CONNECTED_USER_NEED_TO_CHANGE_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2141913075));
pub const WEB_E_UNSUPPORTED_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484287));
pub const WEB_E_INVALID_XML = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484286));
pub const WEB_E_MISSING_REQUIRED_ELEMENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484285));
pub const WEB_E_MISSING_REQUIRED_ATTRIBUTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484284));
pub const WEB_E_UNEXPECTED_CONTENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484283));
pub const WEB_E_RESOURCE_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484282));
pub const WEB_E_INVALID_JSON_STRING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484281));
pub const WEB_E_INVALID_JSON_NUMBER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484280));
pub const WEB_E_JSON_VALUE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089484279));
pub const HTTP_E_STATUS_UNEXPECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145845247));
pub const HTTP_E_STATUS_UNEXPECTED_REDIRECTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145845245));
pub const HTTP_E_STATUS_UNEXPECTED_CLIENT_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145845244));
pub const HTTP_E_STATUS_UNEXPECTED_SERVER_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145845243));
pub const HTTP_E_STATUS_AMBIGUOUS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844948));
pub const HTTP_E_STATUS_MOVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844947));
pub const HTTP_E_STATUS_REDIRECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844946));
pub const HTTP_E_STATUS_REDIRECT_METHOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844945));
pub const HTTP_E_STATUS_NOT_MODIFIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844944));
pub const HTTP_E_STATUS_USE_PROXY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844943));
pub const HTTP_E_STATUS_REDIRECT_KEEP_VERB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844941));
pub const HTTP_E_STATUS_BAD_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844848));
pub const HTTP_E_STATUS_DENIED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844847));
pub const HTTP_E_STATUS_PAYMENT_REQ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844846));
pub const HTTP_E_STATUS_FORBIDDEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844845));
pub const HTTP_E_STATUS_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844844));
pub const HTTP_E_STATUS_BAD_METHOD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844843));
pub const HTTP_E_STATUS_NONE_ACCEPTABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844842));
pub const HTTP_E_STATUS_PROXY_AUTH_REQ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844841));
pub const HTTP_E_STATUS_REQUEST_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844840));
pub const HTTP_E_STATUS_CONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844839));
pub const HTTP_E_STATUS_GONE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844838));
pub const HTTP_E_STATUS_LENGTH_REQUIRED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844837));
pub const HTTP_E_STATUS_PRECOND_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844836));
pub const HTTP_E_STATUS_REQUEST_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844835));
pub const HTTP_E_STATUS_URI_TOO_LONG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844834));
pub const HTTP_E_STATUS_UNSUPPORTED_MEDIA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844833));
pub const HTTP_E_STATUS_RANGE_NOT_SATISFIABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844832));
pub const HTTP_E_STATUS_EXPECTATION_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844831));
pub const HTTP_E_STATUS_SERVER_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844748));
pub const HTTP_E_STATUS_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844747));
pub const HTTP_E_STATUS_BAD_GATEWAY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844746));
pub const HTTP_E_STATUS_SERVICE_UNAVAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844745));
pub const HTTP_E_STATUS_GATEWAY_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844744));
pub const HTTP_E_STATUS_VERSION_NOT_SUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2145844743));
pub const E_INVALID_PROTOCOL_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089418751));
pub const E_INVALID_PROTOCOL_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089418750));
pub const E_PROTOCOL_EXTENSIONS_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089418749));
pub const E_SUBPROTOCOL_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089418748));
pub const E_PROTOCOL_VERSION_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2089418747));
pub const INPUT_E_OUT_OF_ORDER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289344));
pub const INPUT_E_REENTRANCY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289343));
pub const INPUT_E_MULTIMODAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289342));
pub const INPUT_E_PACKET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289341));
pub const INPUT_E_FRAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289340));
pub const INPUT_E_HISTORY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289339));
pub const INPUT_E_DEVICE_INFO = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289338));
pub const INPUT_E_TRANSFORM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289337));
pub const INPUT_E_DEVICE_PROPERTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143289336));
pub const ERROR_DBG_CREATE_PROCESS_FAILURE_LOCKDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2135949311));
pub const ERROR_DBG_ATTACH_PROCESS_FAILURE_LOCKDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2135949310));
pub const ERROR_DBG_CONNECT_SERVER_FAILURE_LOCKDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2135949309));
pub const ERROR_DBG_START_SERVER_FAILURE_LOCKDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2135949308));
pub const ERROR_IO_PREEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1996423167));
pub const JSCRIPT_E_CANTEXECUTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1996357631));
pub const WEP_E_NOT_PROVISIONED_ON_ALL_VOLUMES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200383));
pub const WEP_E_FIXED_DATA_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200382));
pub const WEP_E_HARDWARE_NOT_COMPLIANT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200381));
pub const WEP_E_LOCK_NOT_CONFIGURED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200380));
pub const WEP_E_PROTECTION_SUSPENDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200379));
pub const WEP_E_NO_LICENSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200378));
pub const WEP_E_OS_NOT_PROTECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200377));
pub const WEP_E_UNEXPECTED_FAIL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200376));
pub const WEP_E_BUFFER_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2013200375));
pub const ERROR_SVHDX_ERROR_STORED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067712512));
pub const ERROR_SVHDX_ERROR_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647232));
pub const ERROR_SVHDX_UNIT_ATTENTION_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647231));
pub const ERROR_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647230));
pub const ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647229));
pub const ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647228));
pub const ERROR_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647227));
pub const ERROR_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647226));
pub const ERROR_SVHDX_RESERVATION_CONFLICT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647225));
pub const ERROR_SVHDX_WRONG_FILE_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647224));
pub const ERROR_SVHDX_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647223));
pub const ERROR_VHD_SHARED = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647222));
pub const ERROR_SVHDX_NO_INITIATOR = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647221));
pub const ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067647220));
pub const ERROR_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067646976));
pub const ERROR_SMB_BAD_CLUSTER_DIALECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -1067646975));
pub const WININET_E_OUT_OF_HANDLES = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012895));
pub const WININET_E_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012894));
pub const WININET_E_EXTENDED_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012893));
pub const WININET_E_INTERNAL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012892));
pub const WININET_E_INVALID_URL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012891));
pub const WININET_E_UNRECOGNIZED_SCHEME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012890));
pub const WININET_E_NAME_NOT_RESOLVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012889));
pub const WININET_E_PROTOCOL_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012888));
pub const WININET_E_INVALID_OPTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012887));
pub const WININET_E_BAD_OPTION_LENGTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012886));
pub const WININET_E_OPTION_NOT_SETTABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012885));
pub const WININET_E_SHUTDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012884));
pub const WININET_E_INCORRECT_USER_NAME = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012883));
pub const WININET_E_INCORRECT_PASSWORD = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012882));
pub const WININET_E_LOGIN_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012881));
pub const WININET_E_INVALID_OPERATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012880));
pub const WININET_E_OPERATION_CANCELLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012879));
pub const WININET_E_INCORRECT_HANDLE_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012878));
pub const WININET_E_INCORRECT_HANDLE_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012877));
pub const WININET_E_NOT_PROXY_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012876));
pub const WININET_E_REGISTRY_VALUE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012875));
pub const WININET_E_BAD_REGISTRY_PARAMETER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012874));
pub const WININET_E_NO_DIRECT_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012873));
pub const WININET_E_NO_CONTEXT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012872));
pub const WININET_E_NO_CALLBACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012871));
pub const WININET_E_REQUEST_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012870));
pub const WININET_E_INCORRECT_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012869));
pub const WININET_E_ITEM_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012868));
pub const WININET_E_CANNOT_CONNECT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012867));
pub const WININET_E_CONNECTION_ABORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012866));
pub const WININET_E_CONNECTION_RESET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012865));
pub const WININET_E_FORCE_RETRY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012864));
pub const WININET_E_INVALID_PROXY_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012863));
pub const WININET_E_NEED_UI = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012862));
pub const WININET_E_HANDLE_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012860));
pub const WININET_E_SEC_CERT_DATE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012859));
pub const WININET_E_SEC_CERT_CN_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012858));
pub const WININET_E_HTTP_TO_HTTPS_ON_REDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012857));
pub const WININET_E_HTTPS_TO_HTTP_ON_REDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012856));
pub const WININET_E_MIXED_SECURITY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012855));
pub const WININET_E_CHG_POST_IS_NON_SECURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012854));
pub const WININET_E_POST_IS_NON_SECURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012853));
pub const WININET_E_CLIENT_AUTH_CERT_NEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012852));
pub const WININET_E_INVALID_CA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012851));
pub const WININET_E_CLIENT_AUTH_NOT_SETUP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012850));
pub const WININET_E_ASYNC_THREAD_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012849));
pub const WININET_E_REDIRECT_SCHEME_CHANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012848));
pub const WININET_E_DIALOG_PENDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012847));
pub const WININET_E_RETRY_DIALOG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012846));
pub const WININET_E_NO_NEW_CONTAINERS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012845));
pub const WININET_E_HTTPS_HTTP_SUBMIT_REDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012844));
pub const WININET_E_SEC_CERT_ERRORS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012841));
pub const WININET_E_SEC_CERT_REV_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012839));
pub const WININET_E_HEADER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012746));
pub const WININET_E_DOWNLEVEL_SERVER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012745));
pub const WININET_E_INVALID_SERVER_RESPONSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012744));
pub const WININET_E_INVALID_HEADER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012743));
pub const WININET_E_INVALID_QUERY_REQUEST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012742));
pub const WININET_E_HEADER_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012741));
pub const WININET_E_REDIRECT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012740));
pub const WININET_E_SECURITY_CHANNEL_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012739));
pub const WININET_E_UNABLE_TO_CACHE_FILE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012738));
pub const WININET_E_TCPIP_NOT_INSTALLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012737));
pub const WININET_E_DISCONNECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012733));
pub const WININET_E_SERVER_UNREACHABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012732));
pub const WININET_E_PROXY_SERVER_UNREACHABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012731));
pub const WININET_E_BAD_AUTO_PROXY_SCRIPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012730));
pub const WININET_E_UNABLE_TO_DOWNLOAD_SCRIPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012729));
pub const WININET_E_SEC_INVALID_CERT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012727));
pub const WININET_E_SEC_CERT_REVOKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012726));
pub const WININET_E_FAILED_DUETOSECURITYCHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012725));
pub const WININET_E_NOT_INITIALIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012724));
pub const WININET_E_LOGIN_FAILURE_DISPLAY_ENTITY_BODY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012722));
pub const WININET_E_DECODING_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012721));
pub const WININET_E_NOT_REDIRECTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012736));
pub const WININET_E_COOKIE_NEEDS_CONFIRMATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012735));
pub const WININET_E_COOKIE_DECLINED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012734));
pub const WININET_E_REDIRECT_NEEDS_CONFIRMATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2147012728));
pub const SQLITE_E_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574335));
pub const SQLITE_E_INTERNAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574334));
pub const SQLITE_E_PERM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574333));
pub const SQLITE_E_ABORT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574332));
pub const SQLITE_E_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574331));
pub const SQLITE_E_LOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574330));
pub const SQLITE_E_NOMEM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574329));
pub const SQLITE_E_READONLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574328));
pub const SQLITE_E_INTERRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574327));
pub const SQLITE_E_IOERR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574326));
pub const SQLITE_E_CORRUPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574325));
pub const SQLITE_E_NOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574324));
pub const SQLITE_E_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574323));
pub const SQLITE_E_CANTOPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574322));
pub const SQLITE_E_PROTOCOL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574321));
pub const SQLITE_E_EMPTY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574320));
pub const SQLITE_E_SCHEMA = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574319));
pub const SQLITE_E_TOOBIG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574318));
pub const SQLITE_E_CONSTRAINT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574317));
pub const SQLITE_E_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574316));
pub const SQLITE_E_MISUSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574315));
pub const SQLITE_E_NOLFS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574314));
pub const SQLITE_E_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574313));
pub const SQLITE_E_FORMAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574312));
pub const SQLITE_E_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574311));
pub const SQLITE_E_NOTADB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574310));
pub const SQLITE_E_NOTICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574309));
pub const SQLITE_E_WARNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574308));
pub const SQLITE_E_ROW = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574236));
pub const SQLITE_E_DONE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574235));
pub const SQLITE_E_IOERR_READ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574070));
pub const SQLITE_E_IOERR_SHORT_READ = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573814));
pub const SQLITE_E_IOERR_WRITE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573558));
pub const SQLITE_E_IOERR_FSYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573302));
pub const SQLITE_E_IOERR_DIR_FSYNC = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573046));
pub const SQLITE_E_IOERR_TRUNCATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572790));
pub const SQLITE_E_IOERR_FSTAT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572534));
pub const SQLITE_E_IOERR_UNLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572278));
pub const SQLITE_E_IOERR_RDLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572022));
pub const SQLITE_E_IOERR_DELETE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018571766));
pub const SQLITE_E_IOERR_BLOCKED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018571510));
pub const SQLITE_E_IOERR_NOMEM = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018571254));
pub const SQLITE_E_IOERR_ACCESS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018570998));
pub const SQLITE_E_IOERR_CHECKRESERVEDLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018570742));
pub const SQLITE_E_IOERR_LOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018570486));
pub const SQLITE_E_IOERR_CLOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018570230));
pub const SQLITE_E_IOERR_DIR_CLOSE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018569974));
pub const SQLITE_E_IOERR_SHMOPEN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018569718));
pub const SQLITE_E_IOERR_SHMSIZE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018569462));
pub const SQLITE_E_IOERR_SHMLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018569206));
pub const SQLITE_E_IOERR_SHMMAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018568950));
pub const SQLITE_E_IOERR_SEEK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018568694));
pub const SQLITE_E_IOERR_DELETE_NOENT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018568438));
pub const SQLITE_E_IOERR_MMAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018568182));
pub const SQLITE_E_IOERR_GETTEMPPATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018567926));
pub const SQLITE_E_IOERR_CONVPATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018567670));
pub const SQLITE_E_IOERR_VNODE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018567678));
pub const SQLITE_E_IOERR_AUTH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018567677));
pub const SQLITE_E_LOCKED_SHAREDCACHE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574074));
pub const SQLITE_E_BUSY_RECOVERY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574075));
pub const SQLITE_E_BUSY_SNAPSHOT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573819));
pub const SQLITE_E_CANTOPEN_NOTEMPDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574066));
pub const SQLITE_E_CANTOPEN_ISDIR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573810));
pub const SQLITE_E_CANTOPEN_FULLPATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573554));
pub const SQLITE_E_CANTOPEN_CONVPATH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573298));
pub const SQLITE_E_CORRUPT_VTAB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574069));
pub const SQLITE_E_READONLY_RECOVERY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574072));
pub const SQLITE_E_READONLY_CANTLOCK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573816));
pub const SQLITE_E_READONLY_ROLLBACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573560));
pub const SQLITE_E_READONLY_DBMOVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573304));
pub const SQLITE_E_ABORT_ROLLBACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573820));
pub const SQLITE_E_CONSTRAINT_CHECK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574061));
pub const SQLITE_E_CONSTRAINT_COMMITHOOK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573805));
pub const SQLITE_E_CONSTRAINT_FOREIGNKEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573549));
pub const SQLITE_E_CONSTRAINT_FUNCTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573293));
pub const SQLITE_E_CONSTRAINT_NOTNULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573037));
pub const SQLITE_E_CONSTRAINT_PRIMARYKEY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572781));
pub const SQLITE_E_CONSTRAINT_TRIGGER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572525));
pub const SQLITE_E_CONSTRAINT_UNIQUE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572269));
pub const SQLITE_E_CONSTRAINT_VTAB = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018572013));
pub const SQLITE_E_CONSTRAINT_ROWID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018571757));
pub const SQLITE_E_NOTICE_RECOVER_WAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574053));
pub const SQLITE_E_NOTICE_RECOVER_ROLLBACK = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018573797));
pub const SQLITE_E_WARNING_AUTOINDEX = @import("zig.zig").typedConst(HRESULT, @as(i32, -2018574052));
pub const UTC_E_TOGGLE_TRACE_STARTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128447));
pub const UTC_E_ALTERNATIVE_TRACE_CANNOT_PREEMPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128446));
pub const UTC_E_AOT_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128445));
pub const UTC_E_SCRIPT_TYPE_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128444));
pub const UTC_E_SCENARIODEF_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128443));
pub const UTC_E_TRACEPROFILE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128442));
pub const UTC_E_FORWARDER_ALREADY_ENABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128441));
pub const UTC_E_FORWARDER_ALREADY_DISABLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128440));
pub const UTC_E_EVENTLOG_ENTRY_MALFORMED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128439));
pub const UTC_E_DIAGRULES_SCHEMAVERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128438));
pub const UTC_E_SCRIPT_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128437));
pub const UTC_E_INVALID_CUSTOM_FILTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128436));
pub const UTC_E_TRACE_NOT_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128435));
pub const UTC_E_REESCALATED_TOO_QUICKLY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128434));
pub const UTC_E_ESCALATION_ALREADY_RUNNING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128433));
pub const UTC_E_PERFTRACK_ALREADY_TRACING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128432));
pub const UTC_E_REACHED_MAX_ESCALATIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128431));
pub const UTC_E_FORWARDER_PRODUCER_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128430));
pub const UTC_E_INTENTIONAL_SCRIPT_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128429));
pub const UTC_E_SQM_INIT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128428));
pub const UTC_E_NO_WER_LOGGER_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128427));
pub const UTC_E_TRACERS_DONT_EXIST = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128426));
pub const UTC_E_WINRT_INIT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128425));
pub const UTC_E_SCENARIODEF_SCHEMAVERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128424));
pub const UTC_E_INVALID_FILTER = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128423));
pub const UTC_E_EXE_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128422));
pub const UTC_E_ESCALATION_NOT_AUTHORIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128421));
pub const UTC_E_SETUP_NOT_AUTHORIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128420));
pub const UTC_E_CHILD_PROCESS_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128419));
pub const UTC_E_COMMAND_LINE_NOT_AUTHORIZED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128418));
pub const UTC_E_CANNOT_LOAD_SCENARIO_EDITOR_XML = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128417));
pub const UTC_E_ESCALATION_TIMED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128416));
pub const UTC_E_SETUP_TIMED_OUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128415));
pub const UTC_E_TRIGGER_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128414));
pub const UTC_E_TRIGGER_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128413));
pub const UTC_E_SIF_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128412));
pub const UTC_E_DELAY_TERMINATED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128411));
pub const UTC_E_DEVICE_TICKET_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128410));
pub const UTC_E_TRACE_BUFFER_LIMIT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128409));
pub const UTC_E_API_RESULT_UNAVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128408));
pub const UTC_E_RPC_TIMEOUT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128407));
pub const UTC_E_RPC_WAIT_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128406));
pub const UTC_E_API_BUSY = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128405));
pub const UTC_E_TRACE_MIN_DURATION_REQUIREMENT_NOT_MET = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128404));
pub const UTC_E_EXCLUSIVITY_NOT_AVAILABLE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128403));
pub const UTC_E_GETFILE_FILE_PATH_NOT_APPROVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128402));
pub const UTC_E_ESCALATION_DIRECTORY_ALREADY_EXISTS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128401));
pub const UTC_E_TIME_TRIGGER_ON_START_INVALID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128400));
pub const UTC_E_TIME_TRIGGER_ONLY_VALID_ON_SINGLE_TRANSITION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128399));
pub const UTC_E_TIME_TRIGGER_INVALID_TIME_RANGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128398));
pub const UTC_E_MULTIPLE_TIME_TRIGGER_ON_SINGLE_STATE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128397));
pub const UTC_E_BINARY_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128396));
pub const UTC_E_FAILED_TO_RESOLVE_CONTAINER_ID = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128394));
pub const UTC_E_UNABLE_TO_RESOLVE_SESSION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128393));
pub const UTC_E_THROTTLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128392));
pub const UTC_E_UNAPPROVED_SCRIPT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128391));
pub const UTC_E_SCRIPT_MISSING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128390));
pub const UTC_E_SCENARIO_THROTTLED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128389));
pub const UTC_E_API_NOT_SUPPORTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128388));
pub const UTC_E_GETFILE_EXTERNAL_PATH_NOT_APPROVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128387));
pub const UTC_E_TRY_GET_SCENARIO_TIMEOUT_EXCEEDED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128386));
pub const UTC_E_CERT_REV_FAILED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128385));
pub const UTC_E_FAILED_TO_START_NDISCAP = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128384));
pub const UTC_E_KERNELDUMP_LIMIT_REACHED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128383));
pub const UTC_E_MISSING_AGGREGATE_EVENT_TAG = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128382));
pub const UTC_E_INVALID_AGGREGATION_STRUCT = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128381));
pub const UTC_E_ACTION_NOT_SUPPORTED_IN_DESTINATION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128380));
pub const UTC_E_FILTER_MISSING_ATTRIBUTE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128379));
pub const UTC_E_FILTER_INVALID_TYPE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128378));
pub const UTC_E_FILTER_VARIABLE_NOT_FOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128377));
pub const UTC_E_FILTER_FUNCTION_RESTRICTED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128376));
pub const UTC_E_FILTER_VERSION_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128375));
pub const UTC_E_FILTER_INVALID_FUNCTION = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128368));
pub const UTC_E_FILTER_INVALID_FUNCTION_PARAMS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128367));
pub const UTC_E_FILTER_INVALID_COMMAND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128366));
pub const UTC_E_FILTER_ILLEGAL_EVAL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128365));
pub const UTC_E_TTTRACER_RETURNED_ERROR = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128364));
pub const UTC_E_AGENT_DIAGNOSTICS_TOO_LARGE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128363));
pub const UTC_E_FAILED_TO_RECEIVE_AGENT_DIAGNOSTICS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128362));
pub const UTC_E_SCENARIO_HAS_NO_ACTIONS = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128361));
pub const UTC_E_TTTRACER_STORAGE_FULL = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128360));
pub const UTC_E_INSUFFICIENT_SPACE_TO_START_TRACE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128359));
pub const UTC_E_ESCALATION_CANCELLED_AT_SHUTDOWN = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128358));
pub const UTC_E_GETFILEINFOACTION_FILE_NOT_APPROVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128357));
pub const UTC_E_SETREGKEYACTION_TYPE_NOT_APPROVED = @import("zig.zig").typedConst(HRESULT, @as(i32, -2017128356));
pub const WINML_ERR_INVALID_DEVICE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003828735));
pub const WINML_ERR_INVALID_BINDING = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003828734));
pub const WINML_ERR_VALUE_NOTFOUND = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003828733));
pub const WINML_ERR_SIZE_MISMATCH = @import("zig.zig").typedConst(HRESULT, @as(i32, -2003828732));
pub const ERROR_QUIC_HANDSHAKE_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143223808));
pub const ERROR_QUIC_VER_NEG_FAILURE = @import("zig.zig").typedConst(HRESULT, @as(i32, -2143223807));

//--------------------------------------------------------------------------------
// Section: Types (30)
//--------------------------------------------------------------------------------
pub const NTSTATUS_FACILITY_CODE = enum(u32) {
    DEBUGGER = 1,
    RPC_RUNTIME = 2,
    RPC_STUBS = 3,
    IO_ERROR_CODE = 4,
    CODCLASS_ERROR_CODE = 6,
    NTWIN32 = 7,
    NTCERT = 8,
    NTSSPI = 9,
    TERMINAL_SERVER = 10,
    USB_ERROR_CODE = 16,
    HID_ERROR_CODE = 17,
    FIREWIRE_ERROR_CODE = 18,
    CLUSTER_ERROR_CODE = 19,
    ACPI_ERROR_CODE = 20,
    SXS_ERROR_CODE = 21,
    TRANSACTION = 25,
    COMMONLOG = 26,
    VIDEO = 27,
    FILTER_MANAGER = 28,
    MONITOR = 29,
    GRAPHICS_KERNEL = 30,
    DRIVER_FRAMEWORK = 32,
    FVE_ERROR_CODE = 33,
    FWP_ERROR_CODE = 34,
    NDIS_ERROR_CODE = 35,
    QUIC_ERROR_CODE = 36,
    TPM = 41,
    RTPM = 42,
    HYPERVISOR = 53,
    IPSEC = 54,
    VIRTUALIZATION = 55,
    VOLMGR = 56,
    BCD_ERROR_CODE = 57,
    WIN32K_NTUSER = 62,
    WIN32K_NTGDI = 63,
    RESUME_KEY_FILTER = 64,
    RDBSS = 65,
    BTH_ATT = 66,
    SECUREBOOT = 67,
    AUDIO_KERNEL = 68,
    VSM = 69,
    VOLSNAP = 80,
    SDBUS = 81,
    SHARED_VHDX = 92,
    SMB = 93,
    XVS = 94,
    INTERIX = 153,
    SPACES = 231,
    SECURITY_CORE = 232,
    SYSTEM_INTEGRITY = 233,
    LICENSING = 234,
    PLATFORM_MANIFEST = 235,
    APP_EXEC = 236,
    MAXIMUM_VALUE = 237,
};
pub const FACILITY_DEBUGGER = NTSTATUS_FACILITY_CODE.DEBUGGER;
pub const FACILITY_RPC_RUNTIME = NTSTATUS_FACILITY_CODE.RPC_RUNTIME;
pub const FACILITY_RPC_STUBS = NTSTATUS_FACILITY_CODE.RPC_STUBS;
pub const FACILITY_IO_ERROR_CODE = NTSTATUS_FACILITY_CODE.IO_ERROR_CODE;
pub const FACILITY_CODCLASS_ERROR_CODE = NTSTATUS_FACILITY_CODE.CODCLASS_ERROR_CODE;
pub const FACILITY_NTWIN32 = NTSTATUS_FACILITY_CODE.NTWIN32;
pub const FACILITY_NTCERT = NTSTATUS_FACILITY_CODE.NTCERT;
pub const FACILITY_NTSSPI = NTSTATUS_FACILITY_CODE.NTSSPI;
pub const FACILITY_TERMINAL_SERVER = NTSTATUS_FACILITY_CODE.TERMINAL_SERVER;
pub const FACILITY_USB_ERROR_CODE = NTSTATUS_FACILITY_CODE.USB_ERROR_CODE;
pub const FACILITY_HID_ERROR_CODE = NTSTATUS_FACILITY_CODE.HID_ERROR_CODE;
pub const FACILITY_FIREWIRE_ERROR_CODE = NTSTATUS_FACILITY_CODE.FIREWIRE_ERROR_CODE;
pub const FACILITY_CLUSTER_ERROR_CODE = NTSTATUS_FACILITY_CODE.CLUSTER_ERROR_CODE;
pub const FACILITY_ACPI_ERROR_CODE = NTSTATUS_FACILITY_CODE.ACPI_ERROR_CODE;
pub const FACILITY_SXS_ERROR_CODE = NTSTATUS_FACILITY_CODE.SXS_ERROR_CODE;
pub const FACILITY_TRANSACTION = NTSTATUS_FACILITY_CODE.TRANSACTION;
pub const FACILITY_COMMONLOG = NTSTATUS_FACILITY_CODE.COMMONLOG;
pub const FACILITY_VIDEO = NTSTATUS_FACILITY_CODE.VIDEO;
pub const FACILITY_FILTER_MANAGER = NTSTATUS_FACILITY_CODE.FILTER_MANAGER;
pub const FACILITY_MONITOR = NTSTATUS_FACILITY_CODE.MONITOR;
pub const FACILITY_GRAPHICS_KERNEL = NTSTATUS_FACILITY_CODE.GRAPHICS_KERNEL;
pub const FACILITY_DRIVER_FRAMEWORK = NTSTATUS_FACILITY_CODE.DRIVER_FRAMEWORK;
pub const FACILITY_FVE_ERROR_CODE = NTSTATUS_FACILITY_CODE.FVE_ERROR_CODE;
pub const FACILITY_FWP_ERROR_CODE = NTSTATUS_FACILITY_CODE.FWP_ERROR_CODE;
pub const FACILITY_NDIS_ERROR_CODE = NTSTATUS_FACILITY_CODE.NDIS_ERROR_CODE;
pub const FACILITY_QUIC_ERROR_CODE = NTSTATUS_FACILITY_CODE.QUIC_ERROR_CODE;
pub const FACILITY_TPM = NTSTATUS_FACILITY_CODE.TPM;
pub const FACILITY_RTPM = NTSTATUS_FACILITY_CODE.RTPM;
pub const FACILITY_HYPERVISOR = NTSTATUS_FACILITY_CODE.HYPERVISOR;
pub const FACILITY_IPSEC = NTSTATUS_FACILITY_CODE.IPSEC;
pub const FACILITY_VIRTUALIZATION = NTSTATUS_FACILITY_CODE.VIRTUALIZATION;
pub const FACILITY_VOLMGR = NTSTATUS_FACILITY_CODE.VOLMGR;
pub const FACILITY_BCD_ERROR_CODE = NTSTATUS_FACILITY_CODE.BCD_ERROR_CODE;
pub const FACILITY_WIN32K_NTUSER = NTSTATUS_FACILITY_CODE.WIN32K_NTUSER;
pub const FACILITY_WIN32K_NTGDI = NTSTATUS_FACILITY_CODE.WIN32K_NTGDI;
pub const FACILITY_RESUME_KEY_FILTER = NTSTATUS_FACILITY_CODE.RESUME_KEY_FILTER;
pub const FACILITY_RDBSS = NTSTATUS_FACILITY_CODE.RDBSS;
pub const FACILITY_BTH_ATT = NTSTATUS_FACILITY_CODE.BTH_ATT;
pub const FACILITY_SECUREBOOT = NTSTATUS_FACILITY_CODE.SECUREBOOT;
pub const FACILITY_AUDIO_KERNEL = NTSTATUS_FACILITY_CODE.AUDIO_KERNEL;
pub const FACILITY_VSM = NTSTATUS_FACILITY_CODE.VSM;
pub const FACILITY_VOLSNAP = NTSTATUS_FACILITY_CODE.VOLSNAP;
pub const FACILITY_SDBUS = NTSTATUS_FACILITY_CODE.SDBUS;
pub const FACILITY_SHARED_VHDX = NTSTATUS_FACILITY_CODE.SHARED_VHDX;
pub const FACILITY_SMB = NTSTATUS_FACILITY_CODE.SMB;
pub const FACILITY_XVS = NTSTATUS_FACILITY_CODE.XVS;
pub const FACILITY_INTERIX = NTSTATUS_FACILITY_CODE.INTERIX;
pub const FACILITY_SPACES = NTSTATUS_FACILITY_CODE.SPACES;
pub const FACILITY_SECURITY_CORE = NTSTATUS_FACILITY_CODE.SECURITY_CORE;
pub const FACILITY_SYSTEM_INTEGRITY = NTSTATUS_FACILITY_CODE.SYSTEM_INTEGRITY;
pub const FACILITY_LICENSING = NTSTATUS_FACILITY_CODE.LICENSING;
pub const FACILITY_PLATFORM_MANIFEST = NTSTATUS_FACILITY_CODE.PLATFORM_MANIFEST;
pub const FACILITY_APP_EXEC = NTSTATUS_FACILITY_CODE.APP_EXEC;
pub const FACILITY_MAXIMUM_VALUE = NTSTATUS_FACILITY_CODE.MAXIMUM_VALUE;

pub const DUPLICATE_HANDLE_OPTIONS = enum(u32) {
    CLOSE_SOURCE = 1,
    SAME_ACCESS = 2,
    _,
    pub fn initFlags(o: struct {
        CLOSE_SOURCE: u1 = 0,
        SAME_ACCESS: u1 = 0,
    }) DUPLICATE_HANDLE_OPTIONS {
        return @intToEnum(DUPLICATE_HANDLE_OPTIONS,
              (if (o.CLOSE_SOURCE == 1) @enumToInt(DUPLICATE_HANDLE_OPTIONS.CLOSE_SOURCE) else 0)
            | (if (o.SAME_ACCESS == 1) @enumToInt(DUPLICATE_HANDLE_OPTIONS.SAME_ACCESS) else 0)
        );
    }
};
pub const DUPLICATE_CLOSE_SOURCE = DUPLICATE_HANDLE_OPTIONS.CLOSE_SOURCE;
pub const DUPLICATE_SAME_ACCESS = DUPLICATE_HANDLE_OPTIONS.SAME_ACCESS;

pub const HANDLE_FLAGS = enum(u32) {
    INHERIT = 1,
    PROTECT_FROM_CLOSE = 2,
    _,
    pub fn initFlags(o: struct {
        INHERIT: u1 = 0,
        PROTECT_FROM_CLOSE: u1 = 0,
    }) HANDLE_FLAGS {
        return @intToEnum(HANDLE_FLAGS,
              (if (o.INHERIT == 1) @enumToInt(HANDLE_FLAGS.INHERIT) else 0)
            | (if (o.PROTECT_FROM_CLOSE == 1) @enumToInt(HANDLE_FLAGS.PROTECT_FROM_CLOSE) else 0)
        );
    }
};
pub const HANDLE_FLAG_INHERIT = HANDLE_FLAGS.INHERIT;
pub const HANDLE_FLAG_PROTECT_FROM_CLOSE = HANDLE_FLAGS.PROTECT_FROM_CLOSE;

pub const BOOL = i32;

pub const BOOLEAN = u8;

// TODO: this type has a FreeFunc 'SysFreeString', what can Zig do with this information?
pub const BSTR = *u16;

// TODO: this type has a FreeFunc 'CloseHandle', what can Zig do with this information?
pub const HANDLE = @import("std").os.windows.HANDLE;

// TODO: this type has a FreeFunc 'FreeLibrary', what can Zig do with this information?
pub const HINSTANCE = *opaque{};

pub const HRESULT = i32;

pub const HWND = *opaque{};

pub const LPARAM = isize;

pub const LRESULT = isize;

pub const LSTATUS = i32;

pub const NTSTATUS = i32;

pub const PSID = *opaque{};

pub const PSTR = [*:0]u8;

pub const PWSTR = [*:0]u16;

pub const WPARAM = usize;

pub const SYSTEMTIME = extern struct {
    wYear: u16,
    wMonth: u16,
    wDayOfWeek: u16,
    wDay: u16,
    wHour: u16,
    wMinute: u16,
    wSecond: u16,
    wMilliseconds: u16,
};

pub const FARPROC = fn(
) callconv(@import("std").os.windows.WINAPI) isize;

pub const NEARPROC = fn(
) callconv(@import("std").os.windows.WINAPI) isize;

pub const PROC = fn(
) callconv(@import("std").os.windows.WINAPI) isize;

pub const FILETIME = extern struct {
    dwLowDateTime: u32,
    dwHighDateTime: u32,
};

pub const RECT = extern struct {
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
};

pub const RECTL = extern struct {
    left: i32,
    top: i32,
    right: i32,
    bottom: i32,
};

pub const POINT = extern struct {
    x: i32,
    y: i32,
};

pub const POINTL = extern struct {
    x: i32,
    y: i32,
};

pub const SIZE = extern struct {
    cx: i32,
    cy: i32,
};

pub const POINTS = extern struct {
    x: i16,
    y: i16,
};

pub const APP_LOCAL_DEVICE_ID = extern struct {
    value: [32]u8,
};


//--------------------------------------------------------------------------------
// Section: Functions (16)
//--------------------------------------------------------------------------------
pub extern "OLEAUT32" fn SysAllocString(
    psz: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?BSTR;

pub extern "OLEAUT32" fn SysReAllocString(
    pbstr: ?*?BSTR,
    psz: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "OLEAUT32" fn SysAllocStringLen(
    strIn: ?[*:0]const u16,
    ui: u32,
) callconv(@import("std").os.windows.WINAPI) ?BSTR;

pub extern "OLEAUT32" fn SysReAllocStringLen(
    pbstr: ?*?BSTR,
    psz: ?[*:0]const u16,
    len: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "OLEAUT32" fn SysAddRefString(
    bstrString: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "OLEAUT32" fn SysReleaseString(
    bstrString: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "OLEAUT32" fn SysFreeString(
    bstrString: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "OLEAUT32" fn SysStringLen(
    pbstr: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "OLEAUT32" fn SysStringByteLen(
    bstr: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "OLEAUT32" fn SysAllocStringByteLen(
    psz: ?[*:0]const u8,
    len: u32,
) callconv(@import("std").os.windows.WINAPI) ?BSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "KERNEL32" fn CloseHandle(
    hObject: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "KERNEL32" fn DuplicateHandle(
    hSourceProcessHandle: ?HANDLE,
    hSourceHandle: ?HANDLE,
    hTargetProcessHandle: ?HANDLE,
    lpTargetHandle: ?*?HANDLE,
    dwDesiredAccess: u32,
    bInheritHandle: BOOL,
    dwOptions: DUPLICATE_HANDLE_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "api-ms-win-core-handle-l1-1-0" fn CompareObjectHandles(
    hFirstObjectHandle: ?HANDLE,
    hSecondObjectHandle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "KERNEL32" fn GetHandleInformation(
    hObject: ?HANDLE,
    lpdwFlags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "KERNEL32" fn SetHandleInformation(
    hObject: ?HANDLE,
    dwMask: u32,
    dwFlags: HANDLE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "ntdll" fn RtlNtStatusToDosError(
    Status: NTSTATUS,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (0)
//--------------------------------------------------------------------------------

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "FARPROC")) { _ = FARPROC; }
    if (@hasDecl(@This(), "NEARPROC")) { _ = NEARPROC; }
    if (@hasDecl(@This(), "PROC")) { _ = PROC; }

    @setEvalBranchQuota(
        @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (@import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
